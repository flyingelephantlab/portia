"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define("portia-ui/adapters/application", ["exports", "ember", "ember-data", "ember-data-url-templates"], function (exports, _ember, _emberData, _emberDataUrlTemplates) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

    var DELETED_EXTENSION = 'https://portia.scrapinghub.com/jsonapi/extensions/deleted';
    var UPDATES_EXTENSION = 'https://portia.scrapinghub.com/jsonapi/extensions/updates';

    function filter_update_errors(errors, pointer) {
        return errors.filter(function (data) {
            return !data.source || !data.source.pointer || data.source.pointer.startsWith(pointer);
        }).map(function (data) {
            if (!data.source || !data.source.pointer) {
                return data;
            }
            return _ember["default"].assign({}, data, {
                source: {
                    pointer: data.source.pointer.slice(pointer.length - 1)
                }
            });
        });
    }

    exports["default"] = _emberData["default"].JSONAPIAdapter.extend(_emberDataUrlTemplates["default"], {
        savingNotification: _ember["default"].inject.service(),
        uiState: _ember["default"].inject.service(),

        findRecordUrlTemplate: '{+host}{+selfLink}',
        createRecordUrlTemplate: '{+host}{+relatedLink}',
        updateRecordUrlTemplate: '{+host}{+selfLink}',
        deleteRecordUrlTemplate: '{+host}{+selfLink}',

        urlSegments: {
            selfLink: function selfLink(type, id, snapshot /*, query */) {
                // return the self link returned by a previous response, when the
                // record was included in a relationship request or a json api
                // compound document.
                return snapshot._internalModel._links.self;
            },

            relatedLink: function relatedLink(type, id, snapshot /*, query */) {
                // find a one to many relationship to the record and use it's
                // related link.
                var relationships = [];
                snapshot.eachRelationship(function (name, relationship) {
                    relationships.push([name, relationship]);
                });
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = relationships[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var _step$value = _slicedToArray(_step.value, 2);

                        var _name = _step$value[0];
                        var relationship = _step$value[1];

                        if (relationship.kind !== 'belongsTo') {
                            continue;
                        }
                        var relatedSnapshot = snapshot.belongsTo(_name);
                        if (!relatedSnapshot) {
                            continue;
                        }
                        var relatedRecord = relatedSnapshot._internalModel;
                        var inverseRelationship = snapshot.record.inverseFor(_name);
                        if (inverseRelationship.kind !== 'hasMany') {
                            continue;
                        }
                        var inverseName = inverseRelationship.name;
                        var manyRelationship = relatedRecord._relationships.get(inverseName);
                        if (manyRelationship.link) {
                            return manyRelationship.link.split('?', 1)[0];
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator["return"]) {
                            _iterator["return"]();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }
        },

        createRecord: function createRecord(store, type, snapshot) {
            // TODO: remove when ds-improved-ajax feature is enabled
            var request = this._requestFor({
                store: store, type: type, snapshot: snapshot,
                requestType: 'createRecord'
            });
            return this._makeRequest(request);
        },

        updateRecord: function updateRecord(store, type, snapshot) {
            // TODO: remove when ds-improved-ajax feature is enabled
            var request = this._requestFor({
                store: store, type: type, snapshot: snapshot,
                requestType: 'updateRecord'
            });
            return this._makeRequest(request);
        },

        deleteRecord: function deleteRecord(store, type, snapshot) {
            // TODO: remove when ds-improved-ajax feature is enabled
            var request = this._requestFor({
                store: store, type: type, snapshot: snapshot,
                requestType: 'deleteRecord'
            });
            return this._makeRequest(request);
        },

        dataForRequest: function dataForRequest(params) {
            // TODO: use _super when ds-improved-ajax feature is enabled
            var store = params.store;
            var type = params.type;
            var snapshot = params.snapshot;
            var requestType = params.requestType;

            type = type || snapshot && snapshot.type;
            var serializer = store.serializerFor(type.modelName);
            var data = {};

            switch (requestType) {
                case 'createRecord':
                    serializer.serializeIntoHash(data, type, snapshot, {
                        includeId: true
                    });
                    break;

                case 'updateRecord':
                    // allow partial updates by specifying adapterOptions.partial
                    serializer.serializeIntoHash(data, type, snapshot, {
                        includeId: true,
                        partial: snapshot.adapterOptions && snapshot.adapterOptions.partial
                    });
                    break;

                case 'deleteRecord':
                    data = undefined;
                    break;

                default:
                    data = this._super.apply(this, arguments);
                    break;
            }

            // merge data from sub-requests for updates extension
            if (requestType === 'createRecord' || requestType === 'updateRecord' || requestType === 'deleteRecord') {
                var coalesce = snapshot.adapterOptions && snapshot.adapterOptions.coalesce;
                if (coalesce && coalesce.type === 'main') {
                    var coalesced = [];
                    if (coalesce.updates) {
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = coalesce.updates[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var _data = _step2.value.data;

                                coalesced.push(_data.data);
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                                    _iterator2["return"]();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }
                    }

                    data = _ember["default"].assign(data || {}, {
                        links: {
                            profile: [UPDATES_EXTENSION]
                        },
                        aliases: {
                            updates: UPDATES_EXTENSION
                        },
                        meta: {
                            updates: coalesced
                        }
                    });
                }
            }

            return data;
        },

        methodForRequest: function methodForRequest(params) {
            // TODO: remove when ds-improved-ajax feature is enabled
            switch (params.requestType) {
                case 'createRecord':
                    return 'POST';
                case 'updateRecord':
                    return 'PATCH';
                case 'deleteRecord':
                    return 'DELETE';
            }
            return 'GET';
        },

        urlForRequest: function urlForRequest(params) {
            // TODO: remove when ds-improved-ajax feature is enabled
            var type = params.type;
            var id = params.id;
            var snapshot = params.snapshot;
            var requestType = params.requestType;

            type = type || snapshot && snapshot.type;
            id = id || snapshot && snapshot.id;
            if (requestType === 'createRecord' || requestType === 'updateRecord' || requestType === 'deleteRecord') {
                return this.buildURL(type.modelName, id, snapshot, requestType);
            }
            return this._super.apply(this, arguments);
        },

        headersForRequest: function headersForRequest(params) {
            var headers = this.get('headers') || {};
            var profiles = [];
            var acceptProfiles = [DELETED_EXTENSION];
            if (params.snapshot.adapterOptions && params.snapshot.adapterOptions.coalesce) {
                profiles.push(UPDATES_EXTENSION);
                acceptProfiles.push(UPDATES_EXTENSION);
            }
            if (profiles.length) {
                headers['Content-Type'] = "application/vnd.api+json; profile=\"" + profiles.join(' ') + "\"";
            } else {
                headers['Content-Type'] = 'application/vnd.api+json';
            }
            if (acceptProfiles.length) {
                headers['Accept'] = "application/vnd.api+json; profile=\"" + acceptProfiles.join(' ') + "\"";
            } else {
                headers['Accept'] = 'application/vnd.api+json';
            }
            return headers;
        },

        _requestFor: function _requestFor(params) {
            // TODO: use _super when ds-improved-ajax feature is enabled
            var method = this.methodForRequest(params);
            var url = this.urlForRequest(params);
            var headers = this.headersForRequest(params);
            var data = this.dataForRequest(params);
            var request = { method: method, url: url, headers: headers, data: data };

            return _ember["default"].assign(request, {
                store: params.store,
                type: params.type,
                snapshot: params.snapshot,
                requestType: params.requestType
            });
        },

        _makeRequest: function _makeRequest(request) {
            var _this = this;

            // TODO: use _super instead of this.ajax when ds-improved-ajax feature is enabled
            var requestType = request.requestType;

            if (requestType === 'createRecord' || requestType === 'updateRecord' || requestType === 'deleteRecord') {
                var _ret = (function () {
                    var method = request.method;
                    var url = request.url;
                    var data = request.data;
                    var store = request.store;
                    var type = request.type;
                    var snapshot = request.snapshot;

                    var promise = undefined;

                    var coalesce = snapshot.adapterOptions && snapshot.adapterOptions.coalesce;
                    if (coalesce) {
                        var _ret2 = (function () {
                            var coalesceType = coalesce.type;
                            var updates = coalesce.updates;

                            if (coalesceType === 'main') {
                                // the main request of the bulk operation, resolve the promises
                                // for the included models when this promise resolves
                                promise = _this.ajax(url, method, request);
                                promise.then(function (response) {
                                    var serializer = store.serializerFor(type.modelName);
                                    var requests = {};
                                    var responses = {};

                                    var _iteratorNormalCompletion3 = true;
                                    var _didIteratorError3 = false;
                                    var _iteratorError3 = undefined;

                                    try {
                                        for (var _iterator3 = updates[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                            var _step3$value = _step3.value;
                                            var _type = _step3$value.type;
                                            var _snapshot = _step3$value.snapshot;

                                            var modelName = _type.modelName;
                                            var id = _snapshot.id;
                                            var type_requests = requests[modelName] || (requests[modelName] = {});
                                            type_requests[id] = true;
                                        }
                                    } catch (err) {
                                        _didIteratorError3 = true;
                                        _iteratorError3 = err;
                                    } finally {
                                        try {
                                            if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
                                                _iterator3["return"]();
                                            }
                                        } finally {
                                            if (_didIteratorError3) {
                                                throw _iteratorError3;
                                            }
                                        }
                                    }

                                    var aliases = _this._getExtentionAliases(response, UPDATES_EXTENSION);
                                    if (aliases.length && response.meta) {
                                        var _iteratorNormalCompletion4 = true;
                                        var _didIteratorError4 = false;
                                        var _iteratorError4 = undefined;

                                        try {
                                            for (var _iterator4 = aliases[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                                                var alias = _step4.value;
                                                var _iteratorNormalCompletion5 = true;
                                                var _didIteratorError5 = false;
                                                var _iteratorError5 = undefined;

                                                try {
                                                    for (var _iterator5 = response.meta[alias][Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                                                        var update = _step5.value;

                                                        var normalized = serializer._normalizeResourceHelper(update);
                                                        var _type2 = normalized.type;
                                                        var id = normalized.id;

                                                        if (!requests[_type2] || !requests[_type2][id]) {
                                                            var error = new _emberData["default"].AdapterError([{
                                                                title: "Unexpected update confirmation",
                                                                detail: "" + response
                                                            }], "JSON API updates response contained " + "confirmations for resources that were not " + "requested.");
                                                            var _iteratorNormalCompletion6 = true;
                                                            var _didIteratorError6 = false;
                                                            var _iteratorError6 = undefined;

                                                            try {
                                                                for (var _iterator6 = updates[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                                                                    var resolver = _step6.value.resolver;

                                                                    resolver.reject(error);
                                                                }
                                                            } catch (err) {
                                                                _didIteratorError6 = true;
                                                                _iteratorError6 = err;
                                                            } finally {
                                                                try {
                                                                    if (!_iteratorNormalCompletion6 && _iterator6["return"]) {
                                                                        _iterator6["return"]();
                                                                    }
                                                                } finally {
                                                                    if (_didIteratorError6) {
                                                                        throw _iteratorError6;
                                                                    }
                                                                }
                                                            }

                                                            throw error;
                                                        }
                                                        var type_responses = responses[_type2] || (responses[_type2] = {});
                                                        type_responses[id] = update;
                                                    }
                                                } catch (err) {
                                                    _didIteratorError5 = true;
                                                    _iteratorError5 = err;
                                                } finally {
                                                    try {
                                                        if (!_iteratorNormalCompletion5 && _iterator5["return"]) {
                                                            _iterator5["return"]();
                                                        }
                                                    } finally {
                                                        if (_didIteratorError5) {
                                                            throw _iteratorError5;
                                                        }
                                                    }
                                                }
                                            }
                                        } catch (err) {
                                            _didIteratorError4 = true;
                                            _iteratorError4 = err;
                                        } finally {
                                            try {
                                                if (!_iteratorNormalCompletion4 && _iterator4["return"]) {
                                                    _iterator4["return"]();
                                                }
                                            } finally {
                                                if (_didIteratorError4) {
                                                    throw _iteratorError4;
                                                }
                                            }
                                        }
                                    }

                                    // treat deleted as update confirmations
                                    aliases = _this._getExtentionAliases(response, DELETED_EXTENSION);
                                    if (aliases.length && response.meta) {
                                        var _iteratorNormalCompletion7 = true;
                                        var _didIteratorError7 = false;
                                        var _iteratorError7 = undefined;

                                        try {
                                            for (var _iterator7 = aliases[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                                                var alias = _step7.value;
                                                var _iteratorNormalCompletion8 = true;
                                                var _didIteratorError8 = false;
                                                var _iteratorError8 = undefined;

                                                try {
                                                    for (var _iterator8 = response.meta[alias][Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                                                        var deleted = _step8.value;

                                                        var normalized = serializer._normalizeResourceHelper(deleted);
                                                        var _type3 = normalized.type;
                                                        var id = normalized.id;

                                                        if (requests[_type3] && requests[_type3][id]) {
                                                            var type_responses = responses[_type3] || (responses[_type3] = {});
                                                            type_responses[id] = deleted;
                                                        }
                                                    }
                                                } catch (err) {
                                                    _didIteratorError8 = true;
                                                    _iteratorError8 = err;
                                                } finally {
                                                    try {
                                                        if (!_iteratorNormalCompletion8 && _iterator8["return"]) {
                                                            _iterator8["return"]();
                                                        }
                                                    } finally {
                                                        if (_didIteratorError8) {
                                                            throw _iteratorError8;
                                                        }
                                                    }
                                                }
                                            }
                                        } catch (err) {
                                            _didIteratorError7 = true;
                                            _iteratorError7 = err;
                                        } finally {
                                            try {
                                                if (!_iteratorNormalCompletion7 && _iterator7["return"]) {
                                                    _iterator7["return"]();
                                                }
                                            } finally {
                                                if (_didIteratorError7) {
                                                    throw _iteratorError7;
                                                }
                                            }
                                        }
                                    }

                                    if (response.included) {
                                        var filtered_included = [];
                                        var _iteratorNormalCompletion9 = true;
                                        var _didIteratorError9 = false;
                                        var _iteratorError9 = undefined;

                                        try {
                                            for (var _iterator9 = response.included[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                                                var included = _step9.value;

                                                var normalized = serializer._normalizeResourceHelper(included);
                                                var _type4 = normalized.type;
                                                var id = normalized.id;

                                                if (responses[_type4]) {
                                                    if (responses[_type4][id]) {
                                                        responses[_type4][id] = included;
                                                    }
                                                } else {
                                                    filtered_included.push(included);
                                                }
                                            }
                                        } catch (err) {
                                            _didIteratorError9 = true;
                                            _iteratorError9 = err;
                                        } finally {
                                            try {
                                                if (!_iteratorNormalCompletion9 && _iterator9["return"]) {
                                                    _iterator9["return"]();
                                                }
                                            } finally {
                                                if (_didIteratorError9) {
                                                    throw _iteratorError9;
                                                }
                                            }
                                        }

                                        response.included = filtered_included;
                                    }

                                    var _iteratorNormalCompletion10 = true;
                                    var _didIteratorError10 = false;
                                    var _iteratorError10 = undefined;

                                    try {
                                        for (var _iterator10 = updates[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                                            var _step10$value = _step10.value;
                                            var _type5 = _step10$value.type;
                                            var _snapshot2 = _step10$value.snapshot;
                                            var resolver = _step10$value.resolver;

                                            var modelName = _type5.modelName;
                                            var id = _snapshot2.id;
                                            if (responses[modelName] && responses[modelName][id]) {
                                                resolver.resolve({
                                                    data: responses[modelName][id]
                                                });
                                                continue;
                                            }
                                            resolver.reject(new _emberData["default"].AdapterError([{
                                                title: "Missing update confirmation",
                                                detail: "" + response
                                            }], "JSON API updates response was missing confirmation for " + "an updated resource"));
                                        }
                                    } catch (err) {
                                        _didIteratorError10 = true;
                                        _iteratorError10 = err;
                                    } finally {
                                        try {
                                            if (!_iteratorNormalCompletion10 && _iterator10["return"]) {
                                                _iterator10["return"]();
                                            }
                                        } finally {
                                            if (_didIteratorError10) {
                                                throw _iteratorError10;
                                            }
                                        }
                                    }

                                    return response;
                                }, function (error) {
                                    for (var i = 0; i < updates.length; i++) {
                                        var resolver = updates[i].resolver;

                                        var pointer = "/meta/updates/" + i + "/";
                                        var modelError = new error.constructor(filter_update_errors(error.errors, pointer), error.message);
                                        resolver.reject(modelError);
                                    }
                                });
                            } else {
                                // a sub-request of the bulk operation, return a promise that
                                // will be resolved when the main request completes.
                                var resolver = _ember["default"].RSVP.defer();
                                updates.push({
                                    type: type,
                                    snapshot: snapshot,
                                    data: data,
                                    resolver: resolver
                                });
                                return {
                                    v: {
                                        v: resolver.promise
                                    }
                                };
                            }
                        })();

                        if (typeof _ret2 === "object") return _ret2.v;
                    } else {
                        promise = _this.ajax(url, method, request);
                    }

                    // handle our custom json api extension for listing records that were
                    // deleted in the backend and should be unloaded.
                    promise.then(function (response) {
                        var aliases = _this._getExtentionAliases(response, DELETED_EXTENSION);
                        if (aliases.length && response.meta) {
                            var serializer = store.serializerFor(type.modelName);
                            var _iteratorNormalCompletion11 = true;
                            var _didIteratorError11 = false;
                            var _iteratorError11 = undefined;

                            try {
                                for (var _iterator11 = aliases[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                                    var alias = _step11.value;
                                    var _iteratorNormalCompletion12 = true;
                                    var _didIteratorError12 = false;
                                    var _iteratorError12 = undefined;

                                    try {
                                        for (var _iterator12 = response.meta[alias][Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                                            var deleted = _step12.value;

                                            var normalized = serializer._normalizeResourceHelper(deleted);
                                            if (!normalized) {
                                                continue;
                                            }
                                            var record = store.peekRecord(normalized.type, normalized.id);
                                            if (record) {
                                                if (record.get('isSaving')) {
                                                    record.one('didCommit', record.unloadRecord);
                                                } else {
                                                    record.unloadRecord();
                                                }
                                            }
                                        }
                                    } catch (err) {
                                        _didIteratorError12 = true;
                                        _iteratorError12 = err;
                                    } finally {
                                        try {
                                            if (!_iteratorNormalCompletion12 && _iterator12["return"]) {
                                                _iterator12["return"]();
                                            }
                                        } finally {
                                            if (_didIteratorError12) {
                                                throw _iteratorError12;
                                            }
                                        }
                                    }
                                }
                            } catch (err) {
                                _didIteratorError11 = true;
                                _iteratorError11 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion11 && _iterator11["return"]) {
                                        _iterator11["return"]();
                                    }
                                } finally {
                                    if (_didIteratorError11) {
                                        throw _iteratorError11;
                                    }
                                }
                            }
                        }
                        return response;
                    });

                    // update saving status
                    _this.get('savingNotification').start();
                    promise["finally"](function () {
                        _this.get('savingNotification').end();
                        var project = _this.get('uiState.models.project');
                        if (project) {
                            project.markChanged();
                        }
                    });

                    return {
                        v: promise
                    };
                })();

                if (typeof _ret === "object") return _ret.v;
            }

            return this.ajax(request.url, request.method, request);
        },

        _getExtentionAliases: function _getExtentionAliases(response, extention) {
            var aliases = [];
            if (response && response.links && response.links.profile && response.links.profile.includes(extention)) {
                var _iteratorNormalCompletion13 = true;
                var _didIteratorError13 = false;
                var _iteratorError13 = undefined;

                try {
                    for (var _iterator13 = Object.keys(response.aliases)[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                        var alias = _step13.value;

                        if (response.aliases[alias] === extention) {
                            aliases.push(alias);
                        }
                    }
                } catch (err) {
                    _didIteratorError13 = true;
                    _iteratorError13 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion13 && _iterator13["return"]) {
                            _iterator13["return"]();
                        }
                    } finally {
                        if (_didIteratorError13) {
                            throw _iteratorError13;
                        }
                    }
                }
            }
            return aliases;
        },

        ajaxOptions: function ajaxOptions(url, method) {
            var request = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

            // TODO: move to _requestToJQueryAjaxHash when ds-improved-ajax feature is enabled
            var headers = request.headers;

            var options = _ember["default"].assign({}, request);
            delete options.method;
            delete options.url;
            delete options.headers;

            var hash = this._super(url, method, options);

            if (headers) {
                hash.contentType = headers['Content-Type'];
                delete headers['Content-Type'];

                hash.beforeSend = function (xhr) {
                    Object.keys(headers).forEach(function (key) {
                        return xhr.setRequestHeader(key, headers[key]);
                    });
                };
            }
            return hash;
        }
    });
});
define('portia-ui/adapters/project', ['exports', 'portia-ui/adapters/application'], function (exports, _portiaUiAdaptersApplication) {
    exports['default'] = _portiaUiAdaptersApplication['default'].extend({
        urlTemplate: '{+host}/api/projects{/id}',
        findRecordUrlTemplate: '{+host}/api/projects{/id}',
        createRecordUrlTemplate: '{+host}/api/projects'
    });
});
define('portia-ui/app', ['exports', 'ember', 'portia-ui/resolver', 'ember-load-initializers', 'portia-ui/config/environment'], function (exports, _ember, _portiaUiResolver, _emberLoadInitializers, _portiaUiConfigEnvironment) {

    var App = undefined;

    _ember['default'].MODEL_FACTORY_INJECTIONS = true;

    App = _ember['default'].Application.extend({
        modulePrefix: _portiaUiConfigEnvironment['default'].modulePrefix,
        podModulePrefix: _portiaUiConfigEnvironment['default'].podModulePrefix,
        Resolver: _portiaUiResolver['default'],

        customEvents: {
            transitionend: 'transitionEnd'
        }
    });

    (0, _emberLoadInitializers['default'])(App, _portiaUiConfigEnvironment['default'].modulePrefix);

    exports['default'] = App;
});
define('portia-ui/components/add-start-url-button', ['exports', 'ember'], function (exports, _ember) {
    var computed = _ember['default'].computed;
    var service = _ember['default'].inject.service;
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        browser: service(),
        dispatcher: service(),

        url: computed.readOnly('browser.url'),
        emptyUrl: computed.not('url'),
        disableStartUrl: computed.or('emptyUrl', 'browser.invalidUrl'),

        newStartUrl: computed('url', 'spider.startUrls.[]', function () {
            var url = this.get('url');
            var startUrls = this.get('spider.startUrls').mapBy('url');
            return url && !startUrls.includes(url);
        }),

        actions: {
            toggleStartUrl: function toggleStartUrl() {
                if (this.get('emptyUrl')) {
                    return;
                }
                this._toggleStartUrl();
            }
        },

        _toggleStartUrl: function _toggleStartUrl() {
            if (this.get('newStartUrl')) {
                this.get('dispatcher').addStartUrl(this.get('spider'), this.get('url'));
            } else {
                this.get('dispatcher').removeStartUrl(this.get('spider'), this.get('_startUrl'));
            }
        },
        _startUrl: computed('spider.startUrls.[]', 'url', function () {
            return this.get('spider.startUrls').findBy('url', this.get('url'));
        })
    });
});
define('portia-ui/components/animation-container', ['exports', 'ember', 'portia-ui/utils/attrs'], function (exports, _ember, _portiaUiUtilsAttrs) {
    exports['default'] = _ember['default'].Component.extend({
        positionMonitor: _ember['default'].inject.service(),

        classNames: ['animation-container'],
        classNameBindings: ['fade', 'hidden'],

        fade: false,
        hidden: false,
        setHeight: true,
        setWidth: true,

        didReceiveAttrs: function didReceiveAttrs(_ref) {
            var _this = this;

            var oldAttrs = _ref.oldAttrs;
            var newAttrs = _ref.newAttrs;

            if ((0, _portiaUiUtilsAttrs.attrValue)(newAttrs.hide)) {
                if (!oldAttrs) {
                    this.setProperties({
                        fade: true,
                        hidden: true
                    });
                } else if (!(0, _portiaUiUtilsAttrs.attrValue)(oldAttrs.hide)) {
                    // if hide is toggled quickly enough, and the opacity hasn't yet changed, then the
                    // transitionend event will not fire to set hidden = true.
                    if (+this.$().css('opacity') === 0) {
                        this.setProperties({
                            fade: true,
                            hidden: true
                        });
                    } else {
                        this.set('fade', true);
                    }
                }
            } else {
                if (!oldAttrs) {
                    this.setProperties({
                        fade: true,
                        hidden: true
                    });
                    _ember['default'].run.later(function () {
                        _this.set('hidden', false);
                        _ember['default'].run.later(_this, _this.set, 'fade', false, 50);
                    }, 50);
                } else if ((0, _portiaUiUtilsAttrs.attrValue)(oldAttrs.hide)) {
                    this.set('hidden', false);
                    _ember['default'].run.later(this, this.set, 'fade', false, 50);
                }
            }
        },

        didInsertElement: function didInsertElement() {
            var _this2 = this;

            var positionMonitor = this.get('positionMonitor');

            _ember['default'].run.schedule('afterRender', function () {
                _this2.content = _this2.element.children[0];
                positionMonitor.registerElement(_this2.element, _this2, _this2.readPosition, _this2.updatePosition);
                positionMonitor.registerElement(_this2.content, _this2, null, _this2.updateSize);
                _ember['default'].run.scheduleOnce('afterRender', positionMonitor, positionMonitor.update);
            });
        },

        willDestroyElement: function willDestroyElement() {
            var positionMonitor = this.get('positionMonitor');

            positionMonitor.unRegisterElement(this.element, this, this.readPosition, this.updatePosition);
            positionMonitor.unRegisterElement(this.content, this, null, this.updateSize);
        },

        readPosition: function readPosition(rects, boundingRect, element) {
            this.containerPosition = _ember['default'].$(element).position();
        },

        updatePosition: function updatePosition(rects, boundingRect) {
            var content = this.content;
            var style = '';
            if (boundingRect.top || boundingRect.bottom || boundingRect.left || boundingRect.right) {
                var left = Math.round(this.containerPosition.left);
                var _top = Math.round(this.containerPosition.top);
                style = 'transform: translate(' + left + 'px, ' + _top + 'px);';
            }
            content.setAttribute('style', style);
        },

        updateSize: function updateSize(rects, boundingRect) {
            var width = Math.round(boundingRect.width);
            var height = Math.round(boundingRect.height);
            var style = '';
            if (this.get('setWidth')) {
                style += 'width: ' + width + 'px;';
            }
            if (this.get('setHeight')) {
                style += 'height: ' + height + 'px;';
            }
            this.element.setAttribute('style', style);
        },

        transitionEnd: function transitionEnd($event) {
            if ($event.originalEvent.propertyName === 'opacity' && $event.originalEvent.target === this.element) {
                if (this.get('fade')) {
                    this.set('hidden', true);
                }
            }
        }
    });
});
define('portia-ui/components/annotation-options', ['exports', 'ember', 'portia-ui/components/inspector-panel'], function (exports, _ember, _portiaUiComponentsInspectorPanel) {
    exports['default'] = _ember['default'].Component.extend({
        uiState: _ember['default'].inject.service(),
        dispatcher: _ember['default'].inject.service(),

        tagName: '',

        annotation: null,
        invalidSelector: false,

        selectionModeOptions: [{
            value: 'auto',
            label: 'Automatic'
        }, {
            value: 'css',
            label: 'CSS selector'
        }, {
            value: 'xpath',
            label: 'XPath selector'
        }],

        attribute: _ember['default'].computed('annotation.attribute', 'attributes.[]', {
            get: function get() {
                return this.get('attributes').findBy('attribute', this.get('annotation.attribute'));
            },

            set: function set(key, value) {
                this.set('annotation.attribute', value.attribute);
                return value;
            }
        }),
        attributes: _ember['default'].computed('uiState.viewPort.selectedElement', function () {
            return (0, _portiaUiComponentsInspectorPanel.getAttributeList)(this.get('uiState.viewPort.selectedElement'));
        }),
        selectionMode: _ember['default'].computed('annotation.selectionMode', {
            get: function get() {
                return this.selectionModeOptions.findBy('value', this.get('annotation.selectionMode'));
            },

            set: function set(key, value) {
                this.set('annotation.selectionMode', value.value);
                return value;
            }
        }),
        cssSelector: _ember['default'].computed({
            get: function get() {
                return this.get('annotation.selector');
            },

            set: function set(key, value) {
                if (this.get('invalidSelector')) {
                    return this.get('cssSelector');
                } else {
                    var annotation = this.get('annotation');
                    this.setAnnotationSelector(annotation, value);
                    return value;
                }
            }
        }),
        editedCssSelector: _ember['default'].computed({
            get: function get() {
                return null;
            },

            set: function set(key, value) {
                var annotation = this.get('annotation');
                if (value === null) {
                    this.set('invalidSelector', false);
                    this.setAnnotationSelector(annotation, this.get('cssSelector'));
                } else {
                    var invalidSelector = false;

                    try {
                        document.querySelectorAll(value);
                    } catch (e) {
                        invalidSelector = true;
                    }

                    this.set('invalidSelector', invalidSelector);
                    if (!invalidSelector) {
                        this.setAnnotationSelector(annotation, value);
                    }
                }
                return value;
            }
        }),

        updateCssSelector: _ember['default'].observer('annotation.selector', function () {
            if (this.get('editedCssSelector') === null) {
                this.set('cssSelector', this.get('annotation.selector'));
            }
        }),

        setAnnotationSelector: function setAnnotationSelector(annotation, selector) {
            var _this = this;

            return annotation.get('parent.sample').then(function (sample) {
                annotation.setSelector(selector);
                return _this.updateSelector(sample);
            });
        },

        updateSelector: function updateSelector(sample) {
            var _this2 = this;

            if (!this._updateSelectorPromise) {
                this._updateSelectorPromise = this._updateSelector(sample);
            } else if (!this._updateSelectorPromise.pending) {
                this._updateSelectorPromise.pending = true;
                this._updateSelectorPromise.then(function () {
                    return _this2._updateSelectorPromise = _this2._updateSelector(sample);
                });
            }

            return this._updateSelectorPromise;
        },

        _updateSelector: function _updateSelector(sample) {
            var _this3 = this;

            var dispatcher = this.get('dispatcher');
            var promise = dispatcher.updateSampleSelectors(sample).then(function () {
                if (_this3._updateSelectorPromise === promise) {
                    delete _this3._updateSelectorPromise;
                }
            });
            return promise;
        },

        actions: {
            save: function save() {
                var promise = this.get('annotation').save();
                return this._updateSelectorPromise ? this._updateSelectorPromise.then(function () {
                    return promise;
                }) : promise;
            }
        }
    });
});
define('portia-ui/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'portia-ui/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _portiaUiConfigEnvironment) {

  var name = _portiaUiConfigEnvironment['default'].APP.name;
  var version = _portiaUiConfigEnvironment['default'].APP.version;

  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('portia-ui/components/browser-iframe', ['exports', 'ember', 'ember-local-storage', 'portia-ui/utils/utils', 'portia-ui/utils/interaction-event', 'portia-ui/utils/tree-mirror-delegate', 'portia-ui/services/browser'], function (exports, _ember, _emberLocalStorage, _portiaUiUtilsUtils, _portiaUiUtilsInteractionEvent, _portiaUiUtilsTreeMirrorDelegate, _portiaUiServicesBrowser) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    var _slice = Array.prototype.slice;

    function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

    var BrowserIFrame = _ember['default'].Component.extend({
        browser: _ember['default'].inject.service(),
        overlays: _ember['default'].inject.service(),
        webSocket: _ember['default'].inject.service(),
        uiState: _ember['default'].inject.service(),
        cookiesStore: (0, _emberLocalStorage.storageFor)('cookies'),
        extractedItems: _ember['default'].inject.service(),

        tagName: 'iframe',
        classNames: ['browser-iframe'],
        classNameBindings: ['overlays.hasOverlays:has-overlays'],

        splashUrl: null,

        disabled: _ember['default'].computed.alias('browser.disabled'),
        document: _ember['default'].computed.alias('browser.document'),
        loading: _ember['default'].computed.alias('browser.loading'),
        url: _ember['default'].computed.readOnly('browser.url'),
        baseurl: _ember['default'].computed.readOnly('browser.baseurl'),
        spider: _ember['default'].computed.readOnly('uiState.models.spider.id'),
        project: _ember['default'].computed.readOnly('uiState.models.project.id'),

        init: function init() {
            this._super();
            this.loadCookies();
            this.frameEventListeners = [];
        },

        click: function click() {
            if (this.attrs.clickHandler) {
                var _Ember$run;

                /*
                    For some reason, when using Ember.run, if the handler initiates
                    a route transition and the page in the iframe has a <base> tag,
                    the url is changed to the route uri concatenated to the iframe's
                    <base> url.
                    Using Ember.run.next fixes this.
                 */
                (_Ember$run = _ember['default'].run).next.apply(_Ember$run, [this, this.attrs.clickHandler].concat(_slice.call(arguments)));
            }
        },

        willInsertElement: function willInsertElement() {
            if (BrowserIFrame.instances) {
                throw new Error('The can be only one browser-iframe instance!');
            }
            BrowserIFrame.instances++;
            var ws = this.get('webSocket');
            ws.connect();
            ws.addCommand('loadStarted', this, this.msgLoadStarted);
            ws.addCommand('metadata', this, this.msgMetadata);
            ws.addCommand('load', this, this.msgLoad);
            ws.addCommand('cookies', this, this.msgCookies);
            ws.addCommand('mutation', this, this.msgMutation);
        },

        didInsertElement: function didInsertElement() {
            var _this = this;

            _ember['default'].run.schedule('afterRender', function () {
                _this.setProperties({
                    disabled: false,
                    document: null
                });
                _this.loadUrl();
            });
        },

        willDestroyElement: function willDestroyElement() {
            var ws = this.get('webSocket');
            ws.removeCommand('loadStarted', this, this.msgLoadStarted);
            ws.removeCommand('metadata', this, this.msgMetadata);
            ws.removeCommand('load', this, this.msgLoad);
            ws.removeCommand('cookies', this, this.msgCookies);
            ws.removeCommand('mutation', this, this.msgMutation);
            ws.close();

            this.setProperties({
                disabled: true,
                document: null
            });
            BrowserIFrame.instances--;
        },

        documentLoaded: function documentLoaded() {
            this.set('document', this.element.contentDocument);
        },

        /**
         * Loads and displays a url interactively
         * Can only be called in "browse" mode.
         */
        loadUrl: _ember['default'].observer('url', 'baseurl', 'webSocket.closed', function () {
            _ember['default'].run.scheduleOnce('sync', this, this._loadUrl);
        }),

        _loadUrl: function _loadUrl() {
            var url = this.get('url');
            var baseurl = this.get('baseurl');

            if (!url || !url.includes('://') || !(0, _portiaUiUtilsUtils.cleanUrl)(url)) {
                return;
            }
            if (this.get('webSocket.closed')) {
                this.splashUrl = null;
                return;
            }
            if (this.splashUrl === url) {
                return;
            }

            this.set('loading', true);

            this.get('webSocket').send({
                _meta: {
                    // TODO: Send current project and spider to see followed links and extracted items?
                    id: (0, _portiaUiUtilsUtils.shortGuid)(),
                    viewport: this.iframeSize(),
                    user_agent: navigator.userAgent,
                    cookies: this.loadCookies(),
                    project: this.get('project'),
                    spider: this.get('spider')
                },
                _command: 'load',
                url: url,
                baseurl: baseurl
            });
        },

        msgLoadStarted: function msgLoadStarted() {
            this.set('loading', true);
        },

        msgLoad: function msgLoad(data) {
            this.msgMetadata(data);
        },

        msgMetadata: function msgMetadata(data) {
            if (data.loaded) {
                this.set('loading', false);
            }
            if (data.url) {
                this.splashUrl = data.url;
                this.set('browser.url', data.url);
            }
            if (data.error) {
                this.handleMetadataError();
            }
        },

        handleMetadataError: function handleMetadataError() {
            this.set('loading', false);
            this.set('splashUrl', null);
            this.get('extractedItems').failExtraction('Failed Loading Page');
            this.get('browser').invalidateUrl();
            this.get('webSocket').send({
                _meta: {
                    spider: this.get('spider'),
                    project: this.get('project')
                },
                _command: 'interact'
            });
        },

        msgMutation: function msgMutation(data) {
            var _this2 = this;

            var _data$_data = _toArray(data._data);

            var action = _data$_data[0];

            var args = _data$_data.slice(1);

            if (action === 'initialize') {
                this.iframePromise = this.clearIframe().then(function () {
                    var doc = _this2.element.contentDocument;
                    _this2.treeMirror = new TreeMirror(doc, (0, _portiaUiUtilsTreeMirrorDelegate['default'])(_this2));
                });
            }
            this.iframePromise.then(function () {
                var browser = _this2.get('browser');
                _this2.treeMirror.delegate.cssEnabled = browser.get('cssEnabled');
                _this2.treeMirror[action].apply(_this2.treeMirror, args);
                browser.trigger('contentChanged');
            });
        },

        cookieId: _ember['default'].computed('spider', 'project', function () {
            if (this.get('project') && this.get('spider')) {
                return ('cookies:' + this.get('project') + '/' + this.get('spider')).replace(/\./g, '_');
            }
        }),

        msgCookies: function msgCookies(data) {
            var cookies = data.cookies,
                cookieId = this.get('cookieId');
            if (cookies && cookies.length) {
                this.set('cookiesStore.' + cookieId, cookies);
            }
        },

        loadCookies: function loadCookies() {
            var cookieId = this.get('cookieId');
            if (cookieId) {
                var cookies = this.get('cookiesStore.' + cookieId);
                if (cookies) {
                    return cookies;
                }
            }
            return {};
        },

        unbindEventHandlers: function unbindEventHandlers() {
            $(this.element.contentDocument).off('.portia-iframe');
            this.frameEventListeners.forEach(function (_ref) {
                var _ref2 = _slicedToArray(_ref, 4);

                var target = _ref2[0];
                var event = _ref2[1];
                var fn = _ref2[2];
                var useCapture = _ref2[3];

                target.removeEventListener(event, fn, useCapture);
            });
            this.frameEventListeners = [];
        },

        addFrameEventListener: function addFrameEventListener(event, fn) {
            var useCapture = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

            var frameDoc = this.element.contentDocument;
            frameDoc.addEventListener(event, fn, useCapture);
            this.frameEventListeners.push([frameDoc, event, fn, useCapture]);
        },

        bindEventHandlers: function bindEventHandlers() {
            var _this3 = this;

            this.unbindEventHandlers();
            var $iframe = $(this.element.contentDocument);
            $iframe.on(['keyup', 'keydown', 'keypress', 'input', 'mousedown', 'mouseup'].map(function (eventName) {
                return eventName + '.portia.portia-iframe';
            }).join(' '), function (e) {
                if (_this3.get('browser.mode') === _portiaUiServicesBrowser.NAVIGATION_MODE) {
                    _this3.postEvent(e);
                }
            });
            $iframe.on('click.portia.portia-iframe', function (e) {
                if (_this3.get('browser.mode') === _portiaUiServicesBrowser.NAVIGATION_MODE) {
                    _this3.clickHandlerBrowse(e);
                } else {
                    _this3.click();
                    return false;
                }
            });
            this.addFrameEventListener('focus', this.postEvent.bind(this), true);
            this.addFrameEventListener('blur', this.postEvent.bind(this), true);
            this.addFrameEventListener('change', this.postEvent.bind(this), true);
            this.addFrameEventListener('scroll', function (e) {
                return _ember['default'].run.throttle(_this3, _this3.postEvent, e, 200);
            }, true);
        },

        clickHandlerBrowse: function clickHandlerBrowse(evt) {
            if (evt.which <= 1 && !evt.ctrlKey) {
                // Ignore right/middle click or Ctrl+click
                if (evt.target.tagName !== 'INPUT') {
                    evt.preventDefault();
                }
                this.postEvent(evt);
            }
        },

        postEvent: function postEvent(evt) {
            this.get('webSocket').send({
                _meta: {
                    spider: this.get('spider'),
                    project: this.get('project')
                },
                _command: 'interact',
                interaction: (0, _portiaUiUtilsInteractionEvent['default'])(evt)
            });
        },

        clearIframe: function clearIframe() {
            var defer = new _ember['default'].RSVP.defer();
            var iframe = this.element;
            var id = (0, _portiaUiUtilsUtils.shortGuid)();
            var that = this;
            // Using a empty static page because using srcdoc or an data:uri gives
            // permission problems and/or broken baseURI behaviour in different browsers.
            iframe.setAttribute('src', '/static/empty-frame.html?' + id);
            iframe.removeAttribute('srcdoc');
            // Using a message to workaround onload bug on some browsers (cough IE cough).
            var $win = $(window).bind('message', function onMessage(e) {
                if (e.originalEvent.data.frameReady === id) {
                    that.bindEventHandlers();
                    _ember['default'].run(that, that.documentLoaded);
                    $win.unbind('message', onMessage);
                    defer.resolve();
                }
            });
            return defer.promise;
        },

        iframeSize: function iframeSize() {
            var iframe = _ember['default'].$(this.element);
            var height = Math.max(iframe.innerHeight(), 10);

            if (iframe) {
                return iframe.innerWidth() + 'x' + height;
            }
            return null;
        }
    });

    BrowserIFrame.reopenClass({
        instances: 0
    });

    exports['default'] = BrowserIFrame;
});
define('portia-ui/components/browser-view-port', ['exports', 'ember', 'portia-ui/components/inspector-panel'], function (exports, _ember, _portiaUiComponentsInspectorPanel) {
    exports['default'] = _ember['default'].Component.extend({
        browser: _ember['default'].inject.service(),
        selectorMatcher: _ember['default'].inject.service(),
        uiState: _ember['default'].inject.service(),
        webSocket: _ember['default'].inject.service(),

        classNames: ['browser-view-port', 'panel', 'panel-default'],

        hoverSelector: ':hover:not(html):not(body):not(head)',

        willInsertElement: function willInsertElement() {
            this.get('selectorMatcher').register(this.hoverSelector, this, this.updateHoveredElement);
        },

        willDestroyElement: function willDestroyElement() {
            this.get('selectorMatcher').unRegister(this.hoverSelector, this, this.updateHoveredElement);
        },

        updateHoveredElement: function updateHoveredElement(elements) {
            var element = elements.get('lastObject');
            this.set('uiState.viewPort.hoveredElement', (0, _portiaUiComponentsInspectorPanel.getAttributeList)(element).length ? element : null);
        },

        actions: {
            viewPortClick: function viewPortClick() {
                if (this.attrs.clickHandler) {
                    var _attrs;

                    (_attrs = this.attrs).clickHandler.apply(_attrs, arguments);
                }
            },

            reconnectWebsocket: function reconnectWebsocket() {
                this.get('webSocket').connect();
            }
        }
    });
});
define('portia-ui/components/buffered-input', ['exports', 'ember', 'portia-ui/utils/promises'], function (exports, _ember, _portiaUiUtilsPromises) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        autofocus: false,
        autoSelect: false,
        focused: false,
        spellcheck: true,
        type: 'text',
        value: null,
        viewValue: null,

        didInsertElement: function didInsertElement() {
            var _this = this;

            if (this.get('focused')) {
                _ember['default'].run.schedule('afterRender', function () {
                    _this.send('startEditing');
                });
                _ember['default'].run.next(this, this.setInputFocus);
            }
            // Prevent default / bubbling of keypress event when pressing enter
            _ember['default'].$('#' + this.get('inputId')).keypress(function (e) {
                return e.which !== 13;
            });
        },

        inputId: _ember['default'].computed('elementId', function () {
            return this.get('elementId') + '-input';
        }),

        displayedValue: _ember['default'].computed('value', 'viewValue', 'focused', {
            get: function get() {
                if (this.get('focused')) {
                    return this.get('viewValue');
                } else {
                    return this.get('value');
                }
            },

            set: function set(key, value, cachedValue) {
                if (this.get('focused')) {
                    this.set('viewValue', value);
                    return value;
                } else {
                    return cachedValue;
                }
            }
        }),

        updateInputFocus: _ember['default'].observer('focused', function () {
            _ember['default'].run.scheduleOnce('afterRender', this, this.setInputFocus);
        }),

        setInputFocus: function setInputFocus() {
            var inputElement = _ember['default'].$('#' + this.get('inputId')).get(0);
            if (inputElement && this.get('focused')) {
                inputElement.focus();
                if (this.get('autoSelect')) {
                    inputElement.select();
                }
            } else {
                if (!this.get('isDestroying')) {
                    inputElement.blur();
                }
            }
        },

        validateName: function validateName(name) {
            return typeof this.attrs.validate !== 'function' || this.attrs.validate(name);
        },

        actions: {
            startEditing: function startEditing() {
                this.setProperties({
                    focused: true,
                    viewValue: this.get('value')
                });
            },

            cancelEditing: function cancelEditing() {
                this.setProperties({
                    focused: false,
                    viewValue: null
                });
            },

            endEditing: function endEditing(reason) {
                var _this2 = this;

                var value = this.get('viewValue');
                (0, _portiaUiUtilsPromises.ensurePromise)(this.validateName(value)).then(function (isValid) {
                    if (!isValid) {
                        _ember['default'].run.next(_this2, _this2.setInputFocus);
                    } else {
                        _this2.setProperties({
                            focused: false,
                            value: value,
                            viewValue: null
                        });
                        if (reason === 'enter' && _this2.attrs.onEnterPress && _this2.attrs.onEnterPress.call) {
                            _this2.attrs.onEnterPress(value);
                        }
                        if (_this2.attrs.onChange && _this2.attrs.onChange.call) {
                            _this2.attrs.onChange(value);
                        }
                    }
                });
            }
        }
    });
});
define('portia-ui/components/colored-badge', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        color: null,
        value: 0,

        badgeStyle: _ember['default'].computed('color.main', function () {
            var color = this.get('color.main');
            return _ember['default'].String.htmlSafe(color ? 'background-color: ' + color + ';' : '');
        })
    });
});
define('portia-ui/components/colored-span', ['exports', 'ember'], function (exports, _ember) {
    var computed = _ember['default'].computed;
    exports['default'] = _ember['default'].Component.extend({
        tagName: 'span',
        attributeBindings: ['colorStyle:style'],
        colorStyle: computed('color.main', function () {
            var color = this.get('color.main');
            return _ember['default'].String.htmlSafe(color ? 'color: ' + color + ';' : '');
        })
    });
});
define('portia-ui/components/combo-box', ['exports', 'ember', 'portia-ui/components/select-box'], function (exports, _ember, _portiaUiComponentsSelectBox) {
    exports['default'] = _portiaUiComponentsSelectBox['default'].extend({
        autoSelect: false,
        inputClass: null,
        spellcheck: true,

        query: _ember['default'].computed('open', 'viewValue', 'valueAttribute', {
            get: function get() {
                return this.getValueAttribute(this.get('viewValue'));
            },

            set: function set(key, value) {
                _ember['default'].run.scheduleOnce('afterRender', this, this.updateViewValue);
                return value;
            }
        }),

        setInputFocus: function setInputFocus() {
            var ignoreAutoSelect = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

            var inputElement = _ember['default'].$('#' + this.get('inputId')).get(0);
            if (inputElement && this.get('open')) {
                inputElement.focus();
                if (!ignoreAutoSelect && this.get('autoSelect')) {
                    inputElement.select();
                }
            } else if (!this.get('isDestroying')) {
                inputElement.blur();
            }
        },

        getValueAttribute: function getValueAttribute(value) {
            var valueAttribute = this.get('valueAttribute');
            if (value && valueAttribute) {
                value = value.get ? value.get(valueAttribute) : value[valueAttribute];
            }
            return value;
        },

        updateViewValue: function updateViewValue() {
            var _this = this;

            var query = this.get('query');
            var items = [];
            this.trigger('getMenuItems', items);

            if (this.orderItemsForSearch) {
                items = this.orderItemsForSearch(items);
            }

            var currentValue = this.getValueAttribute(this.get('viewValue'));
            if (currentValue !== query) {
                var item = items.find(function (item) {
                    return _this.getValueAttribute(item.get('value')) === query;
                });
                if (!item && !currentValue.startsWith(query)) {
                    item = items.find(function (item) {
                        return _this.getValueAttribute(item.get('value')).startsWith(query);
                    });
                }
                if (item) {
                    this.set('viewValue', item.get('value'));
                }
            }
        },

        actions: {
            restoreFocus: function restoreFocus() {
                if (this.get('open')) {
                    _ember['default'].run.next(this, this.setInputFocus, /* ignoreAutoSelect = */true);
                }
            }
        }
    });
});
define('portia-ui/components/create-project-button', ['exports', 'ember'], function (exports, _ember) {
    var computed = _ember['default'].computed;
    var service = _ember['default'].inject.service;
    exports['default'] = _ember['default'].Component.extend({
        dispatcher: service(),
        capabilities: service(),
        tagName: '',

        canCreateProjects: computed.readOnly('capabilities.capabilities.create_projects'),
        projectName: null,

        actions: {
            addProject: function addProject() {
                this.get('dispatcher').addProject(this.get('projectName'), /* redirect = */true);
            }
        }
    });
});
define('portia-ui/components/create-spider-button', ['exports', 'ember', 'portia-ui/services/dispatcher'], function (exports, _ember, _portiaUiServicesDispatcher) {
    exports['default'] = _ember['default'].Component.extend({
        browser: _ember['default'].inject.service(),
        dispatcher: _ember['default'].inject.service(),

        tagName: '',

        project: null,

        canAddSpider: (0, _portiaUiServicesDispatcher.computedCanAddSpider)(),

        actions: {
            addSpider: function addSpider() {
                this.get('dispatcher').addSpider(this.get('project'), /* redirect = */true);
            }
        }
    });
});
define('portia-ui/components/currency-list', ['exports', 'ember', 'portia-ui/mixins/save-spider-mixin'], function (exports, _ember, _portiaUiMixinsSaveSpiderMixin) {
    exports['default'] = _ember['default'].Component.extend(_portiaUiMixinsSaveSpiderMixin['default'], {
        tagName: '',

        spider: null,

        currencyCodeOptions: [{
            value: 'EGP',
            label: 'Egyptian Pound'
        }, {
            value: 'SAR',
            label: "Saudi Riyal"
        }, {
            value: 'AED',
            label: "United Arab Emirates Dirham"
        }, {
            value: 'KES',
            label: "Kenyan Shilling"
        }, {
            value: 'NGN',
            label: "Nigerian naira"
        }, {
            value: 'USD',
            label: "US Dollar"
        }],

        currencyCode: _ember['default'].computed('spider.currencyCode', {
            get: function get() {
                return this.currencyCodeOptions.findBy('value', this.get('spider.currencyCode'));
            },

            set: function set(key, value) {
                this.set('spider.currencyCode', value.value);
                return value;
            }
        }),

        actions: {
            saveSpider: function saveSpider() {
                this.saveSpider();
            }
        }
    });
});
define('portia-ui/components/currency-options', ['exports', 'ember', 'portia-ui/mixins/save-spider-mixin'], function (exports, _ember, _portiaUiMixinsSaveSpiderMixin) {
    exports['default'] = _ember['default'].Component.extend(_portiaUiMixinsSaveSpiderMixin['default'], {

        api: _ember['default'].inject.service(),
        notificationManager: _ember['default'].inject.service(),
        browser: _ember['default'].inject.service(),

        spider: null,

        generateTable: function generateTable(cookiesList) {

            var cookies = JSON.parse(cookiesList);

            var table = document.createElement("TABLE");
            table.border = "1";

            for (var key in cookies) {
                if (cookies.hasOwnProperty(key)) {
                    var cookie = cookies[key];
                    for (var prop in cookie) {
                        if (cookie.hasOwnProperty(prop)) {
                            var row = table.insertRow(-1);
                            var cell1 = row.insertCell(-1);
                            cell1.innerHTML = prop;
                            var cell2 = row.insertCell(-1);
                            cell2.innerHTML = cookie[prop];
                        }
                    }
                }
            }
            var dvTables = this.$('#dvTable');
            var i;
            for (i = 0; i < dvTables.length; i++) {
                dvTables[i].innerHTML = "";
                dvTables[i].appendChild(table.cloneNode(true));
            }
        },

        actions: {
            save: function save() {
                this.saveSpider();
            },

            detectCookies: function detectCookies(spider) {
                var _this = this;

                var currentUrl = this.get('browser.url');
                this.get('api').post('cookies', {
                    model: spider,
                    jsonData: { 'current_url': currentUrl }
                }).then(function (cookies) {
                    _this.get('notificationManager').showNotification('Detecting Cookies .. Please wait');
                    _this.generateTable(cookies);
                }, function (data) {
                    var error = data.errors[0];
                    if (error.status > 499) {
                        throw data;
                    }
                    _this.get('notificationManager').showNotification(error.title, error.detail);
                });
            }

        }
    });
});
define('portia-ui/components/data-structure-annotations', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        dispatcher: _ember['default'].inject.service(),
        uiState: _ember['default'].inject.service(),

        tagName: '',

        item: null,
        sample: null,
        annotationColors: [],

        actions: {
            enterAnnotation: function enterAnnotation(annotation) {
                this.set('uiState.viewPort.hoveredModels', [annotation]);
            },

            leaveAnnotation: function leaveAnnotation() {
                this.set('uiState.viewPort.hoveredModels', []);
            },

            enterItem: function enterItem(item) {
                this.set('uiState.viewPort.hoveredModels', item.get('orderedAnnotations'));
            },

            leaveItem: function leaveItem() {
                this.set('uiState.viewPort.hoveredModels', []);
            },

            removeAnnotation: function removeAnnotation(annotation) {
                this.get('dispatcher').removeAnnotation(annotation);
            },

            removeItem: function removeItem(item) {
                this.get('dispatcher').removeItem(item);
            },

            saveItem: function saveItem(item) {
                item.save();
            }
        }
    });
});
define('portia-ui/components/data-structure-listing', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        dispatcher: _ember['default'].inject.service(),

        tagName: '',

        annotationColors: [],

        actions: {
            addItem: function addItem(sample) {
                this.get('dispatcher').addItem(sample, /* redirect = */true);
            },

            removeItem: function removeItem(item) {
                this.get('dispatcher').removeItem(item);
            }
        }
    });
});
define('portia-ui/components/do-train-button', ['exports', 'ember'], function (exports, _ember) {
    var computed = _ember['default'].computed;
    exports['default'] = _ember['default'].Component.extend({
        api: _ember['default'].inject.service(),
        notificationManager: _ember['default'].inject.service(),
        hasSpider: computed.bool('spider'),

        actions: {
            trainSpider: function trainSpider(spider) {
                var _this = this;

                if (this.get('spider.countryCode') && this.get('spider.username')) {
                    this.get('notificationManager').showNotification('Please wait');
                    this.get('api').post('train', {
                        model: spider,
                        jsonData: { data: { type: 'spiders', id: spider.id, username: spider.username } }
                    }).then(function () {
                        _this.get('notificationManager').showNotification('Your spider has been trained successfully');
                    }, function (data) {
                        var error = data.errors[0];
                        if (error.status > 499) {
                            throw data;
                        }
                        _this.get('notificationManager').showNotification(error.title, error.detail);
                    });
                } else {
                    var errorTitle = "Your spider can not be trained!";
                    var errorMessage = "CHECK if the spider has a country and specify your username below";
                    this.get('notificationManager').showNotification(errorTitle, errorMessage);
                }
            }
        }
    });
});
define('portia-ui/components/dropdown-divider', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: 'li',
        classNames: ['divider'],
        attributeBindings: ['role'],
        role: 'separator'
    });
});
define('portia-ui/components/dropdown-header', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: 'li',
        classNames: ['dropdown-header']
    });
});
define('portia-ui/components/dropdown-item', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: 'li',
        classNames: ['dropdown-item'],
        classNameBindings: ['active', 'focused', 'disabled'],

        disabled: false,
        menu: null,
        value: null,

        active: _ember['default'].computed('menu.activeItem', function () {
            return this.get('menu.activeItem') === this;
        }),
        focused: _ember['default'].computed('menu.focusedItem', function () {
            return this.get('menu.focusedItem') === this;
        }),

        didInsertElement: function didInsertElement() {
            var menu = this.get('menu');
            if (menu) {
                menu.registerItem(this);
            }
        },

        willDestroyElement: function willDestroyElement() {
            var menu = this.get('menu');
            if (menu) {
                menu.unRegisterItem(this);
            }
        },

        actions: {
            performAction: function performAction(value) {
                if (this.attrs.action && !this.get('disabled')) {
                    this.attrs.action(value);
                }
            }
        }
    });
});
define('portia-ui/components/dropdown-menu', ['exports', 'ember'], function (exports, _ember) {
    var _slice = Array.prototype.slice;

    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    function computedItem(propertyName) {
        var cachePropertyName = '_' + propertyName + 'ItemCache';

        return _ember['default'].computed(propertyName, 'items', {
            get: function get() {
                var _this = this;

                var cachedItem = this[cachePropertyName];
                var value = this.get(propertyName);
                var items = this.get('items');
                if (!cachedItem || !items.includes(cachedItem) || cachedItem.get('value') !== value) {
                    (function () {
                        if (_this.orderItemsForSearch) {
                            items = _this.orderItemsForSearch(items);
                        }
                        var equalityFn = _this.valuesEqual || _ember['default'].isEqual;
                        _this[cachePropertyName] = cachedItem = items.find(function (item) {
                            return equalityFn(item.get('value'), value);
                        });
                    })();
                }
                return cachedItem;
            },

            set: function set(key, item) {
                this[cachePropertyName] = item;
                this.set(propertyName, item.get('value'));
                return item;
            }
        });
    }

    exports['default'] = _ember['default'].Component.extend({
        tagName: 'ul',
        attributeBindings: ['tabindex'],
        classNames: ['dropdown-menu'],

        active: null,
        focused: null,
        keyNavigate: 'active',
        tabindex: -1,

        items: _ember['default'].computed(function () {
            if (!this.element) {
                return [];
            }
            var items = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.element.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var child = _step.value;

                    var item = this.itemsMap.get(child.id);
                    if (item) {
                        items.push(item);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return items;
        }).volatile(),

        activeItem: computedItem('active'),
        focusedItem: computedItem('focused'),

        init: function init() {
            var _this2 = this;

            this._super();
            this.itemsMap = new Map();
            this.getWithDefault('events', this).on('menuKeyDown', this, this.keyDown).on('getMenuItems', function (result) {
                result.push.apply(result, _toConsumableArray(_this2.get('items')));
            });
        },

        next: function next(type) {
            type = this.validateType(type);
            var items = this.get('items');
            var item = this.get(type + 'Item');
            var startIndex = items.indexOf(item);
            var index = startIndex;
            do {
                if (! ~index) {
                    index = 0;
                } else {
                    index++;
                }
                index = (index + items.length) % items.length;
                item = items[index];
            } while (item.get('disabled') && index !== startIndex);
            if (index !== startIndex) {
                this.set(type + 'Item', item);
            }
        },

        previous: function previous(type) {
            type = this.validateType(type);
            var items = this.get('items');
            var item = this.get(type + 'Item');
            var startIndex = items.indexOf(item);
            var index = startIndex;
            do {
                if (! ~index) {
                    index = -1;
                } else {
                    index--;
                }
                index = (index + items.length) % items.length;
                item = items[index];
            } while (item.get('disabled') && index !== startIndex);
            if (index !== startIndex) {
                this.set(type + 'Item', item);
            }
        },

        triggerAction: function triggerAction(type) {
            type = this.validateType(type);
            var currentItem = this.get(type + 'Item');
            if (currentItem) {
                currentItem.send('performAction');
            }
            return !!currentItem;
        },

        validateType: function validateType(type, fallback) {
            if (!fallback) {
                fallback = this.validateType(this.get('keyNavigate'), 'active');
            }
            return type === 'active' || type === 'focused' ? type : fallback;
        },

        focusIn: function focusIn() {
            if (this.attrs.onFocusIn) {
                var _attrs;

                (_attrs = this.attrs).onFocusIn.apply(_attrs, arguments);
            }
        },

        focusOut: function focusOut() {
            if (this.attrs.onFocusOut) {
                var _attrs2;

                (_attrs2 = this.attrs).onFocusOut.apply(_attrs2, arguments);
            }
        },

        keyDown: function keyDown() {
            this.send.apply(this, ['keyDown'].concat(_slice.call(arguments)));
        },

        registerItem: function registerItem(item) {
            this.itemsMap.set(item.get('elementId'), item);
            _ember['default'].run.scheduleOnce('afterRender', this, this.updateItems);
        },

        unRegisterItem: function unRegisterItem(item) {
            this.itemsMap['delete'](item.get('elementId'));
            _ember['default'].run.scheduleOnce('afterRender', this, this.updateItems);
        },

        updateItems: function updateItems() {
            if (!this.get('isDestroying')) {
                this.notifyPropertyChange('items');
            }
        },

        orderItemsForSearch: function orderItemsForSearch(items) {
            return items;
        },

        valuesEqual: function valuesEqual(a, b) {
            return _ember['default'].isEqual(a, b);
        },

        actions: {
            keyDown: function keyDown($event) {
                var keyNavigate = this.get('keyNavigate');
                switch ($event.keyCode) {
                    case 13:
                        // ENTER
                        if (!this.triggerAction(keyNavigate)) {
                            return;
                        }
                        break;
                    case 38:
                        // UP
                        this.previous(keyNavigate);
                        break;
                    case 40:
                        // DOWN
                        this.next(keyNavigate);
                        break;
                    default:
                        return;
                }

                $event.preventDefault();
                $event.stopPropagation();
            }
        }
    });
});
define('portia-ui/components/dropdown-widget', ['exports', 'ember'], function (exports, _ember) {
    var _slice = Array.prototype.slice;
    exports['default'] = _ember['default'].Component.extend({
        positionMonitor: _ember['default'].inject.service(),

        classNames: ['dropdown'],
        classNameBindings: ['open'],

        active: null,
        events: null,
        focused: null,
        focusMenu: false,
        keyNavigate: 'active',
        menuAlign: 'left',
        menuClass: null,
        menuContainer: null,
        open: false,
        isDisabled: false,

        alignRight: _ember['default'].computed.equal('menuAlign', 'right'),
        menuClasses: _ember['default'].computed('menuClass', 'menuContainer', 'open', 'alignRight', function () {
            var classes = [this.get('menuClass')];
            if (this.get('menuContainer')) {
                classes.push('dropdown-menu-floating');
                if (this.get('open')) {
                    classes.push('open');
                }
            }
            if (this.get('alignRight')) {
                classes.push('pull-right');
            }
            return classes.join(' ');
        }),

        init: function init() {
            this._super();
            if (!this.get('events')) {
                this.set('events', this);
            }
            this.$menu = null;
            this.elementFocused = false;
            this.menuWidth = null;
            this.menuHeight = null;
            this.windowHeight = null;
        },

        didInsertElement: function didInsertElement() {
            var _this = this;

            var container = this.get('menuContainer');
            if (container) {
                (function () {
                    var positionMonitor = _this.get('positionMonitor');
                    var $menu = _this.$menu = _this.$('.dropdown-menu');
                    _ember['default'].run.schedule('afterRender', function () {
                        _ember['default'].$(container).append($menu);
                        positionMonitor.registerElement(_this.element, _this, _this.updateMenuSize, _this.updatePosition);
                        _ember['default'].run.scheduleOnce('afterRender', positionMonitor, positionMonitor.update);
                    });
                })();
            }
        },

        willDestroyElement: function willDestroyElement() {
            var _this2 = this;

            var $menu = this.$menu;
            if ($menu) {
                (function () {
                    var element = _this2.element;
                    _ember['default'].run.schedule('render', function () {
                        _this2.get('positionMonitor').unRegisterElement(element, _this2, _this2.updateMenuSize, _this2.updatePosition);
                        $menu.remove();
                    });
                })();
            }
        },

        focusIn: function focusIn() {
            this.send.apply(this, ['focusIn'].concat(_slice.call(arguments)));
        },

        focusOut: function focusOut() {
            this.send.apply(this, ['focusOut'].concat(_slice.call(arguments)));
        },

        keyDown: function keyDown() {
            this.send.apply(this, ['keyDown'].concat(_slice.call(arguments)));
        },

        updateMenuSize: function updateMenuSize() {
            var $menu = this.$menu;
            this.menuWidth = $menu.outerWidth();
            this.menuHeight = $menu.outerHeight(true);
            this.windowHeight = window.innerHeight;
        },

        updatePosition: function updatePosition(rects, boundingRect) {
            var positionLeft = undefined;
            var positionTop = undefined;
            if (this.get('alignRight')) {
                positionLeft = Math.round(boundingRect.right - this.menuWidth);
            } else {
                positionLeft = Math.round(boundingRect.left);
            }
            if (boundingRect.bottom + this.menuHeight > this.windowHeight) {
                // If it overflows under the screen, align top
                positionTop = Math.round(boundingRect.top - this.menuHeight);
            } else {
                positionTop = Math.round(boundingRect.bottom);
            }
            this.$menu.css({
                top: positionTop + 'px',
                left: positionLeft + 'px',
                right: 'auto'
            });
        },

        click: function click() {
            var action = this.get('onClick');
            if (action) {
                action();
            }
        },

        actions: {
            openMenu: function openMenu() {
                if (!this.get('isDisabled')) {
                    this.set('open', true);
                }
            },

            closeMenu: function closeMenu(closeReason) {
                if (this.attrs.onClose) {
                    this.attrs.onClose(closeReason || 'close');
                }
                this.set('open', false);
            },

            toggleMenu: function toggleMenu(closeReason) {
                if (this.get('open')) {
                    this.send('closeMenu', closeReason || 'toggle');
                } else {
                    this.send('openMenu');
                }
            },

            focusIn: function focusIn() {
                this.elementFocused = true;
            },

            focusOut: function focusOut() {
                var _this3 = this;

                this.elementFocused = null;

                _ember['default'].run.next(function () {
                    if (!_this3.isDestroyed && !_this3.elementFocused) {
                        _this3.send('closeMenu', 'focus-out');
                    }
                });
            },

            keyDown: function keyDown(event) {
                if (this.get('open')) {
                    var _get;

                    if (event.keyCode === 27) {
                        // ESCAPE
                        this.send('closeMenu', 'escape');
                    }
                    (_get = this.get('events')).trigger.apply(_get, ['menuKeyDown'].concat(_slice.call(arguments)));
                }
            }
        }
    });
});
define('portia-ui/components/edit-sample-button', ['exports', 'ember', 'portia-ui/services/dispatcher'], function (exports, _ember, _portiaUiServicesDispatcher) {
    var computed = _ember['default'].computed;
    exports['default'] = _ember['default'].Component.extend({
        browser: _ember['default'].inject.service(),
        dispatcher: _ember['default'].inject.service(),

        tagName: '',

        spider: null,

        canAddSample: (0, _portiaUiServicesDispatcher.computedCanAddSample)('spider'),
        disableSample: computed('canAddSample', 'browser.invalidUrl', function () {
            return !this.get('canAddSample') || this.get('browser.invalidUrl');
        }),
        editableSample: (0, _portiaUiServicesDispatcher.computedEditableSample)('spider'),
        startUrlDomains: _ember['default'].computed('spider.startUrls', function () {
            var startUrlDomains = new Set();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = this.get('spider.startUrls')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var uri = _step.value;

                    var domains = this.getUrlDomain(uri);
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                        for (var _iterator2 = domains[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                            var d = _step2.value;

                            startUrlDomains.add(d);
                        }
                    } catch (err) {
                        _didIteratorError2 = true;
                        _iteratorError2 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                                _iterator2['return']();
                            }
                        } finally {
                            if (_didIteratorError2) {
                                throw _iteratorError2;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return startUrlDomains;
        }),
        sameDomain: _ember['default'].computed('browser.url', 'spider.startUrls', function () {
            var urlDomain = this.getUrlDomain(this.get('browser.url'));
            if (!urlDomain) {
                return true;
            }
            var startUrlDomains = this.get('startUrlDomains');
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = urlDomain[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var d = _step3.value;

                    if (startUrlDomains.has(d)) {
                        return true;
                    }
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                        _iterator3['return']();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            return false;
        }),

        getUrlDomain: function getUrlDomain(uri) {
            var a = document.createElement('a');
            a.href = uri;
            var hostname = [a.hostname],
                splitHostname = hostname[0].split('.');
            if (splitHostname[0].length === 1 || splitHostname[0] === 'www') {
                hostname.push(hostname[0].split('.').splice(1).join('.'));
            }
            return hostname;
        },

        actions: {
            addSample: function addSample() {
                this.get('dispatcher').addSample(this.get('spider'), /* redirect = */true);
            }
        }
    });
});
define('portia-ui/components/element-overlay', ['exports', 'ember', 'portia-ui/utils/attrs'], function (exports, _ember, _portiaUiUtilsAttrs) {
    exports['default'] = _ember['default'].Component.extend({
        overlays: _ember['default'].inject.service(),
        positionMonitor: _ember['default'].inject.service(),

        tagName: '',

        positionMode: 'size', // or 'edges'

        init: function init() {
            this._super.apply(this, arguments);
            this.set('rects', []);
        },

        didInsertElement: function didInsertElement() {
            _ember['default'].run.scheduleOnce('afterRender', this, this.notifyAddOverlay);
        },

        willDestroyElement: function willDestroyElement() {
            _ember['default'].run.scheduleOnce('afterRender', this, this.notifyRemoveOverlay);
        },

        notifyAddOverlay: function notifyAddOverlay() {
            this.get('overlays').add();
        },

        notifyRemoveOverlay: function notifyRemoveOverlay() {
            this.get('overlays').remove();
        },

        didReceiveAttrs: function didReceiveAttrs(_ref) {
            var _this = this;

            var oldAttrs = _ref.oldAttrs;
            var newAttrs = _ref.newAttrs;

            if ((0, _portiaUiUtilsAttrs.attrChanged)(oldAttrs, newAttrs, 'viewPortElement')) {
                (function () {
                    var oldElement = oldAttrs && (0, _portiaUiUtilsAttrs.attrValue)(oldAttrs.viewPortElement);
                    var newElement = (0, _portiaUiUtilsAttrs.attrValue)(newAttrs.viewPortElement);
                    var positionMonitor = _this.get('positionMonitor');
                    if (oldElement) {
                        positionMonitor.unRegisterElement(oldElement, _this, _this.readContainerSize, _this.updatePosition);
                    }
                    if (newElement) {
                        _ember['default'].run.schedule('afterRender', function () {
                            positionMonitor.registerElement(newElement, _this, _this.readContainerSize, _this.updatePosition);
                        });
                    }
                })();
            }
        },

        on: function on(name) {
            var _Ember$run;

            for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                params[_key - 1] = arguments[_key];
            }

            this._super.apply(this, arguments);
            (_Ember$run = _ember['default'].run).scheduleOnce.apply(_Ember$run, ['afterRender'].concat(params, [this.get('rects')]));
        },

        readContainerSize: function readContainerSize(rects, boundingRect, element) {
            var view = element.ownerDocument.defaultView;
            if (view) {
                this.containerSize = {
                    width: view.innerWidth,
                    height: view.innerHeight
                };
            }
        },

        updatePosition: function updatePosition(rects) {
            var _this2 = this;

            var overlayRects = [];
            var prevRect = null;
            var length = this.get('rects').length;

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = Array.from(rects)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var rect = _step.value;

                    var left = Math.round(Math.min(this.containerSize.width, Math.max(0, rect.left)));
                    var right = Math.round(Math.min(this.containerSize.width, Math.max(0, rect.right)));
                    var _top = Math.round(Math.min(this.containerSize.height, Math.max(0, rect.top)));
                    var bottom = Math.round(Math.min(this.containerSize.height, Math.max(0, rect.bottom)));
                    var width = right - left;
                    var height = bottom - _top;

                    if (prevRect && _top === prevRect.top && bottom === prevRect.bottom && (left === prevRect.right || right === prevRect.left)) {
                        // merge neighbouring rects to minimize amount of rendered/animated elements
                        prevRect.left = Math.min(left, prevRect.left);
                        prevRect.right = Math.max(right, prevRect.right);
                        prevRect.width += width;
                    } else {
                        prevRect = {
                            left: left,
                            right: right,
                            top: _top,
                            bottom: bottom,
                            width: width,
                            height: height
                        };
                        overlayRects.push(prevRect);
                    }
                }

                // never shrink the number of elements, so that they can be animated out and are available
                // if needed again.
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            length = Math.max(length, overlayRects.length);
            for (var i = overlayRects.length; i < length; i++) {
                overlayRects.push({});
            }

            _ember['default'].run.next(_ember['default'].run.scheduleOnce, 'sync', function () {
                if (!_this2.isDestroying) {
                    _this2.set('rects', overlayRects);
                }
            });
            this.trigger('element-moved', overlayRects);
        }
    });
});
define('portia-ui/components/element-rect-overlay', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        classNames: ['overlay'],

        index: null,
        positionMode: 'size',

        backgroundStyle: _ember['default'].computed('color.main', function () {
            var color = this.get('color.main');
            return _ember['default'].String.htmlSafe(color ? 'background-color: ' + color + ';' : '');
        }),
        shadowStyle: _ember['default'].computed('color.shadow', function () {
            var color = this.get('color.shadow');
            return _ember['default'].String.htmlSafe(color ? 'box-shadow: 0 1px 3px -2px ' + color + ';' : '');
        }),
        textShadowStyle: _ember['default'].computed('color.shadow', function () {
            var color = this.get('color.shadow');
            return _ember['default'].String.htmlSafe(color ? 'text-shadow: 0 1px 1px ' + color + ';' : '');
        }),

        didInsertElement: function didInsertElement() {
            this['new'] = true;
            this.get('overlay').on('element-moved', this, this.updatePosition);
        },

        willDestroyElement: function willDestroyElement() {
            this.get('overlay').off('element-moved', this, this.updatePosition);
        },

        updatePosition: function updatePosition(rects) {
            if (!this.element) {
                return;
            }

            var index = this.get('index');
            var rect = rects[index];
            if (!rect) {
                return;
            }

            var left = rect.left;
            var top = rect.top;
            var width = rect.width;
            var height = rect.height;

            var hide = false;
            if (this['new'] || !left && !top && !width && !height) {
                hide = true;

                for (; index--;) {
                    var lRect = rects[index];
                    var lLeft = lRect.left;
                    var lRight = lRect.right;
                    var lTop = lRect.top;
                    var lBottom = lRect.bottom;

                    if (lLeft || lRight || lTop || lBottom) {
                        left = lLeft;
                        top = lBottom;
                        height = 0;
                        width = 0;
                        break;
                    }
                }

                if (this['new']) {
                    delete this['new'];
                    _ember['default'].run.next(_ember['default'].run.scheduleOnce, 'afterRender', this, this.updatePosition, rects);
                }
            }

            if (!left && !top && !width && !height) {
                return;
            }

            var style = '';

            switch (this.get('positionMode')) {
                case 'size':
                    style = 'transform: translate(' + left + 'px, ' + top + 'px);\n                         width: ' + width + 'px; height: ' + height + 'px;';
                    break;

                case 'edges':
                    // container is positioned in top left, and has zero width and height
                    var right = -left + -width;
                    var bottom = -top + -height;
                    style = 'left: ' + left + 'px; right: ' + right + 'px; top: ' + top + 'px; bottom: ' + bottom + 'px;';
                    break;
            }

            if (hide) {
                style = 'opacity: 0; ' + style;
            }
            this.element.setAttribute('style', style);
        }
    });
});
define('portia-ui/components/ember-modal-dialog-positioned-container', ['exports', 'ember-modal-dialog/components/positioned-container'], function (exports, _emberModalDialogComponentsPositionedContainer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberModalDialogComponentsPositionedContainer['default'];
    }
  });
});
define('portia-ui/components/ember-tether', ['exports', 'ember-tether/components/ember-tether'], function (exports, _emberTetherComponentsEmberTether) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberTetherComponentsEmberTether['default'];
    }
  });
});
define('portia-ui/components/ember-wormhole', ['exports', 'ember-wormhole/components/ember-wormhole'], function (exports, _emberWormholeComponentsEmberWormhole) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberWormholeComponentsEmberWormhole['default'];
    }
  });
});
define('portia-ui/components/extracted-item-table', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: 'table',
        classNames: ['extracted-item-table']
    });
});
define('portia-ui/components/extracted-items-group', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: ''
    });
});
define('portia-ui/components/extracted-items-json-panel', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        extractedItems: _ember['default'].inject.service(),

        tagName: ''
    });
});
define('portia-ui/components/extracted-items-json-value', ['exports', 'ember', 'portia-ui/utils/types'], function (exports, _ember, _portiaUiUtilsTypes) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: 'span',
        classNames: ['json-value'],
        attributeBindings: ['style'],
        depth: 0,

        isString: _ember['default'].computed('value', function () {
            return (0, _portiaUiUtilsTypes.toType)(this.get('value')) === 'string';
        }),

        escapedValue: _ember['default'].computed('value', function () {
            return JSON.stringify(this.get('value'));
        }),

        depthSpaces: _ember['default'].computed('depth', function () {
            return '  '.repeat(this.get('depth'));
        }),

        fromArray: _ember['default'].computed('from', function () {
            return this.get('from') === 'array';
        }),

        comma: _ember['default'].computed('position', function () {
            return this.get('position') < this.get('maxPosition') - 1 ? ',' : '';
        }),

        style: _ember['default'].computed('value', 'depth', 'key', 'from', function () {
            var textIndent = '',
                margin = '',
                width = '',
                characterTest = _ember['default'].$('.json-character-size'),
                textWidth = characterTest.width(),
                extractedBox = _ember['default'].$('.extracted-items-json'),
                extractedBoxWidth = extractedBox.width(),
                key = this.get('key') || '',
                value = this.get('escapedValue'),
                depth = this.get('depth');
            if (this.get('isString') && ((depth + 1) * 2 + key.length + value.length + 4) * textWidth > extractedBoxWidth) {
                var indent = key.length;
                if (this.get('fromArray')) {
                    indent = 2 * (depth + 1);
                    textIndent = 'text-indent: -' + indent + 'ch;';
                    margin = 'margin: 0 0 0 ' + indent + 'ch;';
                    width = extractedBoxWidth;
                } else {
                    textIndent = 'text-indent: -1ch;';
                    margin = 'margin: 0 0 0 1ch;';
                    width = extractedBoxWidth - (key.length + 4 + (depth + 1) * 2) * textWidth;
                    width = 'width: ' + width + 'px';
                }
            }
            return _ember['default'].String.htmlSafe('' + textIndent + margin + width);
        })
    });
});
define('portia-ui/components/extracted-items-json', ['exports', 'ember', 'portia-ui/utils/types'], function (exports, _ember, _portiaUiUtilsTypes) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',
        position: 0,
        depth: -1,

        setDepth: (function () {
            this.set('depth', this.getWithDefault('depth', -1) + 1);
        }).on('init'),

        isObject: _ember['default'].computed('json', function () {
            return this._isObject(this.get('json'));
        }),

        isArray: _ember['default'].computed('json', function () {
            return this._isArray(this.get('json'));
        }),

        isObjectOrArray: _ember['default'].computed('isArray', 'isObject', function () {
            return this.get('isObject') || this.get('isArray');
        }),

        fromKey: _ember['default'].computed('from', function () {
            return this.get('from') === 'key';
        }),

        comma: _ember['default'].computed('position', 'parent', function () {
            return this.get('position') < this.get('maxPosition') - 1 ? ',' : '';
        }),

        depthSpaces: _ember['default'].computed('depth', 'isObjectOrArray', 'length', function () {
            if (this.get('isObjectOrArray') && !this.get('length')) {
                return '';
            }
            return '  '.repeat(this.get('depth'));
        }),

        depthPlus1Spaces: _ember['default'].computed('depth', function () {
            return '  '.repeat(this.get('depth') + 1);
        }),

        openingCharacter: _ember['default'].computed('isObjectOrArray', function () {
            if (this.get('isArray')) {
                return '[';
            } else if (this.get('isObject')) {
                return '{';
            }
        }),

        closingCharacter: _ember['default'].computed('isObjectOrArray', function () {
            if (this.get('isArray')) {
                return ']';
            } else if (this.get('isObject')) {
                return '}';
            }
        }),

        maxPosition: _ember['default'].computed('json', function () {
            var parent = this.get('parent');
            if (parent) {
                return this._objLength(parent);
            }
            return -1;
        }),

        length: _ember['default'].computed('json', function () {
            return this._objLength(this.get('json'));
        }),

        openChild: _ember['default'].computed('json', function () {
            var child,
                json = this.get('json');
            if (this.get('isObject')) {
                child = json[Object.keys(json)[0]];
            } else if (this.get('isArray')) {
                child = json.get(0);
            }
            if (child) {
                return this._openNext(child);
            }
        }),

        openSibling: _ember['default'].computed('json', 'parent', 'position', function () {
            var sibling,
                parent = this.get('parent'),
                position = this.get('position');
            if (parent && position < parent.length - 1) {
                if (this._isObject(parent)) {
                    sibling = parent[Object.keys(parent)[position + 1]];
                } else if (this._isArray(parent)) {
                    sibling = parent.get(position + 1);
                }
                if (sibling) {
                    return this._openNext(sibling);
                }
            }
        }),

        showOpen: _ember['default'].computed('json', function () {
            if (this.get('isObject') && this.get('from') !== 'array' || this.get('isArray') && this.get('from') !== 'object') {
                return true;
            }
            return false;
        }),

        _openNext: function _openNext(next) {
            if (this._isObject(next)) {
                return '{';
            } else if (this._isArray(next)) {
                return '[';
            }
        },

        _isObject: function _isObject(obj) {
            return (0, _portiaUiUtilsTypes.toType)(obj) === 'object';
        },

        _isArray: function _isArray(obj) {
            return Array.isArray(obj);
        },

        _objLength: function _objLength(obj) {
            if (this._isObject(obj)) {
                return Object.keys(obj).length;
            } else if (this._isArray(obj)) {
                return obj.length;
            }
        }
    });
});
define('portia-ui/components/extracted-items-panel', ['exports', 'ember'], function (exports, _ember) {
    var service = _ember['default'].inject.service;
    var computed = _ember['default'].computed;
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        extractedItems: service(),

        isExtracting: computed.readOnly('extractedItems.isExtracting'),
        failedMsg: computed.readOnly('extractedItems.failedExtractionMsg'),
        failedExtraction: computed.readOnly('extractedItems.failedExtraction')
    });
});
define('portia-ui/components/extracted-items-status', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',
        extractedItems: _ember['default'].inject.service(),

        type: _ember['default'].computed.readOnly('extractedItems.type'),
        changes: _ember['default'].computed('extractedItems.changes', function () {
            return this.get('extractedItems.changes') || [];
        }),

        hasChanges: _ember['default'].computed.gt('changes.length', 0),

        hasWarning: _ember['default'].computed('type', 'changes', 'changes.length', function () {
            var hasChanges = this.get('hasChanges');
            if (this.get('type') === 'js') {
                if (hasChanges && this.get('changes')[0] === 'no_items') {
                    return false;
                } else {
                    return true;
                }
            }
            return hasChanges;
        }),

        icon: _ember['default'].computed('hasWarning', function () {
            return this.get('hasWarning') ? 'warning-triangle' : 'ok';
        })
    });
});
define('portia-ui/components/extracted-items-tab', ['exports', 'ember'], function (exports, _ember) {
    var service = _ember['default'].inject.service;
    var computed = _ember['default'].computed;
    exports['default'] = _ember['default'].Component.extend({
        extractedItems: service(),

        numItems: computed.readOnly('extractedItems.items.length'),
        isExtracting: computed.alias('extractedItems.isExtracting')
    });
});
define('portia-ui/components/extractor-options', ['exports', 'ember', 'portia-ui/models/field'], function (exports, _ember, _portiaUiModelsField) {
    exports['default'] = _ember['default'].Component.extend({
        dispatcher: _ember['default'].inject.service(),

        tagName: '',

        annotation: null,
        types: _portiaUiModelsField.FIELD_TYPES,

        project: _ember['default'].computed.readOnly('annotation.sample.spider.project'),
        regexExtractors: _ember['default'].computed.filterBy('project.extractors', 'type', 'regex'),

        actions: {
            save: function save() {
                this.get('annotation').save();
            },

            addTypeExtractor: function addTypeExtractor(type) {
                var annotation = this.get('annotation');
                this.get('dispatcher').addAnnotationTypeExtractor(annotation, type);
            },

            addRegexExtractor: function addRegexExtractor(extractor) {
                var annotation = this.get('annotation');
                this.get('dispatcher').addAnnotationRegexExtractor(annotation, extractor);
            },

            addNewRegexExtractor: function addNewRegexExtractor() {
                var annotation = this.get('annotation');
                this.get('dispatcher').addNewAnnotationRegexExtractor(annotation);
            },

            removeExtractor: function removeExtractor(extractor) {
                var annotation = this.get('annotation');
                this.get('dispatcher').removeAnnotationExtractor(annotation, extractor);
            },

            saveExtractor: function saveExtractor(extractor) {
                extractor.save().then(null, function () {
                    extractor.rollbackAttributes();
                });
            }
        }
    });
});
define('portia-ui/components/feed-url-options', ['exports', 'ember', 'portia-ui/utils/utils'], function (exports, _ember, _portiaUiUtilsUtils) {
    exports['default'] = _ember['default'].Component.extend({
        feedLink: 'http://files.scrapinghub.com/portia/urls.txt',

        didRender: function didRender() {
            this._super.apply(this, arguments);
            this.$('.focus-control').focus();
        },

        actions: {
            saveFeedUrl: function saveFeedUrl() {
                var url = (0, _portiaUiUtilsUtils.cleanUrl)(this.get('startUrl.url'));
                this.set('startUrl.url', url);
                this.get('saveSpider').perform();
            }
        }

    });
});
define('portia-ui/components/field-options', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        field: null,

        actions: {
            save: function save() {
                this.get('field').save();
            }
        }
    });
});
define('portia-ui/components/fragment-options', ['exports', 'ember', 'ember-concurrency', 'ember-changeset', 'ember-changeset-validations', 'portia-ui/utils/start-urls', 'portia-ui/validations/fixed-fragment', 'portia-ui/validations/range-fragment', 'portia-ui/validations/list-fragment'], function (exports, _ember, _emberConcurrency, _emberChangeset, _emberChangesetValidations, _portiaUiUtilsStartUrls, _portiaUiValidationsFixedFragment, _portiaUiValidationsRangeFragment, _portiaUiValidationsListFragment) {
    var computed = _ember['default'].computed;
    var run = _ember['default'].run;

    var TOOLTIP_DEBOUNCE = 1000;
    var TOOLTIP_DELAY = 2000;

    var VALIDATIONS = {
        'fixed': _portiaUiValidationsFixedFragment['default'],
        'range': _portiaUiValidationsRangeFragment['default'],
        'list': _portiaUiValidationsListFragment['default']
    };

    exports['default'] = _ember['default'].Component.extend({
        tagName: 'form',
        classNames: ['fragment-form', 'form-inline'],

        toggleTooltip: false,
        fragmentTypes: [{ value: 'fixed', label: 'Fixed' }, { value: 'range', label: 'Range' }, { value: 'list', label: 'List' }],

        fragmentType: computed('fragment.type', {
            get: function get() {
                return this.get('fragmentTypes').findBy('value', this.get('fragment.type'));
            },
            set: function set(key, value) {
                this.changeFragmentType(value);
                this.focusFragment();

                return value;
            }
        }),

        changeset: computed('fragment.type', function () {
            var validations = VALIDATIONS[this.get('fragment.type')];
            return new _emberChangeset['default'](this.get('fragment'), (0, _emberChangesetValidations['default'])(validations), validations);
        }),

        isList: computed.equal('fragment.type', 'list'),
        isRange: computed.equal('fragment.type', 'range'),

        listPlaceholder: computed('isList', function () {
            return this.get('isList') ? 'val1 val2 val3' : '';
        }),

        multiplicity: computed('fragmentType', 'fragment.value', function () {
            return (0, _portiaUiUtilsStartUrls.multiplicityFragment)(this.get('fragment'));
        }),

        limits: function limits() {
            var limits = this.get('changeset.value').split('-');
            return limits.length !== 2 ? ['', ''] : limits;
        },
        lower: computed('isRange', 'changeset.value', {
            get: function get() {
                return this.limits()[0];
            },
            set: function set(key, value) {
                this.updateLimit(value, 0);
                return value;
            }
        }),
        higher: computed('isRange', 'changeset.value', {
            get: function get() {
                return this.limits()[1];
            },
            set: function set(key, value) {
                this.updateLimit(value, 1);
                return value;
            }
        }),

        // helpers
        updateFragment: function updateFragment() {
            this.saveChangeset();
            this.set('toggleTooltip', false);
            this.get('flashTooltip').perform();
            this.set('fragment.valid', this.get('changeset.isValid'));
        },

        updateLimit: function updateLimit(value, index) {
            var limits = this.limits();
            limits[index] = value;

            var changeset = this.get('changeset');
            changeset.set('value', limits.join('-'));

            this.updateFragment();
        },

        changeFragmentType: function changeFragmentType(value) {
            this.set('fragment.value', '');
            this.set('fragment.valid', true);
            this.set('fragment.type', value.value);
        },

        focusFragment: function focusFragment() {
            var _this = this;

            run.scheduleOnce('afterRender', this.context, function () {
                _this.$('.focus-control').focus();
            });
        },

        saveChangeset: function saveChangeset() {
            var changeset = this.get('changeset');

            if (changeset.get('value') === '') {
                changeset.set('value', '');
            }

            if (changeset.get('isValid')) {
                changeset.save();
            }
        },

        flashTooltip: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.next = 2;
                        return (0, _emberConcurrency.timeout)(TOOLTIP_DEBOUNCE);

                    case 2:
                        if (!this.get('changeset.isInvalid')) {
                            context$1$0.next = 7;
                            break;
                        }

                        this.set('toggleTooltip', true);
                        context$1$0.next = 6;
                        return (0, _emberConcurrency.timeout)(TOOLTIP_DELAY);

                    case 6:
                        this.set('toggleTooltip', false);

                    case 7:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this);
        })).restartable(),

        actions: {
            saveFragment: function saveFragment() {
                this.updateFragment();

                if (this.get('changeset.isValid') && this.get('allValidFragments')) {
                    this.get('saveSpider').perform();
                }
            },

            updateValue: function updateValue() {
                this.updateFragment();
            },

            changeFragmentType: function changeFragmentType() {
                this.get('saveSpider').cancelAll();
            }
        }
    });
});
define('portia-ui/components/generated-url-options', ['exports', 'ember', 'portia-ui/utils/colors', 'portia-ui/utils/start-urls'], function (exports, _ember, _portiaUiUtilsColors, _portiaUiUtilsStartUrls) {
    var computed = _ember['default'].computed;
    exports['default'] = _ember['default'].Component.extend({
        dispatcher: _ember['default'].inject.service(),

        rawColors: computed.mapBy('fragmentColors', 'main'),
        fragments: computed.alias('startUrl.fragments'),

        allValidFragments: computed('fragments.@each.valid', function () {
            return this.get('fragments').reduce(function (a, b) {
                return (a.valid === undefined || a.valid) && (b.valid === undefined || b.valid);
            });
        }),
        generatedUrlLists: computed('fragments.@each.type', 'fragments.@each.value', function () {
            return this.get('startUrl').generateList();
        }),

        fragmentColors: computed('fragments.[]', function () {
            return (0, _portiaUiUtilsColors.getColors)(this.get('fragments.length'));
        }),
        isComplete: computed('generatedUrlLists', '_fragmentCount', function () {
            return this.get('generatedUrlLists.length') === this.get('_fragmentCount');
        }),

        actions: {
            addFragment: function addFragment() {
                this.get('dispatcher').addFragment(this.get('startUrl'));
                this.get('saveSpider').perform();
            },

            removeFragment: function removeFragment(fragment) {
                this.get('dispatcher').removeFragment(this.get('startUrl'), fragment);
                this.get('saveSpider').perform();
            }
        },

        _fragmentCount: computed('fragments.@each.type', 'fragments.@each.value', function () {
            return this.get('fragments').map(_portiaUiUtilsStartUrls.multiplicityFragment).reduce(function (a, b) {
                return a * b;
            });
        })
    });
});
define('portia-ui/components/help-icon', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        tooltipClasses: null,
        tooltipContainer: 'body',
        placement: 'right',
        icon: 'help',
        classes: 'help-icon'
    });
});
define('portia-ui/components/icon-button', ['exports', 'ember'], function (exports, _ember) {
    var ICON_CLASSES = {
        add: 'structure-list-add fa fa-plus-circle',
        'add-dropdown': 'structure-list-add fa fa-play-circle fa-rotate-90',
        close: 'fa fa-times',
        'data-annotation': 'fa fa-hand-pointer-o',
        date: 'fa fa-calendar',
        publish: 'structure-list-publish fa fa-cloud-upload',
        edit: 'fa fa-pencil',
        error: 'structure-list-error fa fa-exclamation-circle',
        'error-triangle': 'structure-list-error fa fa-exclamation-triangle',
        file: 'fa fa-file',
        geopoint: 'fa fa-map-marker',
        help: 'icon-button-help fa fa-question-circle',
        image: 'fa fa-picture-o',
        link: 'fa fa-link',
        list: 'fa fa-list',
        navigation: 'fa fa-eye',
        number: 'portia-icon portia-icon-number',
        options: 'structure-list-details fa fa-cog',
        ok: 'structure-list-publish fa fa-check-circle',
        play: 'structure-list-play fa fa-play-circle',
        price: 'fa fa-dollar',
        project: 'fa fa-folder',
        'raw html': 'fa fa-code',
        'regular expression': 'portia-icon portia-icon-regex',
        remove: 'structure-list-remove fa fa-minus-circle',
        rollback: 'structure-list-discard fa fa-history',
        'safe html': 'portia-icon portia-icon-safe-html',
        sample: 'fa fa-file',
        schema: 'fa fa-database',
        spider: 'portia-icon portia-icon-spider',
        structure: 'fa fa-sitemap',
        text: 'portia-icon portia-icon-text',
        'tool-css': 'fa fa-file-code-o',
        'tool-magic': 'fa fa-magic fa-flip-horizontal',
        'tool-select': 'fa fa-mouse-pointer',
        'tool-add': 'fa fa-plus',
        'tool-remove': 'fa fa-minus',
        'tool-multiple': 'fa fa-th-large',
        url: 'fa fa-globe',
        'url-generated': 'portia-icon portia-icon-generated-url',
        'url-feed': 'portia-icon portia-icon-feed-url',
        'vertical-ellipsis': 'fa fa-ellipsis-v',
        'warning-triangle': 'structure-list-warning fa fa-exclamation-triangle'
    };

    exports.ICON_CLASSES = ICON_CLASSES;
    exports['default'] = _ember['default'].Component.extend({
        attributeBindings: ['tabindex'],
        classNames: ['icon-button'],
        classNameBindings: ['iconClasses', 'disabled', 'hasAction', 'modifyClasses'],
        tagName: 'i',

        bubbles: true,
        disabled: false,
        modifyClasses: '',

        hasAction: _ember['default'].computed.bool('action'),

        click: function click() {
            if (this.attrs.action && !this.get('disabled')) {
                this.attrs.action();
                if (!this.get('bubbles')) {
                    return false;
                }
            }
        },

        iconClasses: _ember['default'].computed('icon', function () {
            var icon = this.get('icon');
            return ICON_CLASSES[icon] || 'fa';
        })
    });
});
define('portia-ui/components/indentation-spacer', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['indentation-spacer'],
    classNameBindings: ['isSmall'],
    isSmall: false
  });
});
define('portia-ui/components/input-with-clear', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        classNames: ['input-group', 'input-with-clear'],

        type: 'text',
        value: '',

        actions: {
            clear: function clear() {
                this.set('value', '');
                this.get('clear')();
            },

            keyUp: function keyUp() {
                this.update(this.get('value'));
            }
        }
    });
});
define('portia-ui/components/inspector-panel', ['exports', 'ember', 'portia-ui/utils/selectors'], function (exports, _ember, _portiaUiUtilsSelectors) {
    exports.getAttributeList = getAttributeList;
    exports.getDefaultAttribute = getDefaultAttribute;
    var IGNORED_ATTRIBUTES = new Set(['id', 'class', 'target', 'width', 'style', 'height', 'cellpadding', 'cellspacing', 'border', 'bgcolor', 'color', 'colspan', 'data-scrapy-annotate', 'data-tagid', 'data-genid', 'data-parentid']);

    exports.IGNORED_ATTRIBUTES = IGNORED_ATTRIBUTES;

    function getAttributeList(element) {
        if (!element) {
            return [];
        }
        var attributeList = [];
        var $element = _ember['default'].$(element);
        var textContent = $element.text().trim();
        if (textContent) {
            attributeList.push({
                name: $element.attr('content') ? 'text content' : 'content',
                attribute: $element.attr('content') ? 'text-content' : 'content',
                value: textContent
            });
        }
        var mappedAttributes = {};
        for (var i = 0; i < element.attributes.length; i++) {
            var attrib = element.attributes[i];
            if (attrib.name.startsWith('data-portia-')) {
                var originalName = attrib.name.slice('data-portia-'.length);
                if (!mappedAttributes[originalName]) {
                    mappedAttributes[originalName] = attrib.value;
                }
            }
        }
        Array.prototype.slice.call(element.attributes).forEach(function (attribute) {
            if (!attribute.nodeName.startsWith('data-portia-') && !IGNORED_ATTRIBUTES.has(attribute.nodeName) && attribute.value) {
                attributeList.push({
                    name: attribute.nodeName,
                    attribute: attribute.nodeName,
                    value: mappedAttributes[attribute.nodeName] || attribute.value
                });
            }
        });
        return attributeList;
    }

    function getDefaultAttribute(element) {
        // TODO: Remove attributes that have been already annotated
        var attrList = getAttributeList(element);

        if (attrList.length === 1 && attrList[0].attribute) {
            // Only one possible attribute
            return attrList[0].attribute;
        }

        if (attrList.findBy('attribute', 'content')) {
            return 'content';
        } else if (element.tagName === 'IMG' && attrList.findBy('attribute', 'src')) {
            return 'src';
        } else if (element.tagName === 'A' && attrList.findBy('attribute', 'href')) {
            return 'href';
        }

        return null;
    }

    exports['default'] = _ember['default'].Component.extend({
        dispatcher: _ember['default'].inject.service(),
        uiState: _ember['default'].inject.service(),

        tagName: '',

        attributes: _ember['default'].computed('inspectedElement', function () {
            return getAttributeList(this.get('inspectedElement'));
        }),

        elementPath: _ember['default'].computed('inspectedElement', function () {
            var element = this.get('inspectedElement');
            if (!element) {
                return '';
            }
            return (0, _portiaUiUtilsSelectors.pathSelector)(element);
        }),

        elementParents: _ember['default'].computed('originalSelectedElement', 'selectedElement', function () {
            var inspected = this.get('originalSelectedElement');
            var selected = this.get('selectedElement');
            if (!inspected) {
                return [];
            }
            return $(inspected).add($(inspected).parents()).toArray().map(function (element) {
                return {
                    element: element,
                    tagName: element.tagName.toLowerCase(),
                    selected: element === selected,
                    isLast: element === inspected
                };
            });
        }),

        elementChilds: _ember['default'].computed('selectedElement', function () {
            var selected = this.get('selectedElement');
            return $(selected).children().toArray().map(function (element) {
                return {
                    element: element,
                    tagName: element.tagName.toLowerCase()
                };
            });
        }),
        inspectedElement: _ember['default'].computed.or('uiState.viewPort.hoveredElement', 'uiState.viewPort.selectedElement'),
        originalSelectedElement: _ember['default'].computed.alias('uiState.viewPort.originalSelectedElement'),
        selectedElement: _ember['default'].computed.alias('uiState.viewPort.selectedElement'),
        isHovered: _ember['default'].computed.bool('uiState.viewPort.hoveredElement'),

        actions: {
            addAnnotation: function addAnnotation(attribute) {
                this.get('dispatcher').addAnnotation(
                /* auto item */null, this.get('inspectedElement'), attribute, /* redirect = */true);
            },

            changeAnnotationSource: function changeAnnotationSource(attribute) {
                var annotation = this.get('uiState.models.annotation');
                this.get('dispatcher').changeAnnotationSource(annotation, attribute);
            },

            selectParent: function selectParent(element) {
                this.set('selectedElement', element);
            },

            selectChild: function selectChild(element) {
                this.set('selectedElement', element);
                // Selecting sideways resets the originalSelectedElement
                this.set('uiState.viewPort.originalSelectedElement', element);
            }
        }
    });
});
define('portia-ui/components/language-options', ['exports', 'ember', 'portia-ui/mixins/save-spider-mixin'], function (exports, _ember, _portiaUiMixinsSaveSpiderMixin) {
    exports['default'] = _ember['default'].Component.extend(_portiaUiMixinsSaveSpiderMixin['default'], {

        api: _ember['default'].inject.service(),
        notificationManager: _ember['default'].inject.service(),
        browser: _ember['default'].inject.service(),

        spider: null,

        generateTable: function generateTable(cookiesList) {

            var cookies = JSON.parse(cookiesList);
            var table = document.createElement("TABLE");
            table.border = "1";

            for (var key in cookies) {
                if (cookies.hasOwnProperty(key)) {
                    var cookie = cookies[key];
                    for (var prop in cookie) {
                        if (cookie.hasOwnProperty(prop)) {
                            var row = table.insertRow(-1);
                            var cell1 = row.insertCell(-1);
                            cell1.innerHTML = prop;
                            var cell2 = row.insertCell(-1);
                            cell2.innerHTML = cookie[prop];
                        }
                    }
                }
            }
            var dvTables = this.$('#dvTable');
            var i;
            for (i = 0; i < dvTables.length; i++) {
                dvTables[i].innerHTML = "";
                dvTables[i].appendChild(table.cloneNode(true));
            }
        },

        actions: {
            save: function save() {
                this.saveSpider();
            },

            detectCookies: function detectCookies(spider) {
                var _this = this;

                var currentUrl = this.get('browser.url');
                this.get('api').post('cookies', {
                    model: spider,
                    jsonData: { 'current_url': currentUrl }
                }).then(function (cookies) {
                    _this.get('notificationManager').showNotification('Detecting Cookies .. Please wait');
                    _this.generateTable(cookies);
                }, function (data) {
                    var error = data.errors[0];
                    if (error.status > 499) {
                        throw data;
                    }
                    _this.get('notificationManager').showNotification(error.title, error.detail);
                });
            }
        }
    });
});
define('portia-ui/components/link-crawling-options', ['exports', 'ember', 'portia-ui/mixins/save-spider-mixin'], function (exports, _ember, _portiaUiMixinsSaveSpiderMixin) {
    exports['default'] = _ember['default'].Component.extend(_portiaUiMixinsSaveSpiderMixin['default'], {
        tagName: '',

        spider: null,

        actions: {
            save: function save() {
                this.saveSpider();
            }
        }
    });
});
define('portia-ui/components/list-item-add-annotation-menu', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        dispatcher: _ember['default'].inject.service(),

        tagName: '',

        item: null,

        allowNesting: false,

        actions: {
            addAnnotation: function addAnnotation() {
                var item = this.get('item');
                this.get('dispatcher').addAnnotation(item, undefined, undefined, /* redirect = */true);
            },

            addNestedItem: function addNestedItem() {
                var item = this.get('item');
                this.get('dispatcher').addNestedItem(item, /* redirect = */true);
            }
        }
    });
});
define('portia-ui/components/list-item-annotation-field', ['exports', 'ember', 'portia-ui/components/schema-structure-listing'], function (exports, _ember, _portiaUiComponentsSchemaStructureListing) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _ember['default'].Component.extend({
        dispatcher: _ember['default'].inject.service(),
        notificationManager: _ember['default'].inject.service(),

        tagName: '',

        annotation: null,
        selecting: false,

        actions: {
            validateFieldName: function validateFieldName(name) {
                var _this = this;

                return _ember['default'].RSVP.all([this.get('annotation.field'), this.get('annotation.field.schema.fields')]).then(function (_ref) {
                    var _ref2 = _slicedToArray(_ref, 2);

                    var currentField = _ref2[0];
                    var fields = _ref2[1];

                    if (!fields) {
                        return true;
                    }
                    fields = fields.reject(function (f) {
                        return f === currentField;
                    });
                    var error = (0, _portiaUiComponentsSchemaStructureListing.validateFieldName)(name, fields);
                    if (error) {
                        _this.get('notificationManager').showWarningNotification(error);
                    }
                    return !error;
                });
            },

            addField: function addField(name) {
                var annotation = this.get('annotation');
                var schema = annotation.get('field.schema');
                var currentType = annotation.get('type');
                var dispatcher = this.get('dispatcher');

                dispatcher.addNamedField(schema, name, currentType, /* redirect = */false).then(function (field) {
                    annotation.set('field', field);
                    annotation.save();
                });
            },

            changeField: function changeField() {
                var annotation = this.get('annotation');
                var field = annotation.get('field.content');
                annotation.set('field', field);
                annotation.save();
            }
        }
    });
});
define('portia-ui/components/list-item-badge', ['exports', 'portia-ui/components/colored-badge'], function (exports, _portiaUiComponentsColoredBadge) {
  exports['default'] = _portiaUiComponentsColoredBadge['default'].extend({});
});
define('portia-ui/components/list-item-combo', ['exports', 'portia-ui/components/list-item-selectable'], function (exports, _portiaUiComponentsListItemSelectable) {
    exports['default'] = _portiaUiComponentsListItemSelectable['default'].extend({
        classNames: ['list-item-combo'],

        autoSelect: false
    });
});
define('portia-ui/components/list-item-country', ['exports', 'ember', 'portia-ui/mixins/save-spider-mixin'], function (exports, _ember, _portiaUiMixinsSaveSpiderMixin) {
    exports['default'] = _ember['default'].Component.extend(_portiaUiMixinsSaveSpiderMixin['default'], {
        tagName: '',

        spider: null,

        countryCodeOptions: [{
            value: '',
            label: "Choose a country from list"
        }, {
            value: 'eg',
            label: 'Egypt'
        }, {
            value: 'sa',
            label: "Saudi Arabia"
        }, {
            value: 'ae',
            label: "UAE"
        }, {
            value: 'ke',
            label: "Kenya"
        }, {
            value: 'ng',
            label: "Nigeria"
        }],

        countryCode: _ember['default'].computed('spider.countryCode', {
            get: function get() {
                return this.countryCodeOptions.findBy('value', this.get('spider.countryCode'));
            },

            set: function set(key, value) {
                this.set('spider.countryCode', value.value);
                return value;
            }
        }),

        actions: {
            saveSpider: function saveSpider() {
                this.saveSpider();
            }
        }
    });
});
define('portia-ui/components/list-item-currency', ['exports', 'ember', 'portia-ui/mixins/save-spider-mixin'], function (exports, _ember, _portiaUiMixinsSaveSpiderMixin) {
    exports['default'] = _ember['default'].Component.extend(_portiaUiMixinsSaveSpiderMixin['default'], {
        routing: _ember['default'].inject.service('-routing'),
        tagName: '',

        spider: null,

        currencyConfigOptions: [{
            value: false,
            label: "Disable Currency"
        }, {
            value: true,
            label: 'Enable Currency'
        }],

        useCurrencyConfig: _ember['default'].computed('spider.useCurrencyConfig', {
            get: function get() {
                return this.currencyConfigOptions.findBy('value', this.get('spider.useCurrencyConfig'));
            },

            set: function set(key, value) {
                this.set('spider.useCurrencyConfig', value.value);
                return value;
            }
        }),

        actions: {
            saveSpider: function saveSpider() {
                var _this = this;

                this.saveSpider().then(function () {
                    if (_this.get('useCurrencyConfig.value') === true) {
                        _this.get('routing').transitionTo('projects.project.spider.currency-options');
                    }
                });
            }
        }
    });
});
define('portia-ui/components/list-item-editable', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        classNames: ['list-item-editable'],
        classNameBindings: ['editing'],

        editing: false,
        onChange: null,
        validate: null,
        spellcheck: true,
        value: null,

        click: function click() {
            if (this.get('editing')) {
                return false;
            }
        },

        actions: {
            startEditing: function startEditing() {
                this.set('editing', true);
            }
        }
    });
});
define('portia-ui/components/list-item-field-type', ['exports', 'ember', 'portia-ui/models/field', 'portia-ui/utils/ensure-promise'], function (exports, _ember, _portiaUiModelsField, _portiaUiUtilsEnsurePromise) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        field: null,

        types: _portiaUiModelsField.FIELD_TYPES,

        actions: {
            saveField: function saveField() {
                var field = this.get('field');
                (0, _portiaUiUtilsEnsurePromise['default'])(field).then(function (field) {
                    if (!!field) {
                        field.save();
                    }
                });
            }
        }
    });
});
define('portia-ui/components/list-item-icon-menu', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        icon: null
    });
});
define('portia-ui/components/list-item-icon', ['exports', 'portia-ui/components/icon-button'], function (exports, _portiaUiComponentsIconButton) {
    exports['default'] = _portiaUiComponentsIconButton['default'].extend({
        classNames: ['list-item-icon']
    });
});
define('portia-ui/components/list-item-item-schema', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        dispatcher: _ember['default'].inject.service(),

        tagName: '',

        item: null,
        selecting: false,

        actions: {
            addSchema: function addSchema(name) {
                var item = this.get('item');
                var project = item.get('schema.project');
                this.get('dispatcher').addNamedSchema(project, name, /* redirect = */false).then(function (schema) {
                    item.set('schema', schema);
                    item.save();
                });
            },

            changeSchema: function changeSchema() {
                var item = this.get('item');
                var schema = item.get('schema.content'); // get the new schema
                item.set('schema', schema);
                item.save();
            }
        }
    });
});
define('portia-ui/components/list-item-language', ['exports', 'ember', 'portia-ui/mixins/save-spider-mixin'], function (exports, _ember, _portiaUiMixinsSaveSpiderMixin) {
    exports['default'] = _ember['default'].Component.extend(_portiaUiMixinsSaveSpiderMixin['default'], {
        routing: _ember['default'].inject.service('-routing'),
        tagName: '',

        spider: null,

        languageConfigOptions: [{
            value: false,
            label: "Disable language"
        }, {
            value: true,
            label: 'Enable language'
        }],

        useLanguageConfig: _ember['default'].computed('spider.useLanguageConfig', {
            get: function get() {
                return this.languageConfigOptions.findBy('value', this.get('spider.useLanguageConfig'));
            },

            set: function set(key, value) {
                this.set('spider.useLanguageConfig', value.value);
                return value;
            }
        }),

        actions: {
            saveSpider: function saveSpider() {
                var _this = this;

                this.saveSpider().then(function () {
                    if (_this.get('useLanguageConfig.value') === true) {
                        _this.get('routing').transitionTo('projects.project.spider.language-options');
                    }
                });
            }
        }
    });
});
define('portia-ui/components/list-item-link-crawling', ['exports', 'ember', 'portia-ui/mixins/save-spider-mixin'], function (exports, _ember, _portiaUiMixinsSaveSpiderMixin) {
    exports['default'] = _ember['default'].Component.extend(_portiaUiMixinsSaveSpiderMixin['default'], {
        routing: _ember['default'].inject.service('-routing'),
        tagName: '',

        spider: null,

        followPatternOptions: [{
            value: 'all',
            label: 'Follow all in-domain links'
        }, {
            value: 'none',
            label: "Don't follow links"
        }, {
            value: 'patterns',
            label: 'Configure url patterns'
        }, {
            value: 'auto',
            label: 'Follow links automatically'
        }],

        linksToFollow: _ember['default'].computed('spider.linksToFollow', {
            get: function get() {
                return this.followPatternOptions.findBy('value', this.get('spider.linksToFollow'));
            },

            set: function set(key, value) {
                this.set('spider.linksToFollow', value.value);
                return value;
            }
        }),

        actions: {
            saveSpider: function saveSpider() {
                var _this = this;

                this.saveSpider().then(function () {
                    if (_this.get('linksToFollow.value') === 'patterns') {
                        _this.get('routing').transitionTo('projects.project.spider.link-options');
                    } else if (_this.get('linksToFollow.value') === 'none' && _this.get('routing.currentRouteName').endsWith('link-options')) {
                        _this.get('routing').transitionTo('projects.project.spider');
                    }
                });
            }
        }
    });
});
define('portia-ui/components/list-item-relation-manager', ['exports', 'ember', 'portia-ui/utils/promises'], function (exports, _ember, _portiaUiUtilsPromises) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        onChange: null,
        choices: [],
        selecting: false,
        value: null,

        choicesOrdering: ['name'],
        sortedChoices: _ember['default'].computed.sort('choices', 'choicesOrdering'),

        orderItemsForSearch: function orderItemsForSearch(items) {
            function sortPriority(item) {
                switch (item.get('value.special')) {
                    case 'rename':
                        return 1;
                    case 'add':
                        return 2;
                    default:
                        return 0;
                }
            }

            return items.sort(function (a, b) {
                return sortPriority(a) - sortPriority(b);
            });
        },

        valuesEqual: function valuesEqual(a, b) {
            var aValue = a && (a.get ? a.get('name') : a.name);
            var bValue = b && (b.get ? b.get('name') : b.name);
            return aValue === bValue;
        },

        validateName: function validateName(name) {
            return typeof this.attrs.validate !== 'function' || this.attrs.validate(name);
        },

        actions: {
            add: function add(name) {
                var _this = this;

                (0, _portiaUiUtilsPromises.ensurePromise)(this.validateName(name)).then(function (isValid) {
                    if (isValid) {
                        if (_this.attrs.create) {
                            _this.attrs.create(name);
                        }
                    }
                });
            },

            rename: function rename(name) {
                var _this2 = this;

                (0, _portiaUiUtilsPromises.ensurePromise)(this.validateName(name)).then(function (isValid) {
                    if (isValid) {
                        var model = _this2.get('value');
                        model.then(function (item) {
                            item.set('name', name);
                            item.save();
                        });
                    }
                });
            }
        }
    });
});
define('portia-ui/components/list-item-schema-manager', ['exports', 'ember', 'portia-ui/utils/promises'], function (exports, _ember, _portiaUiUtilsPromises) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        onChange: null,
        choices: [],
        selecting: false,
        value: null,

        choicesOrdering: ['name'],
        sortedChoices: _ember['default'].computed.sort('choices', 'choicesOrdering'),

        orderItemsForSearch: function orderItemsForSearch(items) {
            function sortPriority(item) {
                switch (item.get('value.special')) {
                    case 'rename':
                        return 1;
                    case 'add':
                        return 2;
                    default:
                        return 0;
                }
            }

            return items.sort(function (a, b) {
                return sortPriority(a) - sortPriority(b);
            });
        },

        valuesEqual: function valuesEqual(a, b) {
            var aValue = a && (a.get ? a.get('name') : a.name);
            var bValue = b && (b.get ? b.get('name') : b.name);
            return aValue === bValue;
        },

        validateName: function validateName(name) {
            return typeof this.attrs.validate !== 'function' || this.attrs.validate(name);
        },

        actions: {
            add: function add(name) {
                var _this = this;

                (0, _portiaUiUtilsPromises.ensurePromise)(this.validateName(name)).then(function (isValid) {
                    if (isValid) {
                        if (_this.attrs.create) {
                            _this.attrs.create(name);
                        }
                    }
                });
            },

            rename: function rename(name) {
                var _this2 = this;

                (0, _portiaUiUtilsPromises.ensurePromise)(this.validateName(name)).then(function (isValid) {
                    if (isValid) {
                        var model = _this2.get('value');
                        model.then(function (item) {
                            item.set('name', name);
                            item.save();
                        });
                    }
                });
            }
        }
    });
});
define('portia-ui/components/list-item-selectable', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        classNames: ['list-item-selectable'],
        classNameBindings: ['selecting'],

        change: null,
        choices: [],
        buttonClass: null,
        menuAlign: 'left',
        menuClass: null,
        menuContainer: null,

        selecting: false,
        value: null,

        actions: {
            startSelecting: function startSelecting() {
                this.set('selecting', true);
            }
        }
    });
});
define('portia-ui/components/list-item-spider-train', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        classNameBindings: ['list-item-spider-train', 'disabled', 'hasAction'],

        bubbles: true,
        disabled: false,

        hasAction: _ember['default'].computed.bool('action'),

        click: function click() {
            if (this.attrs.action && !this.get('disabled')) {
                this.attrs.action();
                if (!this.get('bubbles')) {
                    return false;
                }
            }
        }

    });
});
define('portia-ui/components/list-item-text', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: 'span',
        classNames: ['list-item-text']
    });
});
define('portia-ui/components/list-item-username', ['exports', 'ember', 'portia-ui/mixins/save-spider-mixin'], function (exports, _ember, _portiaUiMixinsSaveSpiderMixin) {
    exports['default'] = _ember['default'].Component.extend(_portiaUiMixinsSaveSpiderMixin['default'], {
        tagName: '',

        spider: null,

        usernameOptions: [{
            value: '',
            label: "Choose your username"
        }, {
            value: 'mina',
            label: 'mina'
        }, {
            value: 'nagy',
            label: 'nagy'
        }],

        username: _ember['default'].computed('spider.username', {
            get: function get() {
                return this.usernameOptions.findBy('value', this.get('spider.user'));
            },

            set: function set(key, value) {
                this.set('spider.username', value.value);
                return value;
            }
        }),

        actions: {
            saveSpider: function saveSpider() {
                this.saveSpider();
            }
        }
    });
});
define('portia-ui/components/modal-confirm-train', ['exports', 'ember-modal-dialog/components/modal-dialog'], function (exports, _emberModalDialogComponentsModalDialog) {
    exports['default'] = _emberModalDialogComponentsModalDialog['default'].extend({
        translucentOverlay: true, // override default of false
        containerClassNames: 'modal-confirm-train',
        destinationElementId: 'modal-overlays',

        actions: {
            toggleSubclassed: function toggleSubclassed() {
                this.sendAction('toggleModal');
            }
        }
    });
});
define('portia-ui/components/modal-dialog-overlay', ['exports', 'ember-modal-dialog/components/modal-dialog-overlay'], function (exports, _emberModalDialogComponentsModalDialogOverlay) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberModalDialogComponentsModalDialogOverlay['default'];
    }
  });
});
define('portia-ui/components/modal-dialog', ['exports', 'ember-modal-dialog/components/modal-dialog'], function (exports, _emberModalDialogComponentsModalDialog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberModalDialogComponentsModalDialog['default'];
    }
  });
});
define('portia-ui/components/notification-container', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        notificationManager: _ember['default'].inject.service(),

        classNames: ['notifications'],

        _banners: [],
        _notifications: [],

        banners: _ember['default'].computed('_banners.[]', 'notificationManager.banners.[]', function () {
            var lastBanners = this.get('_banners');
            var banners = this.get('notificationManager.banners');
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = lastBanners[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var banner = _step.value;

                    _ember['default'].set(banner, 'fading', true);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = banners[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var banner = _step2.value;

                    _ember['default'].set(banner, 'fading', undefined);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                        _iterator2['return']();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            lastBanners.addObjects(banners);
            return lastBanners;
        }),
        notifications: _ember['default'].computed('_notifications.[]', 'notificationManager.notifications.[]', function () {
            var lastNotifications = this.get('_notifications');
            var notifications = this.get('notificationManager.notifications');
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = lastNotifications[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var notification = _step3.value;

                    _ember['default'].set(notification, 'fading', true);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                        _iterator3['return']();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = notifications[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var notification = _step4.value;

                    _ember['default'].set(notification, 'fading', undefined);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4['return']) {
                        _iterator4['return']();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            lastNotifications.addObjects(notifications);
            return lastNotifications;
        }),

        displayNotifications: _ember['default'].computed('banners.length', 'notifications.[]', function () {
            var numBanners = this.get('banners.length');
            var notifications = this.get('notifications');
            return notifications.slice(0, Math.max(0, 4 - numBanners));
        }),

        actions: {
            dismissNotification: function dismissNotification(notification) {
                this.get('notificationManager.notifications').removeObject(notification);
            },

            fadeBanner: function fadeBanner(banner) {
                this.get('_banners').removeObject(banner);
            },

            fadeNotification: function fadeNotification(notification) {
                this.get('_notifications').removeObject(notification);
            }
        }
    });
});
define('portia-ui/components/notification-message', ['exports', 'ember', 'portia-ui/utils/attrs'], function (exports, _ember, _portiaUiUtilsAttrs) {
    exports['default'] = _ember['default'].Component.extend({
        classNames: ['alert', 'notification', 'fade'],
        classNameBindings: ['alertType', 'show:in'],

        notification: null,
        closeAction: null,
        dismissable: false,
        show: false,
        showTime: 4000, // 4s

        message: _ember['default'].computed.readOnly('notification.message'),
        title: _ember['default'].computed.readOnly('notification.title'),
        type: _ember['default'].computed.readOnly('notification.type'),

        alertType: _ember['default'].computed('type', function () {
            var type = this.getWithDefault('type', 'info');
            return 'alert-' + type;
        }),

        init: function init() {
            this._super();
            this.set('show', false);
        },

        didReceiveAttrs: function didReceiveAttrs(_ref) {
            var newAttrs = _ref.newAttrs;
            var oldAttrs = _ref.oldAttrs;

            if ((0, _portiaUiUtilsAttrs.attrChangedTo)(oldAttrs, newAttrs, 'fade', true)) {
                this.fadeOut();
            }
        },

        didInsertElement: function didInsertElement() {
            var _this = this;

            _ember['default'].run.next(this, 'fadeIn');
            if (this.attrs.closeAction) {
                _ember['default'].run.later(function () {
                    _this.attrs.closeAction();
                }, this.showTime);
            }
        },

        fadeIn: function fadeIn() {
            if (!this.isDestroying) {
                this.set('show', true);
            }
        },

        fadeOut: function fadeOut() {
            this.set('show', false);
        },

        transitionEnd: function transitionEnd() {
            if (!this.get('show')) {
                if (this.attrs.fadeAction) {
                    this.attrs.fadeAction();
                }
            }
        },

        actions: {
            close: function close() {
                if (this.attrs.closeAction) {
                    this.attrs.closeAction();
                }
            }
        }
    });
});
define('portia-ui/components/page-actions-editor', ['exports', 'ember'], function (exports, _ember) {

    var TYPES = ['click', 'set', 'wait'];

    exports['default'] = _ember['default'].Component.extend({
        actionTypes: TYPES,
        pageActions: null,
        editing: null,
        addingNew: false,

        actions: {
            reorderPageAction: function reorderPageAction(originalIndex, newIndex) {
                var pageActions = this.get('pageActions');
                var action = pageActions[originalIndex];
                pageActions.removeAt(originalIndex);
                pageActions.insertAt(newIndex, action);
            },
            deletePageAction: function deletePageAction(index) {
                var pageActions = this.get('pageActions');
                pageActions.removeAt(index);
            },
            editPageAction: function editPageAction(pageAction) {
                pageAction._edited = true;
                this.set('editing', pageAction);
            },
            back: function back() {
                this.set('editing', null);
            },
            addContinue: function addContinue() {
                this.set('addingNew', false);
            },
            addNew: function addNew() {
                var pa = _ember['default'].Object.create({
                    type: "wait",
                    _edited: true
                });
                this.set('addingNew', true);
                this.set('editing', pa);
                this.get('pageActions').pushObject(pa);
            }
        }
    });
});
define('portia-ui/components/project-list', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        store: _ember['default'].inject.service(),

        classNames: ['project-list', 'list-group'],
        classNameBindings: ['showSearch', 'filteredProjects.length::empty'],

        minSearchableProjects: 8,
        projects: [],
        searchTerm: '',

        showSearch: _ember['default'].computed('projects', function () {
            return this.get('projects.content.length') > this.get('minSearchableProjects');
        }),

        filteredProjects: _ember['default'].computed('projects', 'searchTerm', function () {
            var term = this.get('searchTerm');
            if (term.length === 0) {
                return this.get('projects');
            }
            return this.get('store').peekAll('project').filter(function (item) {
                return item.get('name').toLowerCase().indexOf(term) > -1;
            });
        }),

        actions: {
            search: function search(value) {
                this.set('searchTerm', value.toLowerCase().trim());
            },

            clear: function clear() {
                this.set('searchTerm', '');
            }
        }
    });
});
define('portia-ui/components/project-listing', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        capabilities: _ember['default'].inject.service(),
        notificationManager: _ember['default'].inject.service(),

        tagName: '',

        versionControlled: _ember['default'].computed.readOnly('capabilities.capabilities.version_control'),

        project: null,

        actions: {
            publish: function publish() {
                var _this = this;

                this.get('project').publish().then(function (data) {
                    // Show user message and allow them to schedule spider
                    _this.get('notificationManager').showNotification(data.meta.title);
                }, function (data) {
                    var error = data.errors[0];
                    if (error.status > 499) {
                        throw data;
                    }
                    _this.get('notificationManager').showNotification(error.title, error.detail);
                    if (error.status === 409) {
                        _this.sendAction('conflict');
                    }
                });
            },

            discard: function discard() {
                var _this2 = this;

                this.get('project').reset().then(function () {
                    _this2.sendAction('reload');
                }, function (data) {
                    var error = data.errors[0];
                    if (error.status > 499) {
                        throw data;
                    }
                    _this2.get('notificationManager').showNotification(error.title, error.detail);
                });
            }
        }
    });
});
define('portia-ui/components/project-structure-listing', ['exports', 'ember', 'portia-ui/services/dispatcher', 'ember-concurrency'], function (exports, _ember, _portiaUiServicesDispatcher, _emberConcurrency) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    var computed = _ember['default'].computed;
    var observer = _ember['default'].observer;

    var LIMIT = 15;
    var FILTER_DEBOUNCE = 800;
    var TURN_PAGE_DEBOUNCE = 200;

    exports['default'] = _ember['default'].Component.extend({
        browser: _ember['default'].inject.service(),
        dispatcher: _ember['default'].inject.service(),
        notificationManager: _ember['default'].inject.service(),
        routing: _ember['default'].inject.service('-routing'),
        savingNotification: _ember['default'].inject.service(),
        uiState: _ember['default'].inject.service(),

        tagName: '',
        spiderSearch: '',
        isFiltering: false,

        didReceiveAttrs: function didReceiveAttrs() {
            var spiders = this.get('sortedSpiders').slice(0, LIMIT);
            this._addCurrentSpider(spiders);
            this.set('spiders', spiders);
            this.set('filteredSpiders', this.get('sortedSpiders'));
        },

        // Pagination
        currentPage: 0,
        hasPreviousPage: computed.gte('currentPage', 1),
        hasNextPage: computed('currentPage', 'filteredSpiders.length', function () {
            var max = (this.get('currentPage') + 1) * LIMIT;
            return max < this.get('filteredSpiders.length');
        }),
        pagination: computed('currentSpider', 'currentPage', 'spiders.[]', function () {
            if (this.get('currentSpider')) {
                return '';
            }

            var start = this.get('currentPage') * LIMIT + 1;
            var end = Math.min((this.get('currentPage') + 1) * LIMIT, start + this.get('spiders.length') - 1);
            return '( ' + start + '-' + end + ' )';
        }),
        currentSpiderChanged: observer('currentSpider', function () {
            var _this = this;

            _ember['default'].run.next(function () {
                _this._addCurrentSpider(_this.get('spiders'));
                _this._addCurrentSpider(_this.get('filteredSpiders'));
            });
        }),
        turnPage: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0(offset) {
            var nextPage, start;
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        this.set('isFiltering', true);

                        context$1$0.next = 3;
                        return (0, _emberConcurrency.timeout)(TURN_PAGE_DEBOUNCE);

                    case 3:

                        this.set('isFiltering', false);
                        nextPage = this.get('currentPage') + offset;
                        start = nextPage * LIMIT;

                        this.set('spiders', this.get('filteredSpiders').slice(start, start + LIMIT));
                        this.set('currentPage', nextPage);

                    case 8:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this);
        })).drop(),

        numSpiders: computed.readOnly('project.spiders.length'),
        canAddSpider: (0, _portiaUiServicesDispatcher.computedCanAddSpider)(),
        currentSpider: computed.readOnly('uiState.models.spider'),
        noCurrentSpider: computed.not('currentSpider'),
        currentSchema: computed.readOnly('uiState.models.schema'),
        isLarge: computed.gt('project.spiders.length', LIMIT),

        sortedSpiders: computed.sort('project.spiders', function (spider, other_spider) {
            var _map = [spider, other_spider].map(function (spider) {
                return spider.get('id').toLowerCase();
            });

            var _map2 = _slicedToArray(_map, 2);

            var a = _map2[0];
            var b = _map2[1];

            if (a < b) {
                return -1;
            } else if (a > b) {
                return 1;
            }
            return 0;
        }),

        filterSpiders: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0(spiders, term) {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        this.set('isFiltering', true);
                        context$1$0.next = 3;
                        return (0, _emberConcurrency.timeout)(FILTER_DEBOUNCE);

                    case 3:
                        this._updateFilter(this._fuzzyFilter(spiders, term), term);

                    case 4:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this);
        })).restartable(),

        addSpiderTooltipText: computed('canAddSpider', {
            get: function get() {
                if (this.get('canAddSpider')) {
                    return 'Create a new Spider';
                } else {
                    return 'You must visit a website before you can create a Spider';
                }
            }
        }),

        notifyError: function notifyError(spider) {
            var msg = 'Renaming the spider \'' + spider.get('id') + '\' failed.';
            this.get('notificationManager').showErrorNotification(msg);

            spider.set('name', spider.get('id'));
        },

        actions: {
            addSchema: function addSchema() {
                this.get('dispatcher').addSchema(this.get('project'), /* redirect = */true);
            },

            removeSchema: function removeSchema(schema) {
                this.get('dispatcher').removeSchema(schema);
            },

            saveSchema: function saveSchema(schema) {
                schema.save();
            },

            addSpider: function addSpider() {
                this.get('dispatcher').addSpider(this.get('project'), /* redirect = */true);
            },

            removeSpider: function removeSpider(spider) {
                this.get('dispatcher').removeSpider(spider);
                this.get('filteredSpiders').removeObject(spider);
                this.get('spiders').removeObject(spider);
            },

            validateSpiderName: function validateSpiderName(spider, name) {
                var nm = this.get('notificationManager');
                if (!/^[a-zA-Z0-9][a-zA-Z0-9_\.-]*$/.test(name)) {
                    nm.showWarningNotification('Invalid spider name.\n                    Only letters, numbers, underscores, dashes and dots are allowed.');
                    return false;
                }
                if (spider.get('id') === name) {
                    return true;
                }
                var spiders = this.get('project.spiders').mapBy('id');
                if (spiders.indexOf(name) >= 0) {
                    nm.showWarningNotification('Invalid spider name.\n                    A spider already exists with the name "' + name + '"');
                    return false;
                }
                return true;
            },

            saveSpiderName: function saveSpiderName(spider) {
                var _this2 = this;

                var dispatcher = this.get('dispatcher');
                var saving = this.get('savingNotification');

                saving.start();

                dispatcher.changeSpiderName(spider).then(function (data) {
                    return dispatcher.changeId(spider, data);
                })['catch'](function () {
                    return _this2.notifyError(spider);
                })['finally'](function () {
                    return saving.end();
                });
            }
        },

        _fuzzyFilter: function _fuzzyFilter(items, term) {
            if (term === '') {
                return this.get('sortedSpiders');
            }

            var fuzzy = new RegExp(term.split('').join('.*'), 'i');
            return items.filter(function (item) {
                return fuzzy.exec(item.get('id'));
            });
        },

        _addCurrentSpider: function _addCurrentSpider(spiders) {
            var currentSpider = this.get('currentSpider');
            if (currentSpider && !spiders.includes(currentSpider)) {
                spiders.pushObject(currentSpider);
            }
        },

        _updateFilter: function _updateFilter(spiders) {
            var term = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

            this.set('spiderSearch', term);
            this.set('currentPage', 0);
            this.set('isFiltering', false);

            this.set('spiders', spiders.slice(0, LIMIT));
            this.set('filteredSpiders', spiders);
        }
    });
});
define('portia-ui/components/project-structure-spider-feed-url', ['exports', 'ember', 'portia-ui/utils/utils'], function (exports, _ember, _portiaUiUtilsUtils) {
    var computed = _ember['default'].computed;
    exports['default'] = _ember['default'].Component.extend({
        dispatcher: _ember['default'].inject.service(),

        tagName: '',

        url: computed.alias('startUrl.url'),
        isEditing: computed.equal('url', ''),

        viewUrl: computed('url', {
            get: function get() {
                return this.get('url');
            },
            set: function set(key, value) {
                this.saveStartUrl(value);
            }
        }),

        saveStartUrl: function saveStartUrl(url) {
            this.set('startUrl.url', (0, _portiaUiUtilsUtils.cleanUrl)(url));
            this.get('spider').save();
        }
    });
});
define('portia-ui/components/project-structure-spider-generated-url', ['exports', 'ember'], function (exports, _ember) {
    var computed = _ember['default'].computed;
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        fragments: computed.alias('startUrl.fragments'),
        url: computed('startUrl.url', 'fragments.@each.type', 'fragments.@each.value', function () {
            return this.get('startUrl').show();
        })
    });
});
define('portia-ui/components/project-structure-spider-url', ['exports', 'ember', 'portia-ui/utils/utils'], function (exports, _ember, _portiaUiUtilsUtils) {
    var computed = _ember['default'].computed;
    exports['default'] = _ember['default'].Component.extend({
        dispatcher: _ember['default'].inject.service(),
        tagName: '',

        fragments: computed.alias('startUrl.fragments'),
        url: computed('startUrl.url', 'fragments.@each.type', 'fragments.@each.value', function () {
            return this.get('startUrl').show();
        }),

        viewUrl: _ember['default'].computed('url', {
            get: function get() {
                return this.get('url');
            },

            set: function set(key, value, oldValue) {
                this.send('saveStartUrl', oldValue, value);
                return value;
            }
        }),

        handleNewUrl: function handleNewUrl(oldUrl, newUrl) {
            var spider = this.get('spider');
            var cleanNewUrl = (0, _portiaUiUtilsUtils.cleanUrl)(newUrl);

            if (!oldUrl) {
                this.get('dispatcher').addStartUrl(spider, cleanNewUrl);
            } else {
                this.get('dispatcher').replaceStartUrl(spider, oldUrl, cleanNewUrl);
            }
        },

        removeStartUrl: function removeStartUrl() {
            this.get('dispatcher').removeStartUrl(this.get('spider'), this.get('startUrl'));
        },

        actions: {
            saveStartUrl: function saveStartUrl(oldUrl, newUrl) {
                if (oldUrl !== newUrl) {
                    if (newUrl) {
                        this.handleNewUrl(oldUrl, newUrl);
                    } else {
                        this.removeStartUrl();
                    }
                }
            }
        }
    });
});
define('portia-ui/components/regex-pattern-list', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        classNames: ['regex-pattern-list'],

        list: [],
        newPattern: '',
        newPatternCorrect: _ember['default'].computed('newPattern', function () {
            var pattern = this.get('newPattern');
            try {
                new RegExp(pattern);
            } catch (e) {
                return false;
            }
            return true;
        }),

        triggerChange: function triggerChange() {
            if (this.attrs.onChange) {
                this.attrs.onChange();
            }
        },

        actions: {
            addPattern: function addPattern(pattern) {
                if (this.get('newPattern') && this.get('newPatternCorrect')) {
                    this.set('newPattern', '');
                    this.get('list').addObject(pattern);
                    this.triggerChange();
                }
            },

            clearPattern: function clearPattern() {
                this.set('newPattern', '');
            },

            changePattern: function changePattern(index, value) {
                var list = this.get('list');
                var current = list.objectAt(index);
                if (value !== current) {
                    list.removeObject(value);
                    list.replace(list.indexOf(current), 1, [value]);
                    this.triggerChange();
                }
            },

            removePattern: function removePattern(index) {
                this.get('list').removeAt(index);
                this.triggerChange();
            },

            stopPropagation: function stopPropagation($event) {
                $event.stopPropagation();
            }
        }
    });
});
define('portia-ui/components/reorder-handler', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        attributeBindings: ['draggable', 'style'],
        draggable: true,
        tagName: 'i',
        classNames: 'fa fa-icon fa-arrows reorder-handler',
        dragStart: function dragStart(event) {
            var dataTransfer = event.originalEvent.dataTransfer;
            dataTransfer.effectAllowed = "move";
            dataTransfer.setData('text/plain', "");
            var dragElement = this.$().parentsUntil('.reorderable-list').eq(-1);
            dataTransfer.addElement(dragElement[0]);
            dragElement.addClass('dragging').one("dragend", function () {
                dragElement.removeClass('dragging');
            });
        }
    });
});
define('portia-ui/components/save-status', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        clock: _ember['default'].inject.service(),
        savingNotification: _ember['default'].inject.service(),

        tagName: 'p',
        classNames: ['save-status', 'text-center'],

        minSavingTime: 1000, // 1s
        minSuccessTime: 5000, // 5s

        init: function init() {
            this._super.apply(this, arguments);
            this.wasSaving = false;
        },

        isSaving: _ember['default'].computed('savingNotification.isSaving', {
            get: function get() {
                var _this = this;

                var isSaving = this.get('savingNotification.isSaving');
                if (isSaving) {
                    this.startTime = +new Date();
                    _ember['default'].run.cancel(this.savingSchedule);
                    return true;
                } else {
                    var timeLeft = Math.max(0, this.minSavingTime - (+new Date() - this.startTime));
                    if (timeLeft) {
                        this.savingSchedule = _ember['default'].run.later(function () {
                            _this.set('isSaving', _this.get('savingNotification.isSaving'));
                        }, timeLeft);
                        return true;
                    }
                    return false;
                }
            },

            set: function set(key, value) {
                return value;
            }
        }),
        timeSinceLastSave: _ember['default'].computed('clock.time', 'savingNotification.lastSaved', function () {
            var current = this.get('clock.time');
            var last = this.get('savingNotification.lastSaved');
            if (!current || !last) {
                return null;
            }
            return moment(last).fromNow();
        }),
        labelColorClass: _ember['default'].computed('isSaving', {
            get: function get() {
                var _this2 = this;

                var isSaving = this.get('isSaving');
                if (isSaving) {
                    this.wasSaving = true;
                    _ember['default'].run.cancel(this.colorSchedule);
                } else if (this.wasSaving) {
                    this.wasSaving = false;
                    this.colorSchedule = _ember['default'].run.later(function () {
                        _this2.set('labelColorClass', _this2.get('isSaving') ? 'info' : 'default');
                    }, this.minSuccessTime);
                    return 'success';
                }
                return isSaving ? 'info' : 'default';
            },

            set: function set(key, value) {
                return value;
            }
        })
    });
});
define('portia-ui/components/schema-structure-listing', ['exports', 'ember', 'portia-ui/utils/ensure-promise'], function (exports, _ember, _portiaUiUtilsEnsurePromise) {
    exports.validateFieldName = _validateFieldName;

    function _validateFieldName(name, fields) {
        // Ensuring that field names don't start with underscores prevents
        // overwriting _item, _template and any future "protected" property
        // we might add to extracted items.
        if (/^_/.test(name)) {
            return "Invalid field name: field can't start with underscores";
        } else if (name === 'url') {
            return 'Invalid field name: naming a field "url" is not allowed as' + 'there is already a field with this name';
        } else if (fields.findBy('name', name)) {
            return 'Invalid field name: There is already a field with that name';
        }
        return null; // No error
    }

    exports['default'] = _ember['default'].Component.extend({
        notificationManager: _ember['default'].inject.service(),
        dispatcher: _ember['default'].inject.service(),

        tagName: '',

        actions: {
            addField: function addField() {
                this.get('dispatcher').addField(this.get('schema'), undefined, /* redirect = */true);
            },

            removeField: function removeField(field) {
                this.get('dispatcher').removeField(field);
            },

            validateFieldName: function validateFieldName(field, name) {
                var _this = this;

                return this.get('schema.fields').then(function (fields) {
                    fields = fields.reject(function (f) {
                        return f === field;
                    });
                    var error = _validateFieldName(name, fields);
                    if (error) {
                        _this.get('notificationManager').showWarningNotification(error);
                    }
                    return !error;
                });
            },

            saveField: function saveField(field) {
                (0, _portiaUiUtilsEnsurePromise['default'])(field).then(function (field) {
                    if (!!field) {
                        field.save();
                    }
                });
            }
        }
    });
});
define('portia-ui/components/scrapinghub-links', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: ''
    });
});
define('portia-ui/components/select-box', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        choices: [],
        buttonClass: null,
        menuAlign: 'left',
        menuClass: null,
        menuContainer: null,
        name: null,
        open: false,
        value: null,
        valueAttribute: null,
        isDisabled: false,

        viewValue: _ember['default'].computed('value', {
            get: function get() {
                return this.get('value');
            },

            set: function set(key, value) {
                return value;
            }
        }),

        didInsertElement: function didInsertElement() {
            if (this.get('open')) {
                _ember['default'].run.next(this, this.setInputFocus);
            }
        },

        inputId: _ember['default'].computed('elementId', function () {
            return this.get('elementId') + '-input';
        }),

        updateInputFocus: _ember['default'].observer('open', function () {
            _ember['default'].run.scheduleOnce('afterRender', this, this.setInputFocus);
        }),

        setInputFocus: function setInputFocus() {
            var inputElement = _ember['default'].$('#' + this.get('inputId')).get(0);
            if (inputElement && this.get('open')) {
                inputElement.focus();
            } else if (!this.get('isDestroying')) {
                inputElement.blur();
            }
        },

        actions: {
            setViewValue: function setViewValue(value) {
                this.set('viewValue', value);
            },

            setValue: function setValue(value) {
                this.setProperties({
                    value: value,
                    viewValue: value
                });
            },

            setValueAndClose: function setValueAndClose(value) {
                this.setProperties({
                    open: false,
                    value: value
                });
                if (this.attrs.onChange) {
                    this.attrs.onChange();
                }
            },

            menuClicked: function menuClicked() {
                var action = this.get('onClick');

                if (action) {
                    action();
                }
            },

            menuClosed: function menuClosed(reason) {
                if (this.get('open')) {
                    if (reason === 'escape') {
                        this.setProperties({
                            open: false,
                            viewValue: this.get('value')
                        });
                    } else {
                        var viewValue = this.get('viewValue');
                        if (viewValue && viewValue.onMenuClosed && viewValue.onMenuClosed.call) {
                            viewValue.onMenuClosed();
                        } else {
                            this.setProperties({
                                open: false,
                                value: viewValue
                            });
                        }
                        if (this.attrs.onChange) {
                            this.attrs.onChange();
                        }
                    }
                }
            }
        }
    });
});
define('portia-ui/components/show-links-button', ['exports', 'ember'], function (exports, _ember) {
    var computed = _ember['default'].computed;
    var service = _ember['default'].inject.service;
    exports['default'] = _ember['default'].Component.extend({
        browser: service(),

        disableLinks: computed.readOnly('browser.invalidUrl'),
        spider: null,

        actions: {
            toggleShowLinks: function toggleShowLinks() {
                var spider = this.get('spider');
                spider.toggleProperty('showLinks');
                spider.save();
            }
        }
    });
});
define('portia-ui/components/show-links-legend', ['exports', 'ember', 'portia-ui/utils/colors'], function (exports, _ember, _portiaUiUtilsColors) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        colors: _portiaUiUtilsColors.NAMED_COLORS,
        followedLinks: 0,
        jsLinks: 0,
        ignoredLinks: 0
    });
});
define('portia-ui/components/sliding-main', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        uiState: _ember['default'].inject.service(),

        tagName: 'main',
        classNameBindings: ['slideRight'],

        slideRight: _ember['default'].computed.bool('uiState.slideMain')
    });
});
define('portia-ui/components/spider-message', ['exports', 'ember'], function (exports, _ember) {
    var computed = _ember['default'].computed;
    exports['default'] = _ember['default'].Component.extend({
        api: _ember['default'].inject.service(),
        notificationManager: _ember['default'].inject.service(),
        hasSpider: computed.bool('currentSpider'),

        actions: {
            trainSpider: function trainSpider(spider) {
                var _this = this;

                this.get('api').post('train', {
                    model: spider,
                    jsonData: { data: { type: 'spiders', id: spider.id } }
                }).then(function () {
                    _this.get('notificationManager').showNotification('Your spider has been trained successfully');
                }, function (data) {
                    var error = data.errors[0];
                    if (error.status > 499) {
                        throw data;
                    }
                    _this.get('notificationManager').showNotification(error.title, error.detail);
                });
            }
        }
    });
});
define('portia-ui/components/spider-options', ['exports', 'ember', 'portia-ui/mixins/save-spider-mixin'], function (exports, _ember, _portiaUiMixinsSaveSpiderMixin) {
    exports['default'] = _ember['default'].Component.extend(_portiaUiMixinsSaveSpiderMixin['default'], {
        tagName: '',

        spider: null,

        actions: {
            save: function save() {
                this.saveSpider();
            }
        }
    });
});
define('portia-ui/components/spider-structure-listing', ['exports', 'ember', 'portia-ui/services/dispatcher'], function (exports, _ember, _portiaUiServicesDispatcher) {
    exports['default'] = _ember['default'].Component.extend({
        browser: _ember['default'].inject.service(),
        dispatcher: _ember['default'].inject.service(),
        uiState: _ember['default'].inject.service(),

        tagName: '',

        project: null,
        spider: null,
        newStartUrl: null,

        canAddSample: (0, _portiaUiServicesDispatcher.computedCanAddSample)('spider'),
        currentSample: _ember['default'].computed.readOnly('uiState.models.sample'),

        isShowingModal: false,

        init: function init() {
            this._super();
            this.set('newUrl', false);
        },

        getNewStartUrl: function getNewStartUrl(newUrl) {
            var newStartUrl = '';
            if (newUrl) {
                var spider = this.get('spider');
                newStartUrl = this.get('dispatcher').addStartUrl(spider, newUrl);
            }
            return newStartUrl;
        },

        getNewUrl: function getNewUrl() {
            var newUrl = this.get('browser.url') || '';
            var urls = this.get('spider.startUrls').mapBy('url');
            if (newUrl && urls.includes(newUrl)) {
                newUrl = '';
            }
            return newUrl;
        },

        actions: {

            toggleModal: function toggleModal() {
                this.toggleProperty('isShowingModal');
            },

            addStartUrl: function addStartUrl() {
                this.get('closeOptions')();

                var newUrl = this.getNewUrl();

                this.setProperties({
                    newUrl: true,
                    urlValue: newUrl,
                    newStartUrl: this.getNewStartUrl(newUrl)
                });
            },

            addGenerationUrl: function addGenerationUrl() {
                var spider = this.get('spider');
                var newUrl = this.get('browser.url') || '';
                var newStartUrl = this.get('dispatcher').addGeneratedUrl(spider, newUrl);
                this.get('transitionToFragments')(spider.get('startUrls').indexOf(newStartUrl));
            },

            addFeedUrl: function addFeedUrl() {
                var spider = this.get('spider');
                var newStartUrl = this.get('dispatcher').addFeedUrl(spider, '');
                this.get('transitionToFragments')(spider.get('startUrls').indexOf(newStartUrl));
            },

            removeStartUrl: function removeStartUrl(startUrl) {
                this.get('dispatcher').removeStartUrl(this.get('spider'), startUrl);
                this.get('closeOptions')();
            },

            addSample: function addSample() {
                this.get('dispatcher').addSample(this.get('spider'), /* redirect = */true);
            },

            removeSample: function removeSample(sample) {
                this.get('dispatcher').removeSample(sample);
            },

            saveSample: function saveSample(sample) {
                sample.save();
            }
        }
    });
});
define('portia-ui/components/start-url-options', ['exports', 'ember', 'ember-concurrency'], function (exports, _ember, _emberConcurrency) {
    var computed = _ember['default'].computed;

    var SPIDER_DEBOUNCE = 1000;

    exports['default'] = _ember['default'].Component.extend({
        startUrl: computed('spider.startUrls.[]', 'startUrlId', function () {
            return this.get('spider').get('startUrls').objectAt(this.get('startUrlId'));
        }),

        title: computed.alias('startUrl.optionsTitle'),

        saveSpider: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.next = 2;
                        return (0, _emberConcurrency.timeout)(SPIDER_DEBOUNCE);

                    case 2:
                        this.get('spider').save();

                    case 3:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this);
        })).restartable()
    });
});
define('portia-ui/components/tether-dialog', ['exports', 'ember-modal-dialog/components/tether-dialog'], function (exports, _emberModalDialogComponentsTetherDialog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberModalDialogComponentsTetherDialog['default'];
    }
  });
});
define('portia-ui/components/tool-group', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        uiState: _ember['default'].inject.service(),

        classNames: ['tool-group'],
        classNameBindings: ['collapsed'],

        onClose: false,
        collapsible: true,
        collapsed: false,
        selected: null,

        init: function init() {
            this._super();
            var id = this.get('elementId');
            _ember['default'].mixin(this, {
                selected: _ember['default'].computed.alias('uiState.selectedTools.' + id),
                collapsed: _ember['default'].computed.alias('uiState.collapsedPanels.' + id)
            });
        },

        actions: {
            close: function close() {
                if (this.attrs.onClose) {
                    this.attrs.onClose();
                }
            },
            selectTab: function selectTab(toolId) {
                this.setProperties({
                    selected: toolId,
                    collapsed: false
                });
            },
            toggleCollapsed: function toggleCollapsed() {
                this.toggleProperty('collapsed');
            }
        }
    });
});
define('portia-ui/components/tool-panel', ['exports', 'ember', 'portia-ui/utils/computed'], function (exports, _ember, _portiaUiUtilsComputed) {
    exports['default'] = _ember['default'].Component.extend({
        classNames: ['tool-panel'],
        classNameBindings: ['active::hide'],

        active: (0, _portiaUiUtilsComputed.computedPropertiesEqual)('toolId', 'group.selected')
    });
});
define('portia-ui/components/tool-tab', ['exports', 'ember', 'portia-ui/utils/computed'], function (exports, _ember, _portiaUiUtilsComputed) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: 'li',
        classNameBindings: ['active'],

        active: (0, _portiaUiUtilsComputed.computedPropertiesEqual)('toolId', 'group.selected'),

        didInsertElement: function didInsertElement() {
            var _this = this;

            if (!this.$().prev().length) {
                _ember['default'].run.schedule('afterRender', function () {
                    if (!_this.get('group.selected')) {
                        _this.send('selectTab');
                    }
                });
            }
        },

        actions: {
            selectTab: function selectTab() {
                this.get('group').send('selectTab', this.get('toolId'));
            }
        }
    });
});
define('portia-ui/components/tooltip-container', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        delay: {
            show: 500,
            hide: 0
        },
        placement: 'top',
        text: false,
        tooltipClasses: null,
        tooltipContainer: false,
        tooltipFor: false,
        triggerEvents: 'hover',
        viewport: {
            selector: 'body',
            padding: 0
        },

        init: function init() {
            this._super();
            this.$tooltipElement = null;
        },

        didInsertElement: function didInsertElement() {
            _ember['default'].run.next(this, this.createTooltip);
        },

        willDestroyElement: function willDestroyElement() {
            _ember['default'].run.next(this, this.destroyTooltip);
        },

        createTooltip: function createTooltip() {
            var selector = this.get('tooltipFor');
            var $tooltipElement = this.$tooltipElement = _ember['default'].$('#' + selector);
            $tooltipElement.tooltip({
                /*
                    We pass in an existing element as the template. Bootstrap's
                    tooltip code will happily swallow this and insert it into the
                    DOM. Ember will keep this element updated as data changes.
                 */
                template: _ember['default'].$('[data-tooltip-id="' + this.elementId + '"]').detach(),
                // title is checked for truthiness by bootstrap
                title: true,
                container: this.get('tooltipContainer'),
                delay: this.get('delay'),
                placement: this.get('placement'),
                trigger: this.get('triggerEvents'),
                viewport: this.get('viewport')
            });
        },

        destroyTooltip: function destroyTooltip() {
            this.$tooltipElement.tooltip('destroy');
            this.$tooltipElement = null;
        },

        toggleChanged: _ember['default'].observer('toggleTooltip', function () {
            var e = this.$tooltipElement;
            if (e) {
                var action = this.get('toggleTooltip') ? 'show' : 'hide';
                e.tooltip(action);
            }
        })
    });
});
define('portia-ui/components/tooltip-icon', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        tagName: '',

        actions: {
            onClick: function onClick() {
                var action = this.get('onClick');
                if (action) {
                    action();
                }
            }
        }
    });
});
define('portia-ui/components/train-scrapely-button', ['exports', 'ember'], function (exports, _ember) {
    var computed = _ember['default'].computed;
    exports['default'] = _ember['default'].Component.extend({
        api: _ember['default'].inject.service(),
        notificationManager: _ember['default'].inject.service(),
        hasSpider: computed.bool('spider'),
        isShowingModal: false,

        actions: {
            toggleModal: function toggleModal() {
                this.toggleProperty('isShowingModal');
            }
        }
    });
});
define('portia-ui/components/tree-list-item-row', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        classNames: ['tree-list-item-row'],

        mouseEnter: function mouseEnter() {
            if (this.attrs.onMouseEnter && this.attrs.onMouseEnter.call) {
                var _attrs;

                (_attrs = this.attrs).onMouseEnter.apply(_attrs, arguments);
            }
        },

        mouseLeave: function mouseLeave() {
            if (this.attrs.onMouseLeave && this.attrs.onMouseLeave.call) {
                var _attrs2;

                (_attrs2 = this.attrs).onMouseLeave.apply(_attrs2, arguments);
            }
        }
    });
});
define('portia-ui/components/tree-list-item', ['exports', 'portia-ui/components/animation-container'], function (exports, _portiaUiComponentsAnimationContainer) {
    exports['default'] = _portiaUiComponentsAnimationContainer['default'].extend({
        tagName: 'li',
        classNames: ['tree-list-item'],

        setWidth: false,
        isCentered: false,
        hasChildren: false
    });
});
define('portia-ui/components/tree-list', ['exports', 'ember', 'portia-ui/components/animation-container'], function (exports, _ember, _portiaUiComponentsAnimationContainer) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _portiaUiComponentsAnimationContainer['default'].extend({
        tagName: 'div',
        classNames: ['tree-list'],
        reorderable: false,
        classNameBindings: ['reorderable:reorderable-list'],

        setWidth: false,

        drop: function drop(event) {
            if (this.get('reorderable')) {
                event.preventDefault();
                this.$('.drop-helper').remove();
                var $moved = this.$('.dragging');

                var _getDropTarget = this.getDropTarget(event.originalEvent);

                var _getDropTarget2 = _slicedToArray(_getDropTarget, 2);

                var target = _getDropTarget2[0];
                var after = _getDropTarget2[1];

                // All this are no-ops
                if (after && target === $moved.prev()[0] || !after && target === $moved.next()[0] || target === $moved[0]) {
                    return;
                }
                var originalIndex = $moved.prevAll().length;
                var newIndex = _ember['default'].$(target).prevAll().length + (after ? 1 : 0);
                if (_ember['default'].$(target).prevAll().filter($moved).length) {
                    // If dropping after the original position, remove one to
                    // compensate for the removed element
                    newIndex -= 1;
                }
                this.sendAction('reorder', originalIndex, newIndex);
            }
        },

        dragLeave: function dragLeave(event) {
            if (this.get('reorderable')) {
                event.preventDefault();
                this.$('.drop-helper').remove();
            }
        },

        getDropTarget: function getDropTarget(event) {
            var container = this.$()[0];
            if (event.target === container) {
                return [null, null];
            }

            var lastParent = _ember['default'].$(event.target).parentsUntil(this.$()).get(-1);
            var overTarget = event.target.parentNode === container ? event.target : lastParent;

            var clientRect = overTarget.getBoundingClientRect();
            var targetY = event.clientY - clientRect.top;
            var after = targetY > clientRect.height / 2;
            return [overTarget, after];
        },

        dragOver: function dragOver(event) {
            if (this.get('reorderable')) {
                this.$('.drop-helper').remove();

                var _getDropTarget3 = this.getDropTarget(event.originalEvent);

                var _getDropTarget32 = _slicedToArray(_getDropTarget3, 2);

                var target = _getDropTarget32[0];
                var after = _getDropTarget32[1];

                if (target) {
                    event.preventDefault();
                    var helper = _ember['default'].$('<div/>').addClass('drop-helper');
                    helper[after ? 'insertAfter' : 'insertBefore'](target);
                }
            }
        }

    });
});
define('portia-ui/components/url-bar', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Component.extend({
        browser: _ember['default'].inject.service(),

        tagName: 'form',

        autofocus: false,

        backDisabled: _ember['default'].computed.or('disabled', 'noBackUrl'),
        disabled: _ember['default'].computed.readOnly('browser.disabled'),
        forwardDisabled: _ember['default'].computed.or('disabled', 'noForwardUrl'),
        loading: _ember['default'].computed.readOnly('browser.loading'),
        mode: _ember['default'].computed.readOnly('browser.mode'),
        noBackUrl: _ember['default'].computed.equal('browser.backBuffer.length', 0),
        noForwardUrl: _ember['default'].computed.equal('browser.forwardBuffer.length', 0),
        url: _ember['default'].computed.reads('browser.url'),
        updateUrl: _ember['default'].observer('browser.url', function () {
            this.set('url', this.get('browser.url'));
        }),

        submit: function submit($event) {
            // ignore form's submit event;
            $event.stopPropagation();
            $event.preventDefault();
        },

        actions: {
            back: function back() {
                if (!this.get('disabled')) {
                    this.get('browser').back();
                }
            },

            forward: function forward() {
                if (!this.get('disabled')) {
                    this.get('browser').forward();
                }
            },

            submit: function submit(url) {
                if (!this.get('disabled')) {
                    this.setProperties({
                        'browser.url': url,
                        'browser.baseurl': null
                    });
                }
            }
        }
    });
});
define('portia-ui/controllers/projects/project', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        browser: _ember['default'].inject.service(),

        queryParams: ['url', 'baseurl'],

        url: _ember['default'].computed.alias('browser.url'),
        baseurl: _ember['default'].computed.alias('browser.baseurl'),
        clickHandler: null,

        setClickHandler: function setClickHandler(fn) {
            this.clickHandler = fn;
        },

        clearClickHandler: function clearClickHandler() {
            this.clickHandler = null;
        },

        actions: {
            viewPortClick: function viewPortClick() {
                if (this.clickHandler) {
                    this.clickHandler.apply(this, arguments);
                }
            }
        }
    });
});
define('portia-ui/controllers/projects/project/conflicts', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        projectController: _ember['default'].inject.controller('projects.project'),
        currentFileName: null,

        conflictedKeyPaths: {},

        conflictedFiles: _ember['default'].computed('model', function () {
            return Object.keys(this.get('model')).sort().map(function (name) {
                return {
                    name: name,
                    encodedName: btoa(name)
                };
            });
        })
    });
});
define('portia-ui/controllers/projects/project/conflicts/conflict', ['exports', 'ember', 'portia-ui/utils/types'], function (exports, _ember, _portiaUiUtilsTypes) {
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    function isConflict(obj) {
        return (0, _portiaUiUtilsTypes.isObject)(obj) && '__CONFLICT' in obj;
    }

    /**
     * Sort keys so that indexes in the same array are in descending order.
     * This is the correct order in that patches can be unambiguously applied
     * sortKeys([['a', '1'], ['a', '10'], ['a', '2']]) => [['a', '10'], ['a', '2'], ['a', '1']]
     */
    function sortKeys(keys) {
        return keys.sort(function (a, b) {
            if (a.length === b.length) {
                for (var i = 0, len = a.length; i < len; i++) {
                    if (a[i] !== b[i]) {
                        if (/^\d+$/.test(a[i] + b[i])) {
                            return parseInt(b[i]) - parseInt(a[i]);
                        } else {
                            return a[i] > b[i] ? -1 : 1;
                        }
                    }
                }
            } else {
                return a.length > b.length ? -1 : 1;
            }
        });
    }

    /**
     * Apply a set of patches in the format {'object.path': new_value}
     */
    function applyPatches(obj, values) {
        var keys = sortKeys(Object.keys(values).map(function (key) {
            return key.split('.');
        }));
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var key = _step.value;

                patch(obj, key, values[key.join('.')]);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                    _iterator['return']();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return obj;
    }

    /**
     * Set object's specified path to value
     */
    function patch(obj, path, value) {
        if ((0, _portiaUiUtilsTypes.isArray)(obj)) {
            var idx = parseInt(path[0]) + 1;
            for (var i = 0, len = obj.length; i < len; i++) {
                if (isConflict(obj[i])) {
                    idx--;
                    if (idx === 0) {
                        obj.splice.apply(obj, [i, 1].concat(_toConsumableArray(value)));
                        return;
                    }
                }
            }
        } else if ((0, _portiaUiUtilsTypes.isObject)(obj)) {
            if (path.length === 1) {
                obj[path] = value;
            } else {
                patch(obj[path[0]], path.slice(1), value);
            }
            return;
        }
        throw new Error("Could not patch object");
    }

    exports['default'] = _ember['default'].Controller.extend({
        projectController: _ember['default'].inject.controller('projects.project'),

        init: function init() {
            this.set('pendingPaths', []);
            this.set('resolvedValues', {}); // This is saved in flat format {'a.b.c.0': value}
            this._super();
        },

        getResolvedTree: function getResolvedTree() {
            var content = this.get('model.contents');
            // JSON parse + stringify to deep copy because neither
            // Ember.copy or $.extend({}, true) worked
            content = JSON.parse(JSON.stringify(content));
            applyPatches(content, this.get('resolvedValues'));
            return content;
        },

        haveConflicts: _ember['default'].computed('pendingPaths.[]', function () {
            return this.get('pendingPaths').length > 0;
        }),

        actions: {
            updateConflict: function updateConflict(path, resolved, value) {
                if (resolved) {
                    this.get('pendingPaths').removeObject(path);
                    this.get('resolvedValues')[path] = value;
                } else if (!this.get('pendingPaths').contains(path)) {
                    this.get('pendingPaths').pushObject(path);
                }
            },

            saveFile: function saveFile() {
                var _this = this;

                var project = this.get('projectController.model.id');
                var fileName = this.get('model.file');
                var content = this.getResolvedTree();
                var url = '/projects/' + project + '/spec/' + fileName.replace(/\.json$/, '');
                $.post(url, JSON.stringify(content)).then(function () {
                    _this.transitionTo('projects.project.conflicts');
                });
            }
        }
    });
});
define('portia-ui/controllers/projects/project/schema/field/options', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            closeOptions: function closeOptions() {
                this.send('close');
            }
        }
    });
});
define('portia-ui/controllers/projects/project/spider', ['exports', 'ember', 'portia-ui/utils/colors'], function (exports, _ember, _portiaUiUtilsColors) {

    function filterLinkElements(filterFn) {
        return _ember['default'].computed('allLinkElements', 'extractedItems.links', function () {
            var linkElements = this.get('allLinkElements');
            var followed = this.getWithDefault('extractedItems.links', {});
            var filteredElements = [];
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = linkElements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var element = _step.value;

                    var url = URI(element.href).fragment('').toString();
                    if (filterFn(url, followed)) {
                        filteredElements.push(element);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            return filteredElements;
        });
    }

    function mapOverlayElements(elementsProperty, color) {
        return _ember['default'].computed.map(elementsProperty, function (element) {
            return {
                guid: _ember['default'].guidFor(element),
                element: element,
                color: color
            };
        });
    }

    exports['default'] = _ember['default'].Controller.extend({
        extractedItems: _ember['default'].inject.service(),
        selectorMatcher: _ember['default'].inject.service(),
        webSocket: _ember['default'].inject.service(),

        // only a tags with a non-empty href attribute
        linkSelector: 'a[href]:not([href=""]):not([href^="javascript:"])',
        allLinkElements: [],

        showExtractedItems: _ember['default'].computed.bool('extractedItems.items.length'),

        followedLinkElements: filterLinkElements(function (url, followed) {
            return followed[url] === 'raw';
        }),
        jsLinkElements: filterLinkElements(function (url, followed) {
            return followed[url] === 'js';
        }),
        ignoredLinkElements: filterLinkElements(function (url, followed) {
            return !followed[url];
        }),
        followedLinkOverlayElements: mapOverlayElements('followedLinkElements', _portiaUiUtilsColors.NAMED_COLORS.green),
        jsLinkOverlayElements: mapOverlayElements('jsLinkElements', _portiaUiUtilsColors.NAMED_COLORS.blue),
        ignoredLinkOverlayElements: mapOverlayElements('ignoredLinkElements', _portiaUiUtilsColors.NAMED_COLORS.red),
        linkOverlayElements: _ember['default'].computed('followedLinkOverlayElements', 'jsLinkOverlayElements', 'ignoredLinkOverlayElements', function () {
            var followed = this.get('followedLinkOverlayElements');
            var js = this.get('jsLinkOverlayElements');
            var ignored = this.get('ignoredLinkOverlayElements');
            return [].concat(followed).concat(js).concat(ignored);
        }),

        init: function init() {
            var ws = this.get('webSocket');
            ws.addCommand('metadata', this, this.msgMetadata);
            ws.addCommand('update_spider', this, this.msgMetadata);
        },

        activate: function activate() {
            this.get('selectorMatcher').register(this.linkSelector, this, this.updateLinkElements);
        },

        deactivate: function deactivate() {
            this.get('selectorMatcher').unRegister(this.linkSelector, this, this.updateLinkElements);
        },

        updateLinkElements: function updateLinkElements(elements) {
            this.set('allLinkElements', elements);
        }
    });
});
define('portia-ui/controllers/projects/project/spider/currency-options', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            closeOptions: function closeOptions() {
                this.send('close');
            }
        }
    });
});
define('portia-ui/controllers/projects/project/spider/language-options', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            closeOptions: function closeOptions() {
                this.send('close');
            }
        }
    });
});
define('portia-ui/controllers/projects/project/spider/link-options', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            closeOptions: function closeOptions() {
                this.send('close');
            }
        }
    });
});
define('portia-ui/controllers/projects/project/spider/options', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            closeOptions: function closeOptions() {
                this.send('close');
            }
        }
    });
});
define('portia-ui/controllers/projects/project/spider/sample/data', ['exports', 'ember', 'ember-concurrency', 'portia-ui/utils/colors', 'portia-ui/utils/selectors'], function (exports, _ember, _emberConcurrency, _portiaUiUtilsColors, _portiaUiUtilsSelectors) {
    exports['default'] = _ember['default'].Controller.extend({
        browser: _ember['default'].inject.service(),
        dispatcher: _ember['default'].inject.service(),
        uiState: _ember['default'].inject.service(),

        selectionModeIcons: {
            select: 'tool-select',
            add: 'tool-add',
            remove: 'tool-remove',
            edit: 'tool-multiple'
        },
        selectionModeText: {
            select: 'Select an existing annotation',
            add: 'Add a new annotation',
            remove: 'Remove an annotation',
            edit: 'Add/remove extra elements from an existing annotation'
        },
        selectionModeIds: {
            select: 'tool-select-button',
            add: 'tool-add-button',
            remove: 'tool-remove-button',
            edit: 'tool-multiple-button'
        },

        cssEnabled: _ember['default'].computed.readOnly('browser.cssEnabled'),
        magicToolActive: _ember['default'].computed.alias('uiState.selectedTools.magicToolActive'),
        hoveredElement: _ember['default'].computed.readOnly('uiState.viewPort.hoveredElement'),
        originalSelectedElement: _ember['default'].computed.alias('uiState.viewPort.originalSelectedElement'),
        sample: _ember['default'].computed.readOnly('model'),
        selectedModel: _ember['default'].computed.alias('uiState.viewPort.selectedModel'),
        selectionMode: _ember['default'].computed.alias('uiState.selectedTools.selectionMode'),

        hoveredModels: _ember['default'].computed('uiState.viewPort.hoveredModels', 'hoveredElement', 'sample.dataStructure.annotations', {
            get: function get(key) {
                var hoveredModels = this.get('uiState.viewPort.hoveredModels');
                if (hoveredModels !== this._hoveredModels) {
                    return this.set(key, hoveredModels);
                }
                var hoveredElement = this.get('hoveredElement');
                var models = undefined;
                if (hoveredElement) {
                    var annotations = this.get('sample.dataStructure.annotations');
                    models = annotations && annotations.get(_ember['default'].guidFor(hoveredElement));
                }
                models = (models || []).filterBy('constructor.modelName', 'annotation');
                return this.set(key, models);
            },

            set: function set(key, value) {
                this._hoveredModels = value;
                return this.set('uiState.viewPort.hoveredModels', value);
            }
        }),

        selectedModelElements: _ember['default'].computed('selectedModel.elements', function () {
            return this.get('selectedModel.elements') || [];
        }),

        selectedElement: _ember['default'].computed('uiState.viewPort.selectedElement', 'selectedModelElements.[]', {
            get: function get() {
                var selectedElement = this.get('uiState.viewPort.selectedElement');
                var selectedModelElements = this.get('selectedModelElements');
                if (selectedElement && selectedModelElements.includes(selectedElement)) {
                    return selectedElement;
                }
                return this.set('selectedElement', selectedModelElements[0]);
            },

            set: function set(key, value) {
                return this.set('uiState.viewPort.selectedElement', value);
            }
        }),

        activeSelectionMode: _ember['default'].computed('selectionMode', 'magicToolActive', 'hoveredElement', 'hoveredModels.[]', 'selectedElement', 'selectedModel', 'selectedModelElements.length', 'generalizableModel', function () {
            var selectedMode = this.get('selectionMode');
            var magicToolActive = this.get('magicToolActive');

            if (selectedMode) {
                return selectedMode;
            } else if (magicToolActive) {
                var hoveredElement = this.get('hoveredElement');
                var hoveredModels = this.getWithDefault('hoveredModels', []);
                var selectedModel = this.get('selectedModel');
                if (hoveredModels.length) {
                    if (hoveredModels.includes(selectedModel)) {
                        if (this.get('selectedModelElements.length') === 1) {
                            return 'remove';
                        }
                        return 'edit';
                    } else {
                        return 'select';
                    }
                } else if (hoveredElement) {
                    if (this.get('generalizableModel') || selectedModel && this.get('selectedModelElements.length') === 0) {
                        return 'edit';
                    }
                    return 'add';
                }
                return 'select';
            }
        }),
        annotationColors: _ember['default'].computed('sample.orderedAnnotations.length', 'activeSelectionMode', 'hoveredElement', function () {
            var annotations = this.getWithDefault('sample.orderedAnnotations.length', 0);
            if (this.get('activeSelectionMode') === 'add' && this.get('hoveredElement')) {
                return (0, _portiaUiUtilsColors.getColors)(annotations + 1);
            }
            if (annotations) {
                return (0, _portiaUiUtilsColors.getColors)(annotations);
            }
            return [];
        }),
        generalizableModel: _ember['default'].computed('selectionMode', 'selectedModel', 'hoveredElement', 'sample.orderedChildren.@each.elements', function () {
            var isEditMode = this.get('selectionMode') === 'edit';
            var selectedModel = this.get('selectedModel');
            var hoveredElement = this.get('hoveredElement');
            if (!hoveredElement) {
                return;
            }

            // if user has manually chosen the edit tool, and selected an annotation, use that ...
            if (selectedModel && isEditMode) {
                return selectedModel;
            }

            // ... otherwise find best match
            var annotations = this.get('sample.orderedAnnotations');
            if (annotations.length) {
                var _ret = (function () {
                    var annotationsToMatch = annotations.slice();
                    // if an annotation is selected prefer it
                    // add it to the start of the list, sorting preserves order
                    if (selectedModel) {
                        annotationsToMatch.removeObject(selectedModel);
                        annotationsToMatch.unshift(selectedModel);
                    }
                    var hoveredElementPath = (0, _portiaUiUtilsSelectors.elementPath)(hoveredElement);
                    var possibilities = annotationsToMatch.map(function (annotation) {
                        var selectorGenerator = _portiaUiUtilsSelectors.BaseSelectorGenerator.create({
                            elements: annotation.get('elements')
                        });
                        var distance = selectorGenerator.generalizationDistance(hoveredElement);
                        if (distance < Infinity && !isEditMode) {
                            // reject annotations with elements that share a container with the
                            // hovered element
                            var annotationPaths = annotation.get('elements').map(_portiaUiUtilsSelectors.elementPath);
                            var containerElements = annotation.get('parent.elements');
                            var _iteratorNormalCompletion = true;
                            var _didIteratorError = false;
                            var _iteratorError = undefined;

                            try {
                                container: for (var _iterator = containerElements[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    var containerElement = _step.value;

                                    var containerPath = (0, _portiaUiUtilsSelectors.elementPath)(containerElement);
                                    var depth = containerPath.length - 1;
                                    var _iteratorNormalCompletion2 = true;
                                    var _didIteratorError2 = false;
                                    var _iteratorError2 = undefined;

                                    try {
                                        for (var _iterator2 = annotationPaths[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                            var annotationPath = _step2.value;

                                            if (containerElement === annotationPath[depth] && containerElement === hoveredElementPath[depth]) {
                                                distance = Infinity;
                                                break container;
                                            }
                                        }
                                    } catch (err) {
                                        _didIteratorError2 = true;
                                        _iteratorError2 = err;
                                    } finally {
                                        try {
                                            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                                                _iterator2['return']();
                                            }
                                        } finally {
                                            if (_didIteratorError2) {
                                                throw _iteratorError2;
                                            }
                                        }
                                    }
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion && _iterator['return']) {
                                        _iterator['return']();
                                    }
                                } finally {
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }
                        }
                        return {
                            annotation: annotation,
                            distance: distance
                        };
                    }).sortBy('distance');
                    var _possibilities$0 = possibilities[0];
                    var annotation = _possibilities$0.annotation;
                    var distance = _possibilities$0.distance;

                    // if user has manually chosen the edit tool return the best match, otherwise use
                    // a distance cutoff
                    if (isEditMode || distance < (selectedModel ? 4 : 2)) {
                        return {
                            v: annotation
                        };
                    }
                })();

                if (typeof _ret === 'object') return _ret.v;
            }
        }),
        hoverOverlayColor: _ember['default'].computed('showHoverOverlay', 'annotationColors.length', 'hoveredModels.firstObject.orderedIndex', 'generalizableModel.orderedIndex', 'selectedModel.orderedIndex', 'activeSelectionMode', function () {
            if (this.get('showHoverOverlay')) {
                var colors = this.getWithDefault('annotationColors', []);
                var activeSelectionMode = this.get('activeSelectionMode');
                if (activeSelectionMode === 'add') {
                    return colors.get('lastObject');
                } else if (activeSelectionMode === 'select' || activeSelectionMode === 'remove') {
                    return colors[this.get('hoveredModels.firstObject.orderedIndex')];
                } else if (activeSelectionMode === 'edit') {
                    return colors[this.get('generalizableModel.orderedIndex')] || colors[this.get('selectedModel.orderedIndex')];
                }
            }
        }),
        showHoverOverlay: _ember['default'].computed('hoveredElement', 'hoveredModels.[]', 'generalizableModel', 'selectedModel', 'activeSelectionMode', function () {
            var activeSelectionMode = this.get('activeSelectionMode');
            var hoveredElement = this.get('hoveredElement');
            var hoveredModels = this.get('hoveredModels');

            if (hoveredElement) {
                if (activeSelectionMode === 'add') {
                    return true;
                } else if ((activeSelectionMode === 'select' || activeSelectionMode === 'remove') && hoveredModels.length) {
                    return true;
                } else if (activeSelectionMode === 'edit' && (this.get('generalizableModel') || this.get('selectedModel'))) {
                    return true;
                }
            }
            return false;
        }),

        _selectElement: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            var dispatcher, magicToolActive, selectionMode, hoveredElement, hoveredModels, selectedModel, model, annotation, field, matchingModel;
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.next = 2;
                        return (0, _emberConcurrency.timeout)(1000);

                    case 2:
                        dispatcher = this.get('dispatcher');
                        magicToolActive = this.get('magicToolActive');
                        selectionMode = this.get('activeSelectionMode');
                        hoveredElement = this.get('hoveredElement');
                        hoveredModels = this.get('hoveredModels');
                        selectedModel = this.get('selectedModel');
                        context$1$0.t0 = selectionMode;
                        context$1$0.next = context$1$0.t0 === 'select' ? 11 : context$1$0.t0 === 'add' ? 13 : context$1$0.t0 === 'remove' ? 15 : context$1$0.t0 === 'edit' ? 20 : 23;
                        break;

                    case 11:
                        if (hoveredModels.length) {
                            model = hoveredModels[0];

                            dispatcher.selectAnnotationElement(model, hoveredElement, /* redirect = */true);
                        } else {
                            dispatcher.clearSelection();
                        }
                        return context$1$0.abrupt('break', 23);

                    case 13:
                        if (hoveredElement) {
                            dispatcher.addAnnotation(
                            /* auto item */null, hoveredElement, undefined, /* redirect = */true);
                        } else {
                            dispatcher.clearSelection();
                        }
                        return context$1$0.abrupt('break', 23);

                    case 15:
                        annotation = this.get('uiState.models.annotation');
                        field = annotation.get('field.content');

                        annotation.set('field', field);
                        annotation.save().then(function () {
                            if (selectedModel) {
                                dispatcher.removeAnnotation(selectedModel);
                            } else if (hoveredModels.length) {
                                dispatcher.removeAnnotation(hoveredModels[0]);
                            } else {
                                dispatcher.clearSelection();
                            }
                        });
                        return context$1$0.abrupt('break', 23);

                    case 20:
                        matchingModel = this.get('generalizableModel') || selectedModel;

                        if (!hoveredElement) {
                            dispatcher.clearSelection();
                        } else if (matchingModel && !hoveredModels.includes(matchingModel)) {
                            dispatcher.addElementToAnnotation(matchingModel, hoveredElement);
                        } else if (hoveredModels.length) {
                            model = undefined;

                            if (selectedModel) {
                                model = selectedModel;
                            } else {
                                model = hoveredModels.find(function (model) {
                                    return (model.get('elements') || []).length > 1;
                                }) || hoveredModels[0];
                            }
                            dispatcher.removeElementFromAnnotation(model, hoveredElement);
                        }
                        return context$1$0.abrupt('break', 23);

                    case 23:

                        if (magicToolActive) {
                            this.set('selectionMode', null);
                        }

                    case 24:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this);
        })).drop(),

        actions: {
            toggleCSS: function toggleCSS() {
                var browser = this.get('browser');
                if (this.get('cssEnabled')) {
                    browser.disableCSS();
                } else {
                    browser.enableCSS();
                }
            },

            toggleMagicTool: function toggleMagicTool() {
                var magicToolActive = this.get('magicToolActive');
                var selectionMode = this.get('selectionMode');
                if (magicToolActive) {
                    this.set('magicToolActive', false);
                    if (!selectionMode) {
                        this.set('selectionMode', 'add');
                    }
                } else {
                    this.setProperties({
                        magicToolActive: true,
                        selectionMode: null
                    });
                }
            },

            selectElement: function selectElement() {
                this.get('_selectElement').perform();
            }
        }
    });
});
define('portia-ui/controllers/projects/project/spider/sample/data/annotation/options', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Controller.extend({
        actions: {
            closeOptions: function closeOptions() {
                this.send('close');
            }
        }
    });
});
define('portia-ui/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _emberTruthHelpersHelpersAnd) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersAnd.andHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersAnd.andHelper);
  }

  exports['default'] = forExport;
});
define('portia-ui/helpers/array-get', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Helper.extend({
        compute: function compute(params /*, hash*/) {
            this.setProperties({
                obj: params[0],
                index: params[1]
            });

            return this.get('content');
        },

        obj: null,
        index: null,
        content: _ember['default'].computed('obj.[]', 'index', function () {
            return this.get('obj').get(this.get('index'));
        }),

        contentDidChange: _ember['default'].observer('content', function () {
            this.recompute();
        })
    });
});
define('portia-ui/helpers/attribute-annotation', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _ember['default'].Helper.extend({
        compute: function compute(_ref) {
            var _ref2 = _slicedToArray(_ref, 2);

            var annotations = _ref2[0];
            var attribute = _ref2[1];

            this.setProperties({
                annotations: annotations,
                attribute: attribute
            });

            return this.get('content');
        },

        annotations: null,
        attribute: null,
        content: _ember['default'].computed('annotations.[]', 'attribute', function () {
            var attribute = this.get('attribute');
            return this.getWithDefault('annotations', []).find(function (annotation) {
                return annotation.getWithDefault('attribute', null) === attribute;
            }) || {};
        }),

        contentDidChange: _ember['default'].observer('content', function () {
            this.recompute();
        })
    });
});
define('portia-ui/helpers/cancel-all', ['exports', 'ember', 'ember-concurrency/-helpers'], function (exports, _ember, _emberConcurrencyHelpers) {
  exports.cancelHelper = cancelHelper;

  function cancelHelper(args) {
    var cancelable = args[0];
    if (!cancelable || typeof cancelable.cancelAll !== 'function') {
      _ember['default'].assert('The first argument passed to the `cancel-all` helper should be a Task or TaskGroup (without quotes); you passed ' + cancelable, false);
    }

    return (0, _emberConcurrencyHelpers.taskHelperClosure)('cancelAll', args);
  }

  exports['default'] = _ember['default'].Helper.helper(cancelHelper);
});
define('portia-ui/helpers/chain-actions', ['exports', 'ember'], function (exports, _ember) {
    exports.chainActions = chainActions;

    function chainActions(params /*, hash*/) {
        return function () {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = params[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var action = _step.value;

                    if (action.call) {
                        action();
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        };
    }

    exports['default'] = _ember['default'].Helper.helper(chainActions);
});
define('portia-ui/helpers/changeset', ['exports', 'ember-changeset-validations/helpers/changeset'], function (exports, _emberChangesetValidationsHelpersChangeset) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberChangesetValidationsHelpersChangeset['default'];
    }
  });
  Object.defineProperty(exports, 'changeset', {
    enumerable: true,
    get: function get() {
      return _emberChangesetValidationsHelpersChangeset.changeset;
    }
  });
});
define('portia-ui/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _emberTruthHelpersHelpersEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersEqual.equalHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersEqual.equalHelper);
  }

  exports['default'] = forExport;
});
define('portia-ui/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _emberTruthHelpersHelpersGt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGt.gtHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGt.gtHelper);
  }

  exports['default'] = forExport;
});
define('portia-ui/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _emberTruthHelpersHelpersGte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGte.gteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGte.gteHelper);
  }

  exports['default'] = forExport;
});
define('portia-ui/helpers/guid', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.guid = guid;

    function guid(_ref /*, hash*/) {
        var _ref2 = _slicedToArray(_ref, 1);

        var obj = _ref2[0];

        return _ember['default'].guidFor(obj);
    }

    exports['default'] = _ember['default'].Helper.helper(guid);
});
define('portia-ui/helpers/includes', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.includes = includes;

    function includes(_ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var list = _ref2[0];
        var value = _ref2[1];

        return list && list.includes && list.includes(value);
    }

    exports['default'] = _ember['default'].Helper.helper(includes);
});
define('portia-ui/helpers/indexed-object', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.indexedObject = indexedObject;

    function indexedObject(_ref /*, hash*/) {
        var _ref2 = _slicedToArray(_ref, 1);

        var param = _ref2[0];

        var indexed = {},
            i = 0;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = Object.keys(param)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var key = _step.value;

                indexed[key] = {
                    index: i,
                    value: param[key]
                };
                i += 1;
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                    _iterator['return']();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return indexed;
    }

    exports['default'] = _ember['default'].Helper.helper(indexedObject);
});
define('portia-ui/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _emberTruthHelpersHelpersIsArray) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  }

  exports['default'] = forExport;
});
define('portia-ui/helpers/is-empty-object', ['exports', 'ember', 'portia-ui/helpers/is-object'], function (exports, _ember, _portiaUiHelpersIsObject) {
    exports.isEmptyObject = isEmptyObject;

    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    function isEmptyObject(params) {
        return (0, _portiaUiHelpersIsObject.isObject)(params) && !Object.keys.apply(Object, _toConsumableArray(params)).length;
    }

    exports['default'] = _ember['default'].Helper.helper(isEmptyObject);
});
define('portia-ui/helpers/is-equal', ['exports', 'ember-truth-helpers/helpers/is-equal'], function (exports, _emberTruthHelpersHelpersIsEqual) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberTruthHelpersHelpersIsEqual['default'];
    }
  });
  Object.defineProperty(exports, 'isEqual', {
    enumerable: true,
    get: function get() {
      return _emberTruthHelpersHelpersIsEqual.isEqual;
    }
  });
});
define('portia-ui/helpers/is-object-or-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array', 'portia-ui/helpers/is-object'], function (exports, _ember, _emberTruthHelpersHelpersIsArray, _portiaUiHelpersIsObject) {
    exports.isObjectOrArray = isObjectOrArray;

    function isObjectOrArray(params) {
        return (0, _portiaUiHelpersIsObject.isObject)(params) || (0, _emberTruthHelpersHelpersIsArray.isArrayHelper)(params);
    }

    exports['default'] = _ember['default'].Helper.helper(isObjectOrArray);
});
define('portia-ui/helpers/is-object', ['exports', 'ember', 'portia-ui/utils/types'], function (exports, _ember, _portiaUiUtilsTypes) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.isObject = isObject;

    function isObject(_ref) {
        var _ref2 = _slicedToArray(_ref, 1);

        var object = _ref2[0];

        return (0, _portiaUiUtilsTypes.toType)(object) === 'object';
    }

    exports['default'] = _ember['default'].Helper.helper(isObject);
});
define('portia-ui/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _emberTruthHelpersHelpersLt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLt.ltHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLt.ltHelper);
  }

  exports['default'] = forExport;
});
define('portia-ui/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersHelpersLte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLte.lteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = forExport;
});
define('portia-ui/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _emberTruthHelpersHelpersNotEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  }

  exports['default'] = forExport;
});
define('portia-ui/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _emberTruthHelpersHelpersNot) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNot.notHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNot.notHelper);
  }

  exports['default'] = forExport;
});
define('portia-ui/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _emberTruthHelpersHelpersOr) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersOr.orHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersOr.orHelper);
  }

  exports['default'] = forExport;
});
define('portia-ui/helpers/perform', ['exports', 'ember', 'ember-concurrency/-task-property', 'ember-concurrency/-helpers'], function (exports, _ember, _emberConcurrencyTaskProperty, _emberConcurrencyHelpers) {
  exports.performHelper = performHelper;

  function performHelper(args, hash) {
    var task = args[0];
    if (!(task instanceof _emberConcurrencyTaskProperty.Task)) {
      _ember['default'].assert('The first argument passed to the `perform` helper should be a Task object (without quotes); you passed ' + task, false);
    }

    return (0, _emberConcurrencyHelpers.taskHelperClosure)('perform', args, hash);
  }

  exports['default'] = _ember['default'].Helper.helper(performHelper);
});
define('portia-ui/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('portia-ui/helpers/route-action', ['exports', 'ember-route-action-helper/helpers/route-action'], function (exports, _emberRouteActionHelperHelpersRouteAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRouteActionHelperHelpersRouteAction['default'];
    }
  });
});
define('portia-ui/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('portia-ui/helpers/task', ['exports', 'ember'], function (exports, _ember) {
  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

  function taskHelper(_ref) {
    var _ref2 = _toArray(_ref);

    var task = _ref2[0];

    var args = _ref2.slice(1);

    return task._curry.apply(task, _toConsumableArray(args));
  }

  exports['default'] = _ember['default'].Helper.helper(taskHelper);
});
define('portia-ui/helpers/xor', ['exports', 'ember', 'ember-truth-helpers/helpers/xor'], function (exports, _ember, _emberTruthHelpersHelpersXor) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersXor.xorHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersXor.xorHelper);
  }

  exports['default'] = forExport;
});
define('portia-ui/initializers/add-modals-container', ['exports', 'ember-modal-dialog/initializers/add-modals-container'], function (exports, _emberModalDialogInitializersAddModalsContainer) {
  exports['default'] = {
    name: 'add-modals-container',
    initialize: _emberModalDialogInitializersAddModalsContainer['default']
  };
});
define('portia-ui/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'portia-ui/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _portiaUiConfigEnvironment) {
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_portiaUiConfigEnvironment['default'].APP.name, _portiaUiConfigEnvironment['default'].APP.version)
  };
});
define('portia-ui/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('portia-ui/initializers/data-adapter', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `data-adapter` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'data-adapter',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('portia-ui/initializers/ember-concurrency', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
  exports['default'] = {
    name: 'ember-concurrency',
    initialize: function initialize() {}
  };
});
// This initializer exists only to make sure that the following
// imports happen before the app boots.
define('portia-ui/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data/-private/core'], function (exports, _emberDataSetupContainer, _emberDataPrivateCore) {

  /*
  
    This code initializes Ember-Data onto an Ember application.
  
    If an Ember.js developer defines a subclass of DS.Store on their application,
    as `App.StoreService` (or via a module system that resolves to `service:store`)
    this code will automatically instantiate it and make it available on the
    router.
  
    Additionally, after an application's controllers have been injected, they will
    each have the store made available to them.
  
    For example, imagine an Ember.js application with the following classes:
  
    App.StoreService = DS.Store.extend({
      adapter: 'custom'
    });
  
    App.PostsController = Ember.Controller.extend({
      // ...
    });
  
    When the application is initialized, `App.ApplicationStore` will automatically be
    instantiated, and the instance of `App.PostsController` will have its `store`
    property set to that instance.
  
    Note that this code will only be run if the `ember-application` package is
    loaded. If Ember Data is being used in an environment other than a
    typical application (e.g., node.js where only `ember-runtime` is available),
    this code will be ignored.
  */

  exports['default'] = {
    name: 'ember-data',
    initialize: _emberDataSetupContainer['default']
  };
});
define('portia-ui/initializers/export-application-global', ['exports', 'ember', 'portia-ui/config/environment'], function (exports, _ember, _portiaUiConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_portiaUiConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var theGlobal;
      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _portiaUiConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_portiaUiConfigEnvironment['default'].modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('portia-ui/initializers/injectStore', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `injectStore` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'injectStore',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('portia-ui/initializers/local-storage-adapter', ['exports', 'ember-local-storage/initializers/local-storage-adapter'], function (exports, _emberLocalStorageInitializersLocalStorageAdapter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLocalStorageInitializersLocalStorageAdapter['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberLocalStorageInitializersLocalStorageAdapter.initialize;
    }
  });
});
define('portia-ui/initializers/raf-polyfill', ['exports', 'ember-run-raf/initializers/raf-polyfill'], function (exports, _emberRunRafInitializersRafPolyfill) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRunRafInitializersRafPolyfill['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberRunRafInitializersRafPolyfill.initialize;
    }
  });
});
define('portia-ui/initializers/store', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `store` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'store',
    after: 'ember-data',
    initialize: function initialize() {}
  };
});
define('portia-ui/initializers/transforms', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `transforms` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'transforms',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('portia-ui/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersUtilsRegisterHelper, _emberTruthHelpersHelpersAnd, _emberTruthHelpersHelpersOr, _emberTruthHelpersHelpersEqual, _emberTruthHelpersHelpersNot, _emberTruthHelpersHelpersIsArray, _emberTruthHelpersHelpersNotEqual, _emberTruthHelpersHelpersGt, _emberTruthHelpersHelpersGte, _emberTruthHelpersHelpersLt, _emberTruthHelpersHelpersLte) {
  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('and', _emberTruthHelpersHelpersAnd.andHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('or', _emberTruthHelpersHelpersOr.orHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('eq', _emberTruthHelpersHelpersEqual.equalHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not', _emberTruthHelpersHelpersNot.notHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('is-array', _emberTruthHelpersHelpersIsArray.isArrayHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not-eq', _emberTruthHelpersHelpersNotEqual.notEqualHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gt', _emberTruthHelpersHelpersGt.gtHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gte', _emberTruthHelpersHelpersGte.gteHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lt', _emberTruthHelpersHelpersLt.ltHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lte', _emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define('portia-ui/initializers/ui-state', ['exports'], function (exports) {
    exports.initialize = initialize;

    function initialize(application) {
        application.inject('service:ui-state', 'router', 'router:main');
        application.inject('service:ui-state', 'projectRoute', 'route:projects/project');
        application.inject('service:ui-state', 'spiderRoute', 'route:projects/project/spider');
        application.inject('service:ui-state', 'sampleRoute', 'route:projects/project/spider/sample');
        application.inject('service:ui-state', 'dataRoute', 'route:projects/project/spider/sample/data');
        application.inject('service:ui-state', 'itemRoute', 'route:projects/project/spider/sample/data/item');
        application.inject('service:ui-state', 'annotationRoute', 'route:projects/project/spider/sample/data/annotation');
        application.inject('service:ui-state', 'schemaRoute', 'route:projects/project/schema');
        application.inject('service:ui-state', 'fieldRoute', 'route:projects/project/schema/field');
    }

    exports['default'] = {
        name: 'ui-state',
        initialize: initialize
    };
});
define("portia-ui/instance-initializers/ember-data", ["exports", "ember-data/-private/instance-initializers/initialize-store-service"], function (exports, _emberDataPrivateInstanceInitializersInitializeStoreService) {
  exports["default"] = {
    name: "ember-data",
    initialize: _emberDataPrivateInstanceInitializersInitializeStoreService["default"]
  };
});
define('portia-ui/instance-initializers/error-handler', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
    exports.initialize = initialize;

    function logErrorStack(e) {
        var text = e.toString();
        var stack = e.stack;
        if (stack) {
            if (!stack.startsWith(text)) {
                stack = text + '\n' + stack;
            }
            text = stack;
        }
        _ember['default'].Logger.warn(text);
    }

    function initialize(applicationInstance) {
        var notificationManager = applicationInstance.lookup('service:notification-manager');
        var loggedErrors = new Set();

        function notifyError(err) {
            var logged = false;
            if (window.NREUM) {
                window.NREUM.noticeError(err);
                logged = true;
            }
            if (window.Raven) {
                window.Raven.captureException(err);
                logged = true;
            }

            var instructions = logged ? "Our developers have already been notified." : "Please notify the developers. Details have been logged to the console.";

            if (err instanceof _emberData['default'].AdapterError) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = err.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var error = _step.value;

                        if (error.id && loggedErrors.has(error.id)) {
                            continue;
                        }
                        _ember['default'].Logger.warn('AdapterError: ' + error.title + '\n' + error.detail);
                        notificationManager.add({
                            title: error.title || 'Server error',
                            message: 'An error occurred while communicating with the server. ' + error.status >= 500 ? instructions : error.detail,
                            type: +error.status >= 500 ? 'danger' : 'warning'
                        });
                        if (error.id) {
                            loggedErrors.add(error.id);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator['return']) {
                            _iterator['return']();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            } else {
                logErrorStack(err);
                notificationManager.add({
                    title: err.title || 'Unexpected error',
                    message: 'An unexpected error has occurred. ' + instructions,
                    type: 'danger'
                });
            }
        }

        _ember['default'].onerror = notifyError;
    }

    exports['default'] = {
        name: 'error-handler',
        initialize: initialize
    };
});
define('portia-ui/mixins/options-route', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Mixin.create({
        uiState: _ember['default'].inject.service(),

        activate: function activate() {
            this.set('uiState.slideMain', true);
        },

        deactivate: function deactivate() {
            this.set('uiState.slideMain', false);
        }
    });
});
define('portia-ui/mixins/save-spider-mixin', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Mixin.create({
        webSocket: _ember['default'].inject.service(),

        saveSpider: function saveSpider() {
            var _this = this;

            var savePromise = this.get('spider').save();
            savePromise.then(function () {
                return _this.get('webSocket').send({
                    'spider': _this.get('spider.id'),
                    'project': _this.get('spider.project.id'),
                    '_command': 'update_spider'
                });
            });
            return savePromise;
        }
    });
});
define('portia-ui/models/annotation', ['exports', 'ember', 'ember-data', 'portia-ui/models/base-annotation', 'portia-ui/utils/selectors'], function (exports, _ember, _emberData, _portiaUiModelsBaseAnnotation, _portiaUiUtilsSelectors) {
    exports['default'] = _portiaUiModelsBaseAnnotation['default'].extend({
        attribute: _emberData['default'].attr('string', {
            defaultValue: 'content'
        }),
        required: _emberData['default'].attr('boolean', {
            defaultValue: false
        }),
        repeated: _emberData['default'].attr('boolean', {
            defaultValue: false
        }),
        selectionMode: _emberData['default'].attr('string', {
            defaultValue: 'auto'
        }),
        selector: _emberData['default'].attr('string'),
        xpath: _emberData['default'].attr('string'),
        acceptSelectors: _emberData['default'].attr('array', {
            defaultValue: function defaultValue() {
                return [];
            }
        }),
        rejectSelectors: _emberData['default'].attr('array', {
            defaultValue: function defaultValue() {
                return [];
            }
        }),
        preText: _emberData['default'].attr('string'),
        postText: _emberData['default'].attr('string'),

        field: _emberData['default'].belongsTo(),
        extractors: _emberData['default'].hasMany(),

        name: _ember['default'].computed.readOnly('field.name'),
        type: _ember['default'].computed.readOnly('field.type'),
        ownerSample: _ember['default'].computed.readOnly('parent.ownerSample'),

        orderedIndex: _ember['default'].computed('ownerSample.orderedAnnotations', function () {
            return (this.get('ownerSample.orderedAnnotations') || []).indexOf(this);
        }),

        addElement: function addElement(element) {
            this.moveElement(element, 'acceptSelectors', 'rejectSelectors');
        },

        removeElement: function removeElement(element) {
            this.moveElement(element, 'rejectSelectors', 'acceptSelectors');
        },

        moveElement: function moveElement(element, toProperty, fromProperty) {
            var toSelectors = this.get(toProperty);
            var fromSelectors = this.get(fromProperty);

            var path = (0, _portiaUiUtilsSelectors.elementPath)(element);
            var root = path[0];
            var selector = (0, _portiaUiUtilsSelectors.smartSelector)(element);

            var addSelectors = [];
            var removeSelectors = [];

            // a selector may match more than one element, we only want to remove the single element
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = fromSelectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var fromSelector = _step.value;

                    var elements = Array.from(root.querySelectorAll(fromSelector));
                    if (elements.includes(element)) {
                        removeSelectors.addObject(fromSelector);
                        elements.removeObject(element);
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = elements[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var addElement = _step2.value;

                                addSelectors.addObject((0, _portiaUiUtilsSelectors.smartSelector)(addElement));
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                                    _iterator2['return']();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            fromSelectors.removeObjects(removeSelectors);
            fromSelectors.addObjects(addSelectors);
            toSelectors.addObject(selector);
        },

        setSelector: function setSelector(selector) {
            this.setProperties({
                acceptSelectors: selector ? [selector] : [],
                rejectSelectors: []
            });
        }
    });
});
define('portia-ui/models/base-annotation', ['exports', 'ember-data/relationships', 'portia-ui/models/base'], function (exports, _emberDataRelationships, _portiaUiModelsBase) {
    exports['default'] = _portiaUiModelsBase['default'].extend({
        parent: (0, _emberDataRelationships.belongsTo)('item', {
            inverse: 'annotations'
        })
    });
});
define('portia-ui/models/base', ['exports', 'ember', 'ember-data', 'ember-data/-private/system/empty-object'], function (exports, _ember, _emberData, _emberDataPrivateSystemEmptyObject) {
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    var get = _ember['default'].get;

    var currentActionModel = null;
    var modelActionQueue = [];

    function runActions() {
        if (currentActionModel && currentActionModel.get('isSaving')) {
            // current action has not finished
            return;
        }
        currentActionModel = null;
        while (modelActionQueue.length) {
            var nextModel = modelActionQueue.shift();
            if (nextModel.get('isSaving')) {
                // model has started saving again, wait for the next didCommit event
                return;
            }
            if (nextModel.get('isDeleted') && !nextModel.get('hasDirtyAttributes')) {
                // model has been deleted
                continue;
            }
            if (nextModel.get('pendingDelete')) {
                nextModel.deleteRecord();
                nextModel.set('pendingDelete', false);
            }
            var pendingSave = nextModel.get('pendingSave');
            if (pendingSave) {
                nextModel.set('pendingSave', null);
                var resolver = pendingSave.resolver;
                var options = pendingSave.options;

                // apply the save and resolve the promise, then wait for the next didCommit event
                nextModel.save(options).then(resolver.resolve, resolver.reject);
                return;
            }
        }
    }

    function mergeSaveOptions(dst, src) {
        if (!dst) {
            return src;
        }
        src = src || {};

        if (src.coalesce) {
            if (dst.coalesce) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = src.coalesce[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var coalesce = _step.value;
                        var model = coalesce.model;
                        var options = coalesce.options;

                        var matchingCoalesce = dst.coalesce.findBy('model', model);
                        if (matchingCoalesce) {
                            matchingCoalesce.options = mergeSaveOptions(matchingCoalesce.options, options);
                        } else {
                            dst.coalesce.push(coalesce);
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator['return']) {
                            _iterator['return']();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            } else {
                dst.coalesce = src.coalesce;
            }
        }

        if (src.partial) {
            if (dst.partial) {
                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = src.partial[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var field = _step2.value;

                        if (!dst.partial.includes(field)) {
                            dst.partial.push(field);
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                            _iterator2['return']();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }
            }
            // else dst is a full save, keep it that way
        } else if (dst.partial) {
                delete dst.partial;
            }

        return dst;
    }

    exports['default'] = _emberData['default'].Model.extend({
        pendingDelete: false,
        pendingSave: null,

        isDeleted: _ember['default'].computed('currentState', 'pendingDelete', function () {
            return get(this._internalModel.currentState, 'isDeleted') || this.get('pendingDelete');
        }).readOnly(),

        save: function save(options) {
            var isSaving = currentActionModel && currentActionModel.get('isSaving');
            var isExtra = options && options.adapterOptions && options.adapterOptions.coalesce && options.adapterOptions.coalesce.type === 'extra';
            if (isSaving && !isExtra) {
                // allow coalesced requests through since we're inside the main save call
                var pendingSave = this.get('pendingSave');
                if (pendingSave) {
                    pendingSave.options = mergeSaveOptions(pendingSave.options, options);
                } else {
                    pendingSave = {
                        resolver: _ember['default'].RSVP.defer(),
                        options: options
                    };
                    this.set('pendingSave', pendingSave);
                    modelActionQueue.push(this);
                }
                return pendingSave.resolver.promise;
            }

            currentActionModel = this;

            /*
                bulk saving helper using the coalesce option. this will generate the
                correct adapterOptions for the adapter to coalesce the requests:
                     model.save({
                        coalesce: [{
                            model: otherModel1,
                            options: {
                                partial: ['name']
                            }
                        }, {
                            model: otherModel2
                        }]
                    });
            */

            var coalescePromises = [];
            if (options && options.coalesce) {
                // a shared list for the adapter to track coalesced updates.
                var sharedUpdates = [];

                if (!options.adapterOptions) {
                    options.adapterOptions = {};
                }
                options.adapterOptions.coalesce = {
                    type: 'main',
                    updates: sharedUpdates
                };

                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = options.coalesce[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var _step3$value = _step3.value;
                        var model = _step3$value.model;
                        var modelOptions = _step3$value.options;

                        var record = model._internalModel;

                        if (get(record, 'currentState.stateName') === 'root.deleted.saved' || record.isDeleted()) {
                            throw new _ember['default'].Error("You can not pass deleted models in the coalesce options to the " + "save method.");
                        } else if (record.isNew()) {
                            throw new _ember['default'].Error("You can not pass unsaved models in the coalesce options to the " + "save method.");
                        }

                        // create a new request for each updated model. the adapter will
                        // coalesce requests with the same value of coalesce.updates.
                        // the request with a coalesce.type of 'main' MUST come after
                        // those type 'extra'.
                        var modelPromise = model.save(_ember['default'].assign({}, modelOptions, {
                            // settings adapterOptions directly so we don't trigger
                            // this code path again.
                            adapterOptions: {
                                coalesce: {
                                    type: 'extra',
                                    updates: sharedUpdates
                                }
                            }
                        }));
                        coalescePromises.push(modelPromise);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                            _iterator3['return']();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }
            }

            /*
                partial updates using the partial option. this will pass the partial
                option to the serializer through adapterOptions, so only the
                selected fields will be serialized and sent in the request. we also
                need to track the internalModel._inFlightAttributes correctly.
                     model.save({
                        partial: ['name', 'age']
                    });
            */

            var internalModel = this._internalModel;
            var originalAttributes = internalModel._attributes;
            if (options && options.partial) {
                if (!options.adapterOptions) {
                    options.adapterOptions = {};
                }
                options.adapterOptions.partial = options.partial;

                // prepare _attributes for flushChangedAttributes call in
                // store.scheduleSave, so that only the attributes selected for
                // partial save are marked as inFlight.
                internalModel._attributes = new _emberDataPrivateSystemEmptyObject['default']();
                var _iteratorNormalCompletion4 = true;
                var _didIteratorError4 = false;
                var _iteratorError4 = undefined;

                try {
                    for (var _iterator4 = options.partial[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                        var key = _step4.value;

                        if (key in originalAttributes) {
                            internalModel._attributes[key] = originalAttributes[key];
                            delete originalAttributes[key];
                        }
                    }
                } catch (err) {
                    _didIteratorError4 = true;
                    _iteratorError4 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion4 && _iterator4['return']) {
                            _iterator4['return']();
                        }
                    } finally {
                        if (_didIteratorError4) {
                            throw _iteratorError4;
                        }
                    }
                }
            }

            var mainPromise = this._super(options);

            if (options && options.partial) {
                internalModel._attributes = originalAttributes;
            }

            coalescePromises.unshift(mainPromise);
            // resolve the .save() promise when all coalesced have been resolved
            return _ember['default'].RSVP.allSettled(coalescePromises).then(function () {
                return mainPromise;
            });
        },

        deleteRecord: function deleteRecord() {
            if (this.get('isSaving')) {
                this.set('pendingDelete', true);
            }
            return this._super.apply(this, arguments);
        },

        reload: function reload() {
            var _this = this;

            if (this.get('isSaving')) {
                // record is inFlight, so wait for the request to finish and return
                // this instance
                return _emberData['default'].PromiseObject.create({
                    promise: _ember['default'].RSVP.Promise(function (resolve, reject) {
                        _this.one('didCommit', function () {
                            resolve(_this);
                            resolve = reject = _ember['default'].K;
                        });
                        _this.one('becameInvalid', function () {
                            resolve(_this);
                            resolve = reject = _ember['default'].K;
                        });
                        _this.one('becameError', _ember['default'].run.next, function () {
                            reject(_this.get('adapterError'));
                            resolve = reject = _ember['default'].K;
                        });
                    })
                });
            }
            return this._super.apply(this, arguments);
        },

        set: function set(key) {
            this._clearPendingDelete(key);
            this._super.apply(this, arguments);
        },

        setProperties: function setProperties(hash) {
            this._clearPendingDelete.apply(this, _toConsumableArray(Object.keys(hash)));
            this._super.apply(this, arguments);
        },

        runActions: _ember['default'].on('didCommit', function () {
            // run in the next run loop so that any other events that may modify
            // the state of the instance have a chance to run first.
            if (currentActionModel === this) {
                currentActionModel = null;
                _ember['default'].run.next(_ember['default'].run.once, runActions);
            }
        }),

        clearPendingAndRunActions: _ember['default'].on('becameError', 'becameInvalid', function () {
            this.setProperties({
                pendingDelete: false,
                pendingSave: null
            });
            this.runActions();
        }),

        _clearPendingDelete: function _clearPendingDelete() {
            if (this.get('pendingDelete')) {
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _len = arguments.length, keys = Array(_len), _key = 0; _key < _len; _key++) {
                        keys[_key] = arguments[_key];
                    }

                    for (var _iterator5 = keys[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var key = _step5.value;

                        if (!['pendingDelete', 'pendingSave'].includes(key)) {
                            // just to be safe cancel the delete so we don't lose data
                            this.set('pendingDelete', false);
                            break;
                        }
                    }
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5['return']) {
                            _iterator5['return']();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }
            }
        }
    });
});
define('portia-ui/models/extractor', ['exports', 'ember-data', 'portia-ui/models/base'], function (exports, _emberData, _portiaUiModelsBase) {
    exports['default'] = _portiaUiModelsBase['default'].extend({
        type: _emberData['default'].attr('string'),
        value: _emberData['default'].attr('string'),
        project: _emberData['default'].belongsTo(),
        annotations: _emberData['default'].hasMany()
    });
});
define('portia-ui/models/field', ['exports', 'ember-data', 'portia-ui/models/base'], function (exports, _emberData, _portiaUiModelsBase) {
    var FIELD_TYPES = ['date', 'geopoint', 'image', 'number', 'price', 'raw html', 'safe html', 'text', 'url'];

    exports.FIELD_TYPES = FIELD_TYPES;
    exports['default'] = _portiaUiModelsBase['default'].extend({
        name: _emberData['default'].attr('string'),
        type: _emberData['default'].attr('string'),
        required: _emberData['default'].attr('boolean'),
        vary: _emberData['default'].attr('boolean'),
        schema: _emberData['default'].belongsTo({
            async: true
        }),
        annotations: _emberData['default'].hasMany({
            async: true
        })
    });
});
define('portia-ui/models/item', ['exports', 'ember', 'ember-data', 'portia-ui/models/base-annotation'], function (exports, _ember, _emberData, _portiaUiModelsBaseAnnotation) {
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    exports['default'] = _portiaUiModelsBaseAnnotation['default'].extend({
        name: _emberData['default'].attr('string'),
        selector: _emberData['default'].attr('string'),
        repeatedSelector: _emberData['default'].attr('string'),
        siblings: _emberData['default'].attr('number', {
            defaultValue: 0
        }),

        sample: _emberData['default'].belongsTo(),
        schema: _emberData['default'].belongsTo(),
        annotations: _emberData['default'].hasMany('base-annotation', {
            inverse: 'parent',
            polymorphic: true
        }),

        ownerSample: _ember['default'].computed(function () {
            var _this = this;

            return _emberData['default'].PromiseObject.create({
                promise: this.get('sample').then(function (sample) {
                    return sample || _this.get('parent.ownerSample');
                })
            });
        }),

        orderedAnnotations: _ember['default'].computed('annotations', 'annotations.@each.orderedAnnotations', function () {
            var _ref;

            return (_ref = []).concat.apply(_ref, _toConsumableArray(this.get('annotations').map(function (annotation) {
                return annotation.constructor.modelName === 'item' ? annotation.getWithDefault('orderedAnnotations', []) : [annotation];
            })));
        }),
        orderedChildren: _ember['default'].computed('annotations.[]', 'annotations.@each.orderedChildren', function () {
            var _ref2;

            return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(this.get('annotations').map(function (annotation) {
                return [annotation].concat(annotation.constructor.modelName === 'item' ? annotation.getWithDefault('orderedChildren', []) : []);
            })));
        }),

        depth: _ember['default'].computed('parent.depth', function () {
            var parentDepth = this.get('parent.depth');
            return (parentDepth || 0) + 1;
        })
    });
});
define('portia-ui/models/project', ['exports', 'ember-data', 'portia-ui/models/base', 'ember-api-actions'], function (exports, _emberData, _portiaUiModelsBase, _emberApiActions) {

    function memberActionAndMarkClean(options) {
        var method = (0, _emberApiActions.memberAction)(options);

        return function (payload) {
            var _this = this;

            return method.call(this, payload).then(function (result) {
                _this.markClean();
                return result;
            });
        };
    }

    var Project = _portiaUiModelsBase['default'].extend({
        name: _emberData['default'].attr('string'),
        spiders: _emberData['default'].hasMany(),
        schemas: _emberData['default'].hasMany(),
        extractors: _emberData['default'].hasMany(),

        hasChanges: false,

        status: (0, _emberApiActions.memberAction)({ path: 'status', type: 'GET' }),
        publish: memberActionAndMarkClean({ path: 'publish' }),
        reset: memberActionAndMarkClean({ path: 'reset' }),

        checkChanges: function checkChanges() {
            var _this2 = this;

            return this.status().then(function (status) {
                var hasChanges = !!(status && status.meta && status.meta.changes && status.meta.changes.length);
                _this2.set('hasChanges', hasChanges);
                return _this2;
            });
        },

        markClean: function markClean() {
            this.set('hasChanges', false);
        },

        markChanged: function markChanged() {
            this.set('hasChanges', true);
        }
    });

    exports['default'] = Project;
});
define('portia-ui/models/sample', ['exports', 'ember', 'ember-data', 'portia-ui/models/base'], function (exports, _ember, _emberData, _portiaUiModelsBase) {
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    var Sample = _portiaUiModelsBase['default'].extend({
        name: _emberData['default'].attr('string'),
        url: _emberData['default'].attr('string'),
        spider: _emberData['default'].belongsTo(),
        items: _emberData['default'].hasMany(),
        body: _emberData['default'].attr('string', {
            'default': 'original_body'
        }),

        orderedAnnotations: _ember['default'].computed('items.content.@each.orderedAnnotations', function () {
            var _ref;

            return (_ref = []).concat.apply(_ref, _toConsumableArray(this.get('items').mapBy('orderedAnnotations')));
        }),
        orderedChildren: _ember['default'].computed('items.content.@each.orderedChildren', function () {
            var _ref2;

            return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(this.get('items').map(function (item) {
                return [item].concat(item.getWithDefault('orderedChildren', []));
            })));
        })
    });

    Sample.reopenClass({
        normalizeTitle: function normalizeTitle(title) {
            return title.trim().replace(/[^a-z\s_-]/ig, '').substring(0, 48).trim().replace(/\s+/g, ' ');
        }
    });

    exports['default'] = Sample;
});
define('portia-ui/models/schema', ['exports', 'ember-data', 'portia-ui/models/base'], function (exports, _emberData, _portiaUiModelsBase) {
    exports['default'] = _portiaUiModelsBase['default'].extend({
        name: _emberData['default'].attr('string'),
        project: _emberData['default'].belongsTo(),
        fields: _emberData['default'].hasMany(),
        items: _emberData['default'].hasMany()
    });
});
define('portia-ui/models/spider', ['exports', 'ember', 'ember-data', 'portia-ui/models/base'], function (exports, _ember, _emberData, _portiaUiModelsBase) {
    exports['default'] = _portiaUiModelsBase['default'].extend({
        name: _emberData['default'].attr('string'),
        nameAlias: _ember['default'].computed('id', 'name', {
            get: function get() {
                return this.get('name') || this.get('id');
            },
            set: function set(key, value) {
                this.set('name', value);
                return value;
            }
        }),

        startUrls: _emberData['default'].attr('startUrl', {
            defaultValue: function defaultValue() {
                return [];
            }
        }),
        respectNofollow: _emberData['default'].attr('boolean'),
        pageActions: _emberData['default'].attr('array', {
            defaultValue: function defaultValue() {
                return [];
            }
        }),
        project: _emberData['default'].belongsTo(),

        // login
        performLogin: _emberData['default'].attr('boolean'),
        loginUrl: _emberData['default'].attr('string'),
        loginUser: _emberData['default'].attr('string'),
        loginPassword: _emberData['default'].attr('string'),

        // links
        linksToFollow: _emberData['default'].attr('string', {
            defaultValue: 'all'
        }),
        followPatterns: _emberData['default'].attr('array', {
            defaultValue: function defaultValue() {
                return [];
            }
        }),
        excludePatterns: _emberData['default'].attr('array', {
            defaultValue: function defaultValue() {
                return [];
            }
        }),
        // move to ui state?
        showLinks: _emberData['default'].attr('boolean'),
        respectNoFollow: _emberData['default'].attr('boolean', {
            defaultValue: true
        }),

        // JS
        jsEnabled: _emberData['default'].attr('boolean'),
        jsEnablePatterns: _emberData['default'].attr('array', {
            defaultValue: function defaultValue() {
                return [];
            }
        }),
        jsDisablePatterns: _emberData['default'].attr('array', {
            defaultValue: function defaultValue() {
                return [];
            }
        }),

        samples: _emberData['default'].hasMany({
            async: true
        }),

        firstUrl: _ember['default'].computed('startUrls.firstObject', function () {
            var urls = this.get('startUrls').filterBy('type', 'url');
            return urls.length !== 0 ? urls[0].url : undefined;
        }),

        localImages: _emberData['default'].attr('boolean', {
            defaultValue: false
        }),

        // country and currency codes
        countryCode: _emberData['default'].attr('string', {
            defaultValue: ''
        }),

        currencyCode: _emberData['default'].attr('string', {
            defaultValue: 'EGP'
        }),

        useLanguageConfig: _emberData['default'].attr('boolean', {
            defaultValue: false
        }),

        useCurrencyConfig: _emberData['default'].attr('boolean', {
            defaultValue: false
        }),

        englishURL: _emberData['default'].attr('string', {
            defaultValue: ''
        }),

        englishUrlArgs: _emberData['default'].attr('string', {
            defaultValue: ''
        }),

        arabicURL: _emberData['default'].attr('string', {
            defaultValue: ''
        }),

        arabicUrlArgs: _emberData['default'].attr('string', {
            defaultValue: ''
        }),

        useLanguageCookies: _emberData['default'].attr('boolean', {
            defaultValue: false
        }),

        useCurrencyCookies: _emberData['default'].attr('boolean', {
            defaultValue: false
        }),

        englishCookieName: _emberData['default'].attr('string', {
            defaultValue: ''
        }),

        englishCookieValue: _emberData['default'].attr('string', {
            defaultValue: ''
        }),

        arabicCookieName: _emberData['default'].attr('string', {
            defaultValue: ''
        }),
        arabicCookieValue: _emberData['default'].attr('string', {
            defaultValue: ''
        }),

        currencyCookieName: _emberData['default'].attr('string', {
            defaultValue: ''
        }),

        currencyCookieValue: _emberData['default'].attr('string', {
            defaultValue: ''
        }),

        user: _emberData['default'].attr('string', {
            defaultValue: ''
        }),

        userAlias: _ember['default'].computed('username', 'user', {
            get: function get() {
                return this.get('user') || this.get('username');
            },
            set: function set(key, value) {
                this.set('user', value);
                return value;
            }
        })

    });
});
define('portia-ui/models/start-url', ['exports', 'ember', 'portia-ui/utils/utils', 'portia-ui/utils/start-urls'], function (exports, _ember, _portiaUiUtilsUtils, _portiaUiUtilsStartUrls) {
    exports['default'] = buildStartUrl;

    var StartUrl = _ember['default'].Object.extend({
        type: 'url',
        isGenerated: false,
        optionsTitle: '',
        componentName: 'project-structure-spider-url',

        show: function show() {
            return this.get('url');
        },

        serialize: function serialize() {
            var serialized = {
                'url': this.show(),
                'type': this.get('type')
            };
            return this.addSerialized(serialized);
        },
        addSerialized: function addSerialized(serialized) {
            return serialized;
        },

        save: function save(spider) {
            spider.get('startUrls').pushObject(this);
            spider.save();
            return this;
        }
    });

    var GeneratedUrl = StartUrl.extend({
        type: 'generated',
        isGenerated: true,
        optionsTitle: 'URL Generation',
        componentName: 'project-structure-spider-generated-url',
        optionsComponentName: 'generated-url-options',

        init: function init() {
            var defaultFragments = [{
                type: 'fixed',
                value: this.get('url')
            }];
            var fragments = this.get('fragments') || defaultFragments;
            this.set('fragments', fragments);
        },

        show: function show() {
            return this.get('fragments').map(_portiaUiUtilsStartUrls.fragmentToString).join('');
        },

        addSerialized: function addSerialized(serialized) {
            serialized['fragments'] = this.get('fragments');
            return serialized;
        },

        generateList: function generateList() {
            // This algorithm is very inefficient due to concatenation and flattening.
            var fragments = _ember['default'].copy(this.get('fragments'));
            var firstFragment = fragments.shiftObject();
            var urlList = [[firstFragment.value]];

            fragments.forEach(function (fragment) {
                var augmentedList = urlList.map(function (fragmentList) {
                    return (0, _portiaUiUtilsStartUrls.augmentFragmentList)(fragmentList, fragment);
                });
                urlList = (0, _portiaUiUtilsUtils.flatten)(augmentedList);
            });
            return urlList;
        }
    });

    var FeedUrl = StartUrl.extend({
        type: 'feed',
        optionsTitle: 'Feed',
        componentName: 'project-structure-spider-feed-url',
        optionsComponentName: 'feed-url-options',

        show: function show() {
            return this._raw_url();
        },

        _raw_url: function _raw_url() {
            var url = this.get('url');
            var notRaw = !url.includes('raw');

            if (url.includes('gist.github') && notRaw) {
                var trailingSlash = url.slice(-1) === '/' ? '' : '/';
                return url + trailingSlash + 'raw';
            }

            if (url.includes('dropbox.com') && notRaw) {
                return url + '&raw=1';
            }

            if (url.includes('docs.google.com') && !url.includes('export')) {
                return url.split('/').slice(0, -1).concat('export?format=txt').join('/');
            }

            return url;
        }
    });

    function buildStartUrl(startUrl) {
        var urls = {
            'url': StartUrl,
            'feed': FeedUrl,
            'generated': GeneratedUrl
        };
        var urlType = startUrl.type || 'url';
        return urls[urlType].create(startUrl);
    }
});
define('portia-ui/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {
  exports['default'] = _emberResolver['default'];
});
define('portia-ui/router', ['exports', 'ember', 'portia-ui/config/environment'], function (exports, _ember, _portiaUiConfigEnvironment) {

    var Router = _ember['default'].Router.extend({
        location: _portiaUiConfigEnvironment['default'].locationType
    });

    Router.map(function () {
        this.route('projects', function () {
            this.route('project', { path: ":project_id" }, function () {
                this.route('spider', { path: "spiders/:spider_id" }, function () {
                    this.route('sample', { path: "samples/:sample_id" }, function () {
                        this.route('data', function () {
                            this.route('annotation', { path: "annotations/:annotation_id" }, function () {
                                this.route('options');
                            });
                            this.route('item', { path: "items/:item_id" });
                        });
                    });
                    this.route('options');
                    this.route('link-options');
                    this.route('start-url', { path: "start-urls/:start_url_id" }, function () {
                        this.route('options');
                    });
                    this.route('language-options');
                    this.route('currency-options');
                });
                this.route('schema', { path: "schemas/:schema_id" }, function () {
                    this.route('field', { path: "fields/:field_id" }, function () {
                        this.route('options');
                    });
                    this.route('options');
                });
                this.route("conflicts", function () {
                    this.route("conflict", { path: ':file_path' });
                });
                this.route('compatibility', { path: "*path" });
            });
        });
        this.route('browsers');
        this.route('language-options');
    });

    exports['default'] = Router;
});
define('portia-ui/routes/browsers', ['exports', 'ember'], function (exports, _ember) {

    var browsers = [{
        name: 'Chrome',
        alt: 'Chrome logo',
        src: '/assets/images/chrome-logo.jpg',
        href: 'https://www.google.com/chrome/browser/desktop/'
    }, {
        name: 'Firefox',
        alt: 'Firefox logo',
        src: '/assets/images/firefox-logo.png',
        href: 'https://www.mozilla.org/en-US/firefox/new/'
    }];

    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return browsers;
        }
    });
});
define('portia-ui/routes/index', ['exports', 'ember', 'portia-ui/utils/browser-features'], function (exports, _ember, _portiaUiUtilsBrowserFeatures) {

    function identity(x) {
        return x;
    }

    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return (0, _portiaUiUtilsBrowserFeatures['default'])();
        },

        redirect: function redirect(model) {
            var hasFeatures = model.every(identity);
            var nextRoute = hasFeatures ? 'projects' : 'browsers';
            this.replaceWith(nextRoute);
        }
    });
});
define('portia-ui/routes/projects', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return this.store.findAll('project');
        }
    });
});
define('portia-ui/routes/projects/project', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        browser: _ember['default'].inject.service(),
        capabilities: _ember['default'].inject.service(),
        notificationManager: _ember['default'].inject.service(),

        model: function model(params) {
            this.set('projectId', params.project_id);
            return this.store.findRecord('project', params.project_id);
        },

        afterModel: function afterModel(model) {
            var promises = [model.reload()];
            if (this.get('capabilities.capabilities.version_control')) {
                promises.push(model.checkChanges());
            }
            return _ember['default'].RSVP.all(promises);
        },

        setupController: function setupController(controller, model) {
            this._super(controller, model);
            controller.set('projects', this.controllerFor('projects'));
        },

        deactivate: function deactivate() {
            this.set('browser.url', null);
        },

        renderTemplate: function renderTemplate() {
            this.render({
                into: 'application',
                outlet: 'main'
            });

            this.render('projects/project/structure', {
                into: 'application',
                outlet: 'side-bar'
            });

            this.render('options-panels', {
                into: 'application',
                outlet: 'options-panels'
            });

            this.render('tool-panels', {
                into: 'application',
                outlet: 'tool-panels'
            });

            this.render('projects/project/toolbar', {
                into: 'projects/project',
                outlet: 'browser-toolbar'
            });
        },

        projectNotFound: function projectNotFound() {
            var id = this.get('projectId');
            var errorMsg = 'Project with id \'' + id + '\' not found.';
            this.get('notificationManager').showErrorNotification(errorMsg);
        },

        actions: {
            error: function error() {
                this.projectNotFound();
                this.transitionTo('projects');
            },

            conflict: function conflict() {
                this.transitionTo('projects.project.conflicts');
            },

            reload: function reload() {
                this.transitionTo('projects.project');
                this.store.unloadAll('spider');
                this.store.unloadAll('schema');
                this.refresh();
            }
        }
    });
});
define('portia-ui/routes/projects/project/compatibility', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(params) {
            return params;
        },

        redirect: function redirect(_ref, _ref2) {
            var path = _ref.path;
            var queryParams = _ref2.queryParams;

            // conflicts route has the same path
            if (path === 'items') {
                this.transitionTo('projects.project', {
                    queryParams: queryParams
                });
                return;
            }
            var fragments = path.split('/');
            if (fragments.length === 1) {
                this.transitionTo('projects.project.spider', fragments[0], {
                    queryParams: queryParams
                });
            } else {
                this.transitionTo('projects.project.spider.sample', fragments[0], fragments[1], {
                    queryParams: queryParams
                });
            }
        }
    });
});
define('portia-ui/routes/projects/project/conflicts', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model() {
            return $.post('/projects', JSON.stringify({
                cmd: 'conflicts',
                args: [this.modelFor("projects.project").id]
            }));
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/conflicts/file-selector', {
                into: 'application',
                outlet: 'side-bar'
            });

            this.render('projects/project/conflicts/help', {
                into: 'application',
                outlet: 'main'
            });
        }
    });
});
define('portia-ui/routes/projects/project/conflicts/conflict', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(params) {
            var allConflicts = this.modelFor("projects.project.conflicts");
            var file = atob(params.file_path);
            return {
                file: file,
                contents: allConflicts[file]
            };
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/conflicts/topbar', {
                into: 'application',
                outlet: 'top-bar'
            });

            this.render('projects/project/conflicts/resolver', {
                into: 'application',
                outlet: 'main'
            });
        }
    });
});
define('portia-ui/routes/projects/project/schema', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(params) {
            return this.store.peekRecord('schema', params.schema_id);
        },

        afterModel: function afterModel(model) {
            return model.reload();
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/schema/structure', {
                into: 'projects/project/structure',
                outlet: 'project-structure'
            });
        },

        actions: {
            error: function error() {
                this.transitionTo('projects.project', this.modelFor('projects.project'));
            }
        }
    });
});
define('portia-ui/routes/projects/project/schema/field', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(params) {
            return this.store.peekRecord('field', params.field_id);
        }
    });
});
define('portia-ui/routes/projects/project/schema/field/options', ['exports', 'ember', 'portia-ui/mixins/options-route'], function (exports, _ember, _portiaUiMixinsOptionsRoute) {
    exports['default'] = _ember['default'].Route.extend(_portiaUiMixinsOptionsRoute['default'], {
        model: function model() {
            return this.modelFor('projects.project.schema.field');
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/schema/field/options', {
                into: 'options-panels',
                outlet: 'options-panels'
            });
        },

        actions: {
            close: function close() {
                this.transitionTo('projects.project.schema.field');
            }
        }
    });
});
define('portia-ui/routes/projects/project/spider', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        browser: _ember['default'].inject.service(),

        model: function model(params) {
            return this.store.peekRecord('spider', params.spider_id);
        },

        afterModel: function afterModel(model) {
            return model.reload().then(function () {
                return model.get('samples');
            });
        },

        redirect: function redirect(model, _ref) {
            var queryParams = _ref.queryParams;

            /* The route may be loaded from a partial model without all data from
               the backed, and an undefined firstUrl. This is fired after afterModel
               so the model will have been reloaded from the backend. */
            if (queryParams.url === undefined && queryParams.baseurl === undefined) {
                var url = model.get('firstUrl');
                if (url === undefined) {
                    return;
                }
                this.transitionTo('projects.project.spider', {
                    queryParams: {
                        url: url,
                        baseurl: null
                    }
                });
            }
        },

        setupController: function setupController(controller) {
            this._super.apply(this, arguments);
            _ember['default'].run.next(function () {
                controller.activate();
            });
        },

        resetController: function resetController(controller, isExiting) {
            _ember['default'].run.next(function () {
                controller.deactivate();
                if (!isExiting) {
                    controller.activate();
                }
            });
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/spider/structure', {
                into: 'projects/project/structure',
                outlet: 'project-structure'
            });

            this.render('projects/project/spider/overlays', {
                into: 'projects/project',
                outlet: 'browser-overlays'
            });

            this.render('projects/project/spider/tools', {
                into: 'tool-panels',
                outlet: 'tool-panels'
            });

            this.render('projects/project/spider/toolbar', {
                into: 'projects/project',
                outlet: 'browser-toolbar'
            });
        },

        actions: {
            error: function error() {
                this.transitionTo('projects.project', this.modelFor('projects.project'));
            },

            transitionToFragments: function transitionToFragments(start_url_id) {
                this.transitionTo('projects.project.spider.start-url.options', start_url_id);
            },

            closeOptions: function closeOptions() {
                var spider = this.modelFor('projects.project.spider');
                this.transitionTo('projects.project.spider', spider);
            }
        }
    });
});
define('portia-ui/routes/projects/project/spider/currency-options', ['exports', 'ember', 'portia-ui/mixins/options-route'], function (exports, _ember, _portiaUiMixinsOptionsRoute) {
    exports['default'] = _ember['default'].Route.extend(_portiaUiMixinsOptionsRoute['default'], {
        model: function model() {
            return this.modelFor('projects.project.spider');
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/spider/currency-options', {
                into: 'options-panels',
                outlet: 'options-panels'
            });
        },

        actions: {
            close: function close() {
                this.transitionTo('projects.project.spider');
            }
        }
    });
});
define('portia-ui/routes/projects/project/spider/language-options', ['exports', 'ember', 'portia-ui/mixins/options-route'], function (exports, _ember, _portiaUiMixinsOptionsRoute) {
    exports['default'] = _ember['default'].Route.extend(_portiaUiMixinsOptionsRoute['default'], {
        model: function model() {
            return this.modelFor('projects.project.spider');
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/spider/language-options', {
                into: 'options-panels',
                outlet: 'options-panels'
            });
        },

        actions: {
            close: function close() {
                this.transitionTo('projects.project.spider');
            }
        }
    });
});
define('portia-ui/routes/projects/project/spider/link-options', ['exports', 'ember', 'portia-ui/mixins/options-route'], function (exports, _ember, _portiaUiMixinsOptionsRoute) {
    exports['default'] = _ember['default'].Route.extend(_portiaUiMixinsOptionsRoute['default'], {
        model: function model() {
            return this.modelFor('projects.project.spider');
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/spider/link-options', {
                into: 'options-panels',
                outlet: 'options-panels'
            });
        },

        actions: {
            close: function close() {
                this.transitionTo('projects.project.spider');
            }
        }
    });
});
define('portia-ui/routes/projects/project/spider/options', ['exports', 'ember', 'portia-ui/mixins/options-route'], function (exports, _ember, _portiaUiMixinsOptionsRoute) {
    exports['default'] = _ember['default'].Route.extend(_portiaUiMixinsOptionsRoute['default'], {
        model: function model() {
            return this.modelFor('projects.project.spider');
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/spider/options', {
                into: 'options-panels',
                outlet: 'options-panels'
            });
        },

        actions: {
            close: function close() {
                this.transitionTo('projects.project.spider');
            }
        }
    });
});
define('portia-ui/routes/projects/project/spider/sample', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        browser: _ember['default'].inject.service(),

        model: function model(params) {
            return this.store.peekRecord('sample', params.sample_id);
        },

        afterModel: function afterModel(model) {
            return model.reload().then(function (model) {
                return model;
            });
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/spider/sample/structure', {
                into: 'projects/project/spider/structure',
                outlet: 'spider-structure'
            });

            this.render('projects/project/spider/sample/toolbar', {
                into: 'projects/project',
                outlet: 'browser-toolbar'
            });
        },

        actions: {
            error: function error() {
                this.transitionTo('projects.project.spider', this.modelFor('projects.project.spider'));
            }
        }
    });
});
define('portia-ui/routes/projects/project/spider/sample/data', ['exports', 'ember'], function (exports, _ember) {
    var _slice = Array.prototype.slice;
    exports['default'] = _ember['default'].Route.extend({
        annotationStructure: _ember['default'].inject.service(),
        browser: _ember['default'].inject.service(),

        init: function init() {
            this._super.apply(this, arguments);
            this.scheduledRenderOverlays = null;
        },

        model: function model() {
            return this.modelFor('projects.project.spider.sample');
        },

        afterModel: function afterModel(model) {
            this.updateDataStructure(model);
        },

        activate: function activate() {
            this.get('browser').setAnnotationMode();
            this.controllerFor('projects.project').setClickHandler(this.viewPortClick.bind(this));
        },

        deactivate: function deactivate() {
            this.updateDataStructure(null);

            if (this.scheduledRenderOverlays) {
                _ember['default'].run.cancel(this.scheduledRenderOverlays);
            }

            this.get('browser').clearAnnotationMode();
            this.controllerFor('projects.project').clearClickHandler();
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/spider/sample/data/structure', {
                into: 'projects/project/spider/sample/structure',
                outlet: 'sample-structure'
            });

            this.render('projects/project/spider/sample/data/tools', {
                into: 'tool-panels',
                outlet: 'tool-panels'
            });

            this.render('projects/project/spider/sample/data/toolbar', {
                into: 'projects/project/spider/sample/toolbar',
                outlet: 'browser-toolbar'
            });

            this.scheduledRenderOverlays = _ember['default'].run.next(this, this.renderOverlayTemplate);
        },

        renderOverlayTemplate: function renderOverlayTemplate() {
            this.scheduledRenderOverlays = null;
            this.render('projects/project/spider/sample/data/overlays', {
                into: 'projects/project',
                outlet: 'browser-overlays'
            });
        },

        updateDataStructure: function updateDataStructure(model) {
            var annotationStructure = this.get('annotationStructure');
            var currentModel = this._dataStructureModel;

            if (currentModel !== model) {
                annotationStructure.removeDataStructure(currentModel);
                annotationStructure.addDataStructure(model);
                this._dataStructureModel = model;
            }
        },

        viewPortClick: function viewPortClick() {
            var _get;

            (_get = this.get('controller')).send.apply(_get, ['selectElement'].concat(_slice.call(arguments)));
        }
    });
});
define('portia-ui/routes/projects/project/spider/sample/data/annotation', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        uiState: _ember['default'].inject.service(),
        selectedElement: _ember['default'].computed.alias('uiState.viewPort.selectedElement'),
        selectedModel: _ember['default'].computed.alias('uiState.viewPort.selectedModel'),

        model: function model(params) {
            return this.store.peekRecord('annotation', params.annotation_id);
        },

        afterModel: function afterModel(model) {
            if (this.get('selectedModel') !== model) {
                this.setProperties({
                    selectedElement: null,
                    selectedModel: model
                });
            }
        },

        deactivate: function deactivate() {
            this.setProperties({
                selectedElement: null,
                selectedModel: null
            });
        },

        actions: {
            error: function error() {
                this.transitionTo('projects.project.spider.sample.data');
            }
        }
    });
});
define('portia-ui/routes/projects/project/spider/sample/data/annotation/options', ['exports', 'ember', 'portia-ui/mixins/options-route'], function (exports, _ember, _portiaUiMixinsOptionsRoute) {
    exports['default'] = _ember['default'].Route.extend(_portiaUiMixinsOptionsRoute['default'], {
        model: function model() {
            return this.modelFor('projects.project.spider.sample.data.annotation');
        },

        afterModel: function afterModel() {
            var extractorsPromise = this.modelFor('projects.project').get('extractors');
            if (!extractorsPromise.get('isPending')) {
                extractorsPromise = extractorsPromise.reload();
            }
            return extractorsPromise;
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/spider/sample/data/annotation/options', {
                into: 'options-panels',
                outlet: 'options-panels'
            });
        },

        actions: {
            close: function close() {
                this.transitionTo('projects.project.spider.sample.data.annotation');
            }
        }
    });
});
define('portia-ui/routes/projects/project/spider/sample/data/item', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(params) {
            return this.store.peekRecord('item', params.item_id);
        },

        actions: {
            error: function error() {
                this.transitionTo('projects.project.spider.sample.data');
            }
        }
    });
});
define('portia-ui/routes/projects/project/spider/sample/index', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        redirect: function redirect(model, _ref) {
            var queryParams = _ref.queryParams;

            this.transitionTo('projects.project.spider.sample.data', {
                /* The queryParams in the transition object have been processed and keys with empty
                   values have been removed. If we use the same object for the new transition the
                   unspecified values will keep their current values. This means we can't automatically
                   pass through query parameters that have intentionally been emptied. */
                queryParams: _ember['default'].assign({
                    url: null,
                    baseurl: null
                }, queryParams)
            });
        }
    });
});
define('portia-ui/routes/projects/project/spider/start-url', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Route.extend({
        model: function model(params) {
            var spider = this.modelFor('projects.project.spider');
            return spider.get('startUrls').objectAt(params.start_url_id);
        }
    });
});
define('portia-ui/routes/projects/project/spider/start-url/options', ['exports', 'ember', 'portia-ui/mixins/options-route'], function (exports, _ember, _portiaUiMixinsOptionsRoute) {
    exports['default'] = _ember['default'].Route.extend(_portiaUiMixinsOptionsRoute['default'], {
        model: function model() {
            var startUrl = this.modelFor('projects.project.spider.start-url');

            return {
                spider: this.getSpider(),
                startUrlId: this.getSpider().get('startUrls').indexOf(startUrl)
            };
        },

        afterModel: function afterModel(model) {
            if (!model) {
                this.transitionToSpider();
            }
        },

        renderTemplate: function renderTemplate() {
            this.render('projects/project/spider/start-url/options', {
                into: 'options-panels',
                outlet: 'options-panels'
            });
        },

        getSpider: function getSpider() {
            return this.modelFor('projects.project.spider');
        },

        transitionToSpider: function transitionToSpider() {
            this.transitionTo('projects.project.spider', this.getSpider());
        },

        actions: {
            closeOptions: function closeOptions() {
                this.transitionToSpider();
            }
        }
    });
});
define("portia-ui/serializers/application", ["exports", "ember-data"], function (exports, _emberData) {
    exports["default"] = _emberData["default"].JSONAPISerializer.extend({
        normalize: function normalize(modelClass, resourceHash) {
            var resource = this._super.apply(this, arguments);
            // add resource instance link to data, we use this to resolve the url
            // for subsequent requests
            if (resourceHash.links) {
                resource.data.links = resourceHash.links;
            }
            return resource;
        },

        serialize: function serialize(snapshot, options) {
            var json = this._super.apply(this, arguments);

            // partial serialization based on the partial option
            if (options && options.partial) {
                var data = json.data;

                var keys = new Set();
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = options.partial[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var key = _step.value;

                        var payloadKey = this._getMappedKey(key, snapshot.type);
                        if (payloadKey === key) {
                            payloadKey = this.keyForAttribute(key, 'serialize');
                        }
                        keys.add(payloadKey);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator["return"]) {
                            _iterator["return"]();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = Object.keys(data.attributes)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var field = _step2.value;

                        if (!keys.has(field)) {
                            delete data.attributes[field];
                        }
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
                            _iterator2["return"]();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                if (!Object.keys(data.attributes).length) {
                    delete data.attributes;
                }

                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = Object.keys(data.relationships)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var field = _step3.value;

                        if (!keys.has(field)) {
                            delete data.relationships[field];
                        }
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
                            _iterator3["return"]();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                if (!Object.keys(data.relationships).length) {
                    delete data.relationships;
                }
            }

            return json;
        }
    });
});
define('portia-ui/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define('portia-ui/services/annotation-structure', ['exports', 'ember', 'portia-ui/utils/selectors'], function (exports, _ember, _portiaUiUtilsSelectors) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.createStructure = createStructure;
    exports.updateStructureSelectors = updateStructureSelectors;

    var ElementStructure = _ember['default'].Object.extend({
        definition: null,
        selectorMatcher: null,

        init: function init() {
            this._super.apply(this, arguments);
            this.addObservers();
        },

        destroy: function destroy() {
            this.removeObservers();
            this._super.apply(this, arguments);
        },

        updateDefinition: _ember['default'].observer('definition', function () {
            this.removeObservers();
            this.addObservers();
        }),

        addObservers: function addObservers() {
            var _this = this;

            var allElements = [];
            this.set('annotations', _ember['default'].Object.create());
            this.set('elements', _ember['default'].Object.create({
                all: allElements
            }));

            var bindings = this.bindings = [];
            var definition = this.get('definition');
            var selectorMatcher = this.get('selectorMatcher');

            var setup = function setup(element) {
                var annotation = element.annotation;
                var children = element.children;
                var guid = _ember['default'].guidFor(annotation);

                var setElements = function setElements(elements) {
                    (annotation.get('elements') || []).forEach(function (element) {
                        allElements.removeObject(element);
                        var guid = _ember['default'].guidFor(element);
                        var annotations = _this.get('annotations.' + guid);
                        if (annotations) {
                            annotations.removeObject(annotation);
                            if (!annotations.length) {
                                _this.set('annotations.' + guid, undefined);
                            }
                        }
                    });
                    elements.forEach(function (element) {
                        allElements.addObject(element);
                        var guid = _ember['default'].guidFor(element);
                        var annotations = _this.get('annotations.' + guid);
                        if (!annotations) {
                            annotations = [];
                            _this.set('annotations.' + guid, annotations);
                            _this.notifyPropertyChange('annotations');
                        }
                        annotations.addObject(annotation);
                    });
                    if (!annotation.get('isDeleted')) {
                        annotation.set('elements', elements);
                    }
                    _this.set('elements.' + guid, elements);
                    _this.notifyPropertyChange('elements');
                };

                if (children) {
                    (function () {
                        children.forEach(setup);

                        var selector = null;
                        var _observer = function _observer() {
                            if (selector) {
                                selectorMatcher.unRegister(selector, setElements);
                            }
                            selector = annotation.get('repeatedSelector') || annotation.get('selector');
                            if (selector) {
                                selectorMatcher.register(selector, setElements);
                                setElements(selectorMatcher.query(selector));
                            }
                        };

                        var scheduledObserver = null;
                        bindings.push({
                            annotation: annotation,
                            setup: function setup() {},
                            teardown: function teardown() {
                                _ember['default'].run.cancel(scheduledObserver);
                                if (selector) {
                                    selectorMatcher.unRegister(selector, setElements);
                                }
                                annotation.setProperties({
                                    elements: undefined
                                });
                            },
                            observer: function observer() {
                                // allow the bindings to sync first
                                scheduledObserver = _ember['default'].run.scheduleOnce('sync', _observer);
                            },
                            observerPaths: ['selector', 'repeatedSelector']
                        });
                    })();
                } else {
                    (function () {
                        var selector = null;
                        var _observer2 = function _observer2() {
                            if (selector) {
                                selectorMatcher.unRegister(selector, setElements);
                            }
                            selector = annotation.get('selector');
                            if (selector) {
                                selectorMatcher.register(selector, setElements);
                                setElements(selectorMatcher.query(selector));
                            }
                        };

                        var scheduledObserver = null;
                        bindings.push({
                            annotation: annotation,
                            setup: function setup() {},
                            teardown: function teardown() {
                                _ember['default'].run.cancel(scheduledObserver);
                                if (selector) {
                                    selectorMatcher.unRegister(selector, setElements);
                                }
                                annotation.setProperties({
                                    elements: undefined
                                });
                            },
                            observer: function observer() {
                                // allow the bindings to sync first
                                scheduledObserver = _ember['default'].run.scheduleOnce('sync', _observer2);
                            },
                            observerPaths: ['selector']
                        });
                    })();
                }
            };

            definition.forEach(setup);

            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = bindings[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _setup = _step.value.setup;

                    if (_setup) {
                        _setup();
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator['return']) {
                        _iterator['return']();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = bindings[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _step2$value = _step2.value;
                    var annotation = _step2$value.annotation;
                    var observer = _step2$value.observer;
                    var observerPaths = _step2$value.observerPaths;

                    if (observer) {
                        var _iteratorNormalCompletion3 = true;
                        var _didIteratorError3 = false;
                        var _iteratorError3 = undefined;

                        try {
                            for (var _iterator3 = observerPaths[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                var path = _step3.value;

                                _ember['default'].addObserver(annotation, path, observer);
                            }
                        } catch (err) {
                            _didIteratorError3 = true;
                            _iteratorError3 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                                    _iterator3['return']();
                                }
                            } finally {
                                if (_didIteratorError3) {
                                    throw _iteratorError3;
                                }
                            }
                        }

                        observer();
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                        _iterator2['return']();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        },

        removeObservers: function removeObservers() {
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = this.bindings[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var _step4$value = _step4.value;
                    var annotation = _step4$value.annotation;
                    var observer = _step4$value.observer;
                    var observerPaths = _step4$value.observerPaths;
                    var teardown = _step4$value.teardown;

                    if (observer) {
                        var _iteratorNormalCompletion5 = true;
                        var _didIteratorError5 = false;
                        var _iteratorError5 = undefined;

                        try {
                            for (var _iterator5 = observerPaths[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                                var path = _step5.value;

                                _ember['default'].removeObserver(annotation, path, observer);
                            }
                        } catch (err) {
                            _didIteratorError5 = true;
                            _iteratorError5 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion5 && _iterator5['return']) {
                                    _iterator5['return']();
                                }
                            } finally {
                                if (_didIteratorError5) {
                                    throw _iteratorError5;
                                }
                            }
                        }
                    }
                    if (teardown) {
                        teardown();
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4['return']) {
                        _iterator4['return']();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            this.bindings = [];

            var _arr = ['annotations', 'elements'];
            for (var _i = 0; _i < _arr.length; _i++) {
                var property = _arr[_i];
                var object = this.get(property);
                if (object) {
                    object.destroy();
                }
                this.set(property, null);
            }
        }
    });

    var DataElementStructure = ElementStructure.extend({
        model: null, // a sample
        definition: [],

        setDefinition: _ember['default'].on('init', _ember['default'].observer('model.orderedAnnotations.[]', function () {
            var _this2 = this;

            var sample = this.get('model');
            if (!sample) {
                this.set('definition', []);
            }
            var structurePromise = createStructure(sample);
            this.currentPromise = structurePromise;
            structurePromise.then(function (structure) {
                if (structurePromise === _this2.currentPromise) {
                    delete _this2.currentPromise;
                    _this2.set('definition', structure);
                }
            });
        }))
    });

    function createStructure(sample) {
        return sample.get('items').then(function (items) {
            return _ember['default'].RSVP.filter(items.toArray(), function (item) {
                return item && !item.get('isDeleted');
            }).then(function (filteredItems) {
                return _ember['default'].RSVP.map(filteredItems, function (item) {
                    return _ember['default'].RSVP.hash({
                        annotation: item,
                        children: item.get('annotations').then(function mapper(annotations) {
                            if (!annotations) {
                                return [];
                            }
                            return _ember['default'].RSVP.filter(annotations.toArray(), function (annotation) {
                                return !annotation.get('isDeleted');
                            }).then(function (filteredAnnotations) {
                                return _ember['default'].RSVP.map(filteredAnnotations, function (annotation) {
                                    if (annotation.constructor.modelName === 'annotation') {
                                        return {
                                            annotation: annotation
                                        };
                                    } else if (annotation.constructor.modelName === 'item') {
                                        return _ember['default'].RSVP.hash({
                                            annotation: annotation,
                                            children: annotation.get('annotations').then(mapper)
                                        });
                                    }
                                });
                            });
                        })
                    });
                });
            });
        });
    }

    function updateStructureSelectors(structure, selectorMatcher) {
        var selectorGenerators = (0, _portiaUiUtilsSelectors.createSelectorGenerators)(structure, selectorMatcher);
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
            for (var _iterator6 = selectorGenerators[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                var _step6$value = _slicedToArray(_step6.value, 2);

                var annotation = _step6$value[0];
                var selectorGenerator = _step6$value[1];

                var selector = selectorGenerator.get('selector');
                if (selectorGenerator instanceof _portiaUiUtilsSelectors.AnnotationSelectorGenerator) {
                    annotation.setProperties({
                        selector: selector,
                        xpath: selectorGenerator.get('xpath'),
                        repeated: selectorGenerator.get('repeatedAnnotation')
                    });
                    if (annotation.get('selectionMode') === 'css') {
                        annotation.setSelector(selector);
                    }
                } else if (selectorGenerator instanceof _portiaUiUtilsSelectors.ContainerSelectorGenerator) {
                    var containerSelector = selectorGenerator.get('containerSelector');
                    var siblings = selectorGenerator.get('siblings');
                    var element = selector ? selectorMatcher.query(selector) : [];
                    if (!element.length) {
                        annotation.setProperties({
                            selector: null,
                            repeatedSelector: null,
                            siblings: 0
                        });
                    } else if (element.length > 1) {
                        annotation.setProperties({
                            selector: containerSelector,
                            repeatedSelector: selector,
                            siblings: siblings
                        });
                    } else {
                        annotation.setProperties({
                            selector: selector,
                            repeatedSelector: null,
                            siblings: siblings
                        });
                    }
                }
                selectorGenerator.destroy();
            }
        } catch (err) {
            _didIteratorError6 = true;
            _iteratorError6 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion6 && _iterator6['return']) {
                    _iterator6['return']();
                }
            } finally {
                if (_didIteratorError6) {
                    throw _iteratorError6;
                }
            }
        }
    }

    exports['default'] = _ember['default'].Service.extend({
        selectorMatcher: _ember['default'].inject.service(),

        addStructure: function addStructure(model, attribute, Class) {
            if (!model) {
                return;
            }

            var selectorMatcher = this.get('selectorMatcher');
            model.set(attribute, Class.create({
                selectorMatcher: selectorMatcher,
                model: model
            }));
        },

        removeStructure: function removeStructure(model, attribute) {
            if (!model) {
                return;
            }

            var structure = model.get(attribute);
            if (structure) {
                structure.destroy();
                model.set(attribute, null);
            }
        },

        addDataStructure: function addDataStructure(sample) {
            this.addStructure(sample, 'dataStructure', DataElementStructure);
        },

        removeDataStructure: function removeDataStructure(sample) {
            this.removeStructure(sample, 'dataStructure');
        }
    });
});
define('portia-ui/services/api', ['exports', 'ember-api-requests/services/api'], function (exports, _emberApiRequestsServicesApi) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberApiRequestsServicesApi['default'];
    }
  });
});
define('portia-ui/services/browser', ['exports', 'ember', 'portia-ui/utils/utils'], function (exports, _ember, _portiaUiUtilsUtils) {
    var computed = _ember['default'].computed;
    var NAVIGATION_MODE = 'navigation';
    exports.NAVIGATION_MODE = NAVIGATION_MODE;
    var ANNOTATION_MODE = 'data-annotation';
    exports.ANNOTATION_MODE = ANNOTATION_MODE;
    var INTERACTION_MODES = new Set([ANNOTATION_MODE]);
    exports.INTERACTION_MODES = INTERACTION_MODES;
    var DEFAULT_MODE = NAVIGATION_MODE;

    exports.DEFAULT_MODE = DEFAULT_MODE;
    /* jshint ignore:start */
    var META_STYLE = '<style title="portia-show-meta">\n    head {\n        display: block;\n        display: -webkit-flex;\n        display: flex;\n        -webkit-flex-direction: column;\n        flex-direction: column;\n    }\n    title, meta, link {\n        display: block;\n    }\n    title {\n        -webkit-order: 0;\n        order: 0;\n        font-weight: bold;\n    }\n    title::before {\n        content: \'Title: \';\n        font-weight: normal;\n    }\n    meta {\n        -webkit-order: 1;\n        order: 1;\n    }\n    meta[name][content]::after {\n        content: attr(name) \': "\' attr(content) \'"\';\n    }\n    meta[property][content]::after {\n        content: attr(property) \': "\' attr(content) \'"\';\n    }\n    meta[itemprop][content]::after {\n        content: attr(itemprop) \': "\' attr(content) \'"\';\n    }\n    link {\n        -webkit-order: 2;\n        order: 2;\n    }\n    link[href][rel]::after {\n        content: \'Link: rel: "\' attr(rel) \'" href: "\' attr(data-portia-href) \'"\';\n    }\n    link[href][rel][data-portia-hidden-media]::after {\n        content: \'Link: rel: "\' attr(rel) \'" href: "\' attr(data-portia-href) \'" media: "\' attr(data-portia-hidden-media) \'"\';\n    }\n    link[href][rel][type]::after {\n        content: \'Link: rel: "\' attr(rel) \'" href: "\' attr(data-portia-href) \'" type: "\' attr(type) \'"\';\n    }\n    link[href][rel][type][data-portia-hidden-media]::after {\n        content: \'Link: rel: "\' attr(rel) \'" href: "\' attr(data-portia-href) \'" type: "\' attr(type) \'" media: "\' attr(data-portia-hidden-media) \'"\';\n    }\n</style>';
    /* jshint ignore:end */

    exports['default'] = _ember['default'].Service.extend(_ember['default'].Evented, {
        extractedItems: _ember['default'].inject.service(),
        webSocket: _ember['default'].inject.service(),

        backBuffer: [],
        cssEnabled: true,
        document: null,
        forwardBuffer: [],
        loading: false,
        mode: DEFAULT_MODE,
        _disabled: true,
        _url: null,
        baseurl: null,
        validUrl: true,

        invalidUrl: computed.not('validUrl'),

        disabled: _ember['default'].computed('_disabled', 'webSocket.closed', 'mode', {
            get: function get() {
                return this.get('_disabled') || this.get('webSocket.closed') || this.get('mode') !== NAVIGATION_MODE;
            },

            set: function set(key, value) {
                this.set('_disabled', value);
                return value || this.get('webSocket.closed') || this.get('mode') !== NAVIGATION_MODE;
            }
        }),
        isInteractionMode: _ember['default'].computed('mode', function () {
            return INTERACTION_MODES.has(this.get('mode'));
        }),
        url: _ember['default'].computed('_url', {
            get: function get() {
                return this.get('_url');
            },

            set: function set(key, value) {
                return this.go(value);
            }
        }),
        $document: _ember['default'].computed('document', function () {
            var document = this.get('document');
            return document ? _ember['default'].$(document) : null;
        }),

        init: function init() {
            var _this = this;

            this._super.apply(this, arguments);
            this.on('contentChanged', function () {
                _ember['default'].run.next(function () {
                    _ember['default'].run.scheduleOnce('sync', _this, 'checkCSS');
                });
            });
        },

        resetUrl: _ember['default'].observer('document', function () {
            if (!this.get('document')) {
                this.setProperties({
                    '_url': null,
                    'baseurl': null
                });
            }
        }),

        invalidateUrl: function invalidateUrl() {
            this.set('validUrl', false);
        },

        go: function go(url) {
            this.set('validUrl', true);
            var currentUrl = this.get('_url');
            url = (0, _portiaUiUtilsUtils.cleanUrl)(url);
            if (url && url !== currentUrl) {
                this._extract();

                this.beginPropertyChanges();
                if (currentUrl) {
                    this.get('backBuffer').pushObject(currentUrl);
                }
                this.set('_url', url);
                this.set('forwardBuffer', []);
                this.endPropertyChanges();
            }
            return url;
        },

        back: function back() {
            this._updateBuffers(this.get('backBuffer'), this.get('forwardBuffer'));
        },

        forward: function forward() {
            this._updateBuffers(this.get('forwardBuffer'), this.get('backBuffer'));
        },

        reload: function reload() {
            this.notifyPropertyChange('_url');
        },

        checkCSS: function checkCSS() {
            var $iframe = this.get('$document');
            var $showMetaStyleElement = $iframe.find('style[title="portia-show-meta"]');
            var cssEnabled = !$showMetaStyleElement.length;
            this.set('cssEnabled', cssEnabled);
        },

        disableCSS: function disableCSS() {
            if (![ANNOTATION_MODE].includes(this.get('mode'))) {
                return;
            }

            var iframe = this.get('document');
            if (this.get('cssEnabled') && iframe) {
                var $iframe = this.get('$document');
                var $styles = $iframe.find('style:not([title="portia-show-meta"]), link[rel="stylesheet"]');
                (0, _portiaUiUtilsUtils.renameAttr)($styles, 'media', 'data-portia-hidden-media');
                // disable stylesheets using an impossible media query
                $styles.attr('media', '(width: -1px)');
                (0, _portiaUiUtilsUtils.renameAttr)($iframe.find('[style]'), 'style', 'data-portia-hidden-style');
                $iframe.find('body').append(META_STYLE); // jshint ignore:line
                this.set('cssEnabled', false);
            }
        },

        enableCSS: function enableCSS() {
            if (![ANNOTATION_MODE].includes(this.get('mode'))) {
                return;
            }

            var iframe = this.get('document');
            if (!this.get('cssEnabled') && iframe) {
                var $iframe = this.get('$document');
                $iframe.find('style[title="portia-show-meta"]').remove();
                var $styles = $iframe.find('style:not([title="portia-show-meta"]), link[rel="stylesheet"]');
                $styles.attr('media', null);
                (0, _portiaUiUtilsUtils.renameAttr)($styles, 'data-portia-hidden-media', 'media');
                (0, _portiaUiUtilsUtils.renameAttr)($iframe.find('[data-portia-hidden-style]'), 'data-portia-hidden-style', 'style');
                this.set('cssEnabled', true);
            }
        },

        setAnnotationMode: function setAnnotationMode() {
            this.set('mode', ANNOTATION_MODE);
        },

        clearAnnotationMode: function clearAnnotationMode() {
            if (this.get('mode') === ANNOTATION_MODE) {
                this.set('mode', DEFAULT_MODE);
                this.enableCSS();
            }
        },

        _updateBuffers: function _updateBuffers(currentBuffer, otherBuffer) {
            if (currentBuffer.length) {
                this.beginPropertyChanges();
                otherBuffer.pushObject(this.get('_url'));
                var url = currentBuffer.popObject();
                this._extract();
                this.setProperties({
                    '_url': url,
                    'baseurl': null
                });
                this.endPropertyChanges();
            }
        },

        _extract: function _extract() {
            this.get('extractedItems').activateExtraction();
        }
    });
});
define('portia-ui/services/capabilities', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Service.extend({
        ajax: _ember['default'].inject.service(),

        fetchCapabilities: _ember['default'].on('init', function () {
            var _this = this;

            this.get('ajax').request('/server_capabilities').then(function (capabilities) {
                _this.setProperties(capabilities);
            }, function () {
                _ember['default'].run.later(_this, _this.fetchCapabilities, 5000);
            });
        })
    });
});
define('portia-ui/services/clock', ['exports', 'ember'], function (exports, _ember) {

    // based on an idea from https://www.rvdh.de/2014/11/14/time-based-triggers-in-ember-js/
    exports['default'] = _ember['default'].Service.extend({
        time: new Date(),

        metronome: _ember['default'].on('init', function () {
            var now = new Date();
            var interval = 1000 - +now % 1000;
            this.set('time', now);

            _ember['default'].run.later(this, this.metronome, interval);
        })
    });
});
define('portia-ui/services/dispatcher', ['exports', 'ember', 'portia-ui/models/sample', 'portia-ui/utils/start-urls', 'portia-ui/models/start-url', 'portia-ui/services/annotation-structure', 'portia-ui/components/inspector-panel', 'ember-concurrency'], function (exports, _ember, _portiaUiModelsSample, _portiaUiUtilsStartUrls, _portiaUiModelsStartUrl, _portiaUiServicesAnnotationStructure, _portiaUiComponentsInspectorPanel, _emberConcurrency) {
    exports.computedCanAddSpider = computedCanAddSpider;
    exports.computedCanAddSample = computedCanAddSample;
    exports.computedEditableSample = computedEditableSample;

    function computedCanAddSpider() {
        return _ember['default'].computed('browser.url', function () {
            return this.get('browser.url');
        });
    }

    function computedCanAddSample(spiderPropertyName) {
        return _ember['default'].computed('browser.url', 'browser.document', 'browser.loading', spiderPropertyName + '.samples.@each.url', 'browser.loading', function () {
            var url = this.get('browser.url');
            var document = this.get('browser.document');
            var loading = this.get('browser.loading');
            return url && document && !loading && !this.get(spiderPropertyName + '.samples').isAny('url', url);
        });
    }

    function computedEditableSample(spiderPropertyName) {
        return _ember['default'].computed('browser.url', spiderPropertyName + '.samples.@each.url', function () {
            var url = this.get('browser.url');
            if (!url) {
                return;
            }
            return this.get(spiderPropertyName + '.samples').findBy('url', url);
        });
    }

    exports['default'] = _ember['default'].Service.extend({
        api: _ember['default'].inject.service(),
        browser: _ember['default'].inject.service(),
        routing: _ember['default'].inject.service('-routing'),
        selectorMatcher: _ember['default'].inject.service(),
        store: _ember['default'].inject.service(),
        uiState: _ember['default'].inject.service(),
        webSocket: _ember['default'].inject.service(),

        addProject: function addProject(name) {
            var _this = this;

            var redirect = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

            var store = this.get('store');
            var project = store.createRecord('project', {
                name: name
            });
            return project.save().then(function () {
                if (redirect) {
                    var routing = _this.get('routing');
                    routing.transitionTo('projects.project', [project], {}, true);
                }
                return project;
            });
        },

        addSchema: function addSchema(project) {
            var redirect = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

            var name = 'schema' + (project.get('schemas.length') + 1);
            return this.addNamedSchema(project, name, redirect);
        },

        addNamedSchema: function addNamedSchema(project, name) {
            var _this2 = this;

            var redirect = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

            var store = this.get('store');
            var schema = store.createRecord('schema', {
                name: name,
                project: project
            });
            return schema.save().then(function () {
                if (redirect) {
                    schema.set('new', true);
                    var routing = _this2.get('routing');
                    routing.transitionTo('projects.project.schema', [schema], {}, true);
                }
                return schema;
            });
        },

        addField: function addField(schema, type) {
            var redirect = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

            var name = 'field' + (schema.get('fields.length') + 1);
            return this.addNamedField(schema, name, type, redirect);
        },

        addNamedField: function addNamedField(schema, name, type) {
            var _this3 = this;

            var redirect = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

            var store = this.get('store');
            var field = store.createRecord('field', {
                name: name,
                type: type || 'text',
                schema: schema
            });
            return field.save().then(function (field) {
                if (redirect) {
                    field.set('new', true);
                    var routing = _this3.get('routing');
                    routing.transitionTo('projects.project.schema.field', [field], {}, true);
                }
                return field;
            });
        },

        addSpider: function addSpider(project) {
            var _this4 = this;

            var redirect = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

            var url = this.get('browser.url');
            if (!url) {
                return;
            }
            var name = url;
            var matches = url.match('//([a-zA-Z0-9\._-]*)');
            var store = this.get('store');
            if (matches && matches.length) {
                name = matches.slice(-1)[0];
                name = name.replace(/www\./, '');
                name = name.replace(/\.com|\.net|\.co/, '');
                name = name.replace(/\.eg|\.ae|\.sa|\.ke/, '');
                name = name.replace(/^eg\.|^sa\.|^ae\.|^ke\.|^egypt\.|^saudi\.|^uae\.|^en-ae\.|^en-sa\./, '');
            } else {
                name = name.replace(/www\./, '');
                name = url.replace(/[^a-zA-Z0-9_\.-]/g, '');
                name = name.replace(/\.com|\.net|\.co/, '');
                name = name.replace(/\.eg|\.ae|\.sa|\.ke/, '');
                name = name.replace(/^eg\.|^sa\.|^ae\.|^ke\.|^egypt\.|^saudi\.|^uae\.|^en-ae\.|^en-sa\./, '');
            }
            var baseName = name;
            var counter = 1;
            while (store.peekRecord('spider', name)) {
                name = baseName + '_' + counter;
                counter += 1;
            }
            var spider = store.createRecord('spider', {
                id: name,
                startUrls: [(0, _portiaUiModelsStartUrl['default'])({ url: url })],
                project: project
            });
            spider.set('project', project);
            spider.save().then(function () {
                if (redirect) {
                    spider.set('new', true);
                    var routing = _this4.get('routing');
                    routing.transitionTo('projects.project.spider', [spider], {}, true);
                }
            });
            return spider;
        },

        addStartUrl: function addStartUrl(spider, url) {
            if (url && !(0, _portiaUiUtilsStartUrls.includesUrl)(spider, url)) {
                return (0, _portiaUiModelsStartUrl['default'])({ url: url }).save(spider);
            }
        },

        addGeneratedUrl: function addGeneratedUrl(spider, url) {
            var spec = { type: 'generated' };

            if (!url || (0, _portiaUiUtilsStartUrls.includesUrl)(spider, url)) {
                spec.url = 'http://';
                return (0, _portiaUiModelsStartUrl['default'])(spec).save(spider);
            }
            if (!(0, _portiaUiUtilsStartUrls.includesUrl)(spider, url)) {
                spec.url = url;
                return (0, _portiaUiModelsStartUrl['default'])(spec).save(spider);
            }
        },

        addFeedUrl: function addFeedUrl(spider, url) {
            return (0, _portiaUiModelsStartUrl['default'])({ url: url, type: 'feed' }).save(spider);
        },

        addSample: function addSample(spider) {
            var _this5 = this;

            var redirect = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

            var url = this.get('browser.url');
            var document = this.get('browser.document');
            var loading = this.get('browser.loading');
            if (!url || !document || loading) {
                return;
            }

            var store = this.get('store');
            var name = _portiaUiModelsSample['default'].normalizeTitle(this.get('browser.document').title);
            var sample = store.createRecord('sample', {
                name: name,
                body: 'original_body',
                url: url,
                spider: spider
            });
            sample.save().then(function () {
                _this5.get('webSocket')._sendPromise({
                    _command: 'save_html',
                    project: spider.get('project.id'),
                    spider: spider.get('id'),
                    sample: sample.get('id')
                });

                if (redirect) {
                    sample.set('new', true);
                    var routing = _this5.get('routing');
                    routing.transitionTo('projects.project.spider.sample', [sample], {}, true);
                }
            });
            return sample;
        },

        addItem: function addItem(sample) {
            var redirect = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

            return this._addItem({
                sample: sample
            }, redirect);
        },

        addNestedItem: function addNestedItem(parentItem) {
            var redirect = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

            return this._addItem({
                parent: parentItem
            }, redirect);
        },

        _addItem: function _addItem(attributes) {
            var _this6 = this;

            var redirect = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

            var store = this.get('store');
            var item = store.createRecord('item', attributes);
            this.saveAnnotationAndRelatedSelectors(item).then(function () {
                if (redirect) {
                    item.set('new', true);
                    var routing = _this6.get('routing');
                    routing.transitionTo('projects.project.spider.sample.data.item', [item], {}, true);
                }
            });
            return item;
        },

        addAnnotation: function addAnnotation(item, element, attribute) {
            var _this7 = this;

            var redirect = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

            if (!item) {
                var activeItem = undefined;
                var activeAnnotation = undefined;
                if (activeItem = this.get('uiState.models.item')) {
                    item = activeItem;
                } else if (activeAnnotation = this.get('uiState.models.annotation')) {
                    item = activeAnnotation.get('parent');
                } else {
                    item = this.get('uiState.models.sample.items.lastObject');
                }
            }
            var store = this.get('store');
            var annotation = store.createRecord('annotation', {
                parent: item
            });
            if (element) {
                annotation.addElement(element);
                attribute = attribute || (0, _portiaUiComponentsInspectorPanel.getDefaultAttribute)(element);
            }

            if (attribute !== undefined) {
                annotation.set('attribute', attribute);
            }
            this.saveAnnotationAndRelatedSelectors(annotation).then(function () {
                if (redirect) {
                    annotation.set('new', true);
                }
                if (element) {
                    _this7.selectAnnotationElement(annotation, element, redirect);
                } else if (redirect) {
                    _this7.selectAnnotation(annotation);
                }
            });
            return annotation;
        },

        saveAnnotationAndRelatedSelectors: function saveAnnotationAndRelatedSelectors(annotation) {
            var _this8 = this;

            if (!annotation.get('ownerSample')) {
                return new _ember['default'].RSVP.Promise.resolve();
            }

            return annotation.get('ownerSample').then(function (sample) {
                return _this8.updateSampleSelectors(sample).then(function () {
                    var coalesce = [];
                    var _iteratorNormalCompletion = true;
                    var _didIteratorError = false;
                    var _iteratorError = undefined;

                    try {
                        for (var _iterator = sample.get('orderedChildren')[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                            var child = _step.value;

                            if (child === annotation) {
                                continue;
                            }
                            if (child.constructor.modelName === 'item') {
                                coalesce.push({
                                    model: child,
                                    options: {
                                        partial: ['selector', 'repeatedSelector', 'siblings']
                                    }
                                });
                            } else if (child.constructor.modelName === 'annotation') {
                                coalesce.push({
                                    model: child,
                                    options: {
                                        partial: ['selectionMode', 'selector', 'xpath']
                                    }
                                });
                            }
                        }
                    } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion && _iterator['return']) {
                                _iterator['return']();
                            }
                        } finally {
                            if (_didIteratorError) {
                                throw _iteratorError;
                            }
                        }
                    }

                    return annotation.save(coalesce.length ? {
                        coalesce: coalesce
                    } : undefined);
                });
            });
        },

        addAnnotationTypeExtractor: function addAnnotationTypeExtractor(annotation, type) {
            var store = this.get('store');
            var project = annotation.get('ownerSample.spider.project');
            return project.get('extractors').then(function (extractors) {
                var existing = extractors.find(function (extractor) {
                    return extractor.get('type') === 'type' && extractor.get('value') === type;
                });
                var extractorPromise = undefined;
                if (existing) {
                    extractorPromise = _ember['default'].RSVP.resolve(existing);
                } else {
                    var extractor = store.createRecord('extractor', {
                        project: project,
                        type: 'type',
                        value: type
                    });
                    extractorPromise = extractor.save();
                }
                return extractorPromise.then(function (extractor) {
                    annotation.get('extractors').pushObject(extractor);
                    return annotation.save().then(function () {
                        return extractor;
                    });
                });
            });
        },

        addAnnotationRegexExtractor: function addAnnotationRegexExtractor(annotation, extractor) {
            annotation.get('extractors').pushObject(extractor);
            return annotation.save().then(function () {
                return extractor;
            });
        },

        addNewAnnotationRegexExtractor: function addNewAnnotationRegexExtractor(annotation) {
            var store = this.get('store');
            var project = annotation.get('ownerSample.spider.project');
            var extractor = store.createRecord('extractor', {
                project: project,
                type: 'regex',
                value: '(.*)'
            });
            return extractor.save().then(function (extractor) {
                extractor.set('new', true);
                annotation.get('extractors').pushObject(extractor);
                return annotation.save().then(function () {
                    return extractor;
                });
            });
        },

        addFragment: function addFragment(startUrl) {
            var emptyFragment = { type: 'fixed', value: '' };
            startUrl.fragments.addObject(emptyFragment);
        },

        changeId: function changeId(model, json) {
            // HACK: Ember data does not support changing a record's id
            // This mechanism bypasses this contraint.

            var store = this.get('store');

            var internalModel = model._internalModel;
            var newId = json.data.id;

            // Update internal store with internal model
            var recordMap = store.typeMapFor(internalModel.type).idToRecord;
            delete recordMap[internalModel.id];
            recordMap[newId] = internalModel;

            // Allows changing ED model id
            internalModel.id = newId;
            // Allows adapters to infer the correct url
            internalModel._links.self = json.data.links.self;

            model.set('id', newId);
        },

        changeSpiderName: function changeSpiderName(spider) {
            if (!spider.get('name') || spider.get('name') === spider.get('id')) {
                return new _ember['default'].RSVP.Promise(function (resolve) {
                    return resolve({
                        data: {
                            links: { self: spider._internalModel._links.self },
                            id: spider.get('id')
                        } });
                });
            }
            var data = { name: spider.get('name') };
            return this.get('api').post('rename', {
                model: spider,
                jsonData: data
            });
        },

        changeAnnotationSource: function changeAnnotationSource(annotation, attribute) {
            if (annotation) {
                annotation.set('attribute', attribute);
                annotation.save();
            }
        },

        removeSchema: function removeSchema(schema) {
            var currentSchema = this.get('uiState.models.schema');
            if (schema === currentSchema) {
                var routing = this.get('routing');
                routing.transitionTo('projects.project', [], {}, true);
            }
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = schema.get('fields.content').currentState[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var field = _step2.value;

                    field.unloadRecord();
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                        _iterator2['return']();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            schema.destroyRecord();
        },

        removeField: function removeField(field) {
            var currentField = this.get('uiState.models.field');
            if (field === currentField) {
                var routing = this.get('routing');
                routing.transitionTo('projects.project.schema', [], {}, true);
            }
            field.destroyRecord();
        },

        removeSpider: function removeSpider(spider) {
            var currentSpider = this.get('uiState.models.spider');
            if (spider === currentSpider) {
                var routing = this.get('routing');
                routing.transitionTo('projects.project', [], {}, true);
            }
            spider.destroyRecord();
        },

        removeStartUrl: function removeStartUrl(spider, url) {
            spider.get('startUrls').removeObject(url);
            spider.save();
        },

        replaceStartUrl: function replaceStartUrl(spider, oldUrl, newUrl) {
            var urls = spider.get('startUrls');

            var oldStartUrl = urls.filterBy('url', oldUrl)[0];
            urls.removeObject(oldStartUrl);

            if (!(0, _portiaUiUtilsStartUrls.includesUrl)(spider, newUrl)) {
                urls.addObject((0, _portiaUiModelsStartUrl['default'])({ url: newUrl, type: 'url' }));
            }
            spider.save();
        },

        removeSample: function removeSample(sample) {
            var currentSample = this.get('uiState.models.sample');
            if (sample === currentSample) {
                var routing = this.get('routing');
                routing.transitionTo('projects.project.spider', [], {}, true);
            }
            sample.destroyRecord();
        },

        removeItem: function removeItem(item) {
            var currentItem = this.get('uiState.models.item');
            var currentAnnotation = this.get('uiState.models.annotation');
            if (item === currentItem || item.get('orderedAnnotations').includes(currentAnnotation)) {
                var routing = this.get('routing');
                routing.transitionTo('projects.project.spider.sample.data', [], {}, true);
            }
            item.deleteRecord();
            this.saveAnnotationAndRelatedSelectors(item);
        },

        removeAnnotation: function removeAnnotation(annotation) {
            this.get('_removeAnnotationTask').perform(annotation);
        },

        _removeAnnotationTask: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0(annotation) {
            var currentAnnotation, routing;
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        currentAnnotation = this.get('uiState.models.annotation');

                        if (annotation === currentAnnotation) {
                            routing = this.get('routing');

                            routing.transitionTo('projects.project.spider.sample.data', [], {}, true);
                        }
                        annotation.deleteRecord();
                        context$1$0.next = 5;
                        return this.saveAnnotationAndRelatedSelectors(annotation);

                    case 5:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this);
        })).drop(),

        removeAnnotationExtractor: function removeAnnotationExtractor(annotation, extractor) {
            annotation.get('extractors').removeObject(extractor);
            annotation.save();
        },

        removeFragment: function removeFragment(startUrl, fragment) {
            startUrl.fragments.removeObject(fragment);
        },

        selectAnnotation: function selectAnnotation(annotation) {
            if (this.get('uiState.models.annotation') !== annotation) {
                var routing = this.get('routing');
                routing.transitionTo('projects.project.spider.sample.data.annotation', [annotation], {}, true);
            }
        },

        selectAnnotationElement: function selectAnnotationElement(annotation, element) {
            var redirect = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

            this.set('uiState.viewPort.selectedElement', element);
            this.set('uiState.viewPort.originalSelectedElement', element);
            this.set('uiState.viewPort.selectedModel', annotation);
            if (redirect) {
                this.selectAnnotation(annotation);
            }
        },

        clearSelection: function clearSelection() {
            this.set('uiState.viewPort.selectedElement', null);
            this.set('uiState.viewPort.originalSelectedElement', null);
            var routing = this.get('routing');
            var currentRouteName = routing.get('router.currentRouteName');
            var nextRouteName = undefined;
            if (currentRouteName.startsWith('projects.project.spider.sample')) {
                nextRouteName = currentRouteName.split('.').slice(0, 5).join('.');
            } else {
                nextRouteName = 'projects.project.spider.sample';
            }
            routing.transitionTo(nextRouteName, [], {}, true);
        },

        addElementToAnnotation: function addElementToAnnotation(annotation, element) {
            var _this9 = this;

            annotation.addElement(element);
            this.saveAnnotationAndRelatedSelectors(annotation).then(function () {
                _this9.selectAnnotationElement(annotation, element);
            });
        },

        removeElementFromAnnotation: function removeElementFromAnnotation(annotation, element) {
            annotation.removeElement(element);
            this.selectAnnotation(annotation);
            this.saveAnnotationAndRelatedSelectors(annotation);
        },

        updateSampleSelectors: function updateSampleSelectors(sample) {
            var selectorMatcher = this.get('selectorMatcher');
            return (0, _portiaUiServicesAnnotationStructure.createStructure)(sample).then(function (structure) {
                (0, _portiaUiServicesAnnotationStructure.updateStructureSelectors)(structure, selectorMatcher);
                return null;
            });
        }
    });
});
define('portia-ui/services/extracted-items', ['exports', 'ember', 'ember-concurrency'], function (exports, _ember, _emberConcurrency) {
    var computed = _ember['default'].computed;

    var SECOND = 1000;
    var INITIAL_TIMEOUT = 2 * SECOND;
    var MAX_TIMEOUT = 30 * SECOND;

    exports['default'] = _ember['default'].Service.extend({
        uiState: _ember['default'].inject.service(),
        webSocket: _ember['default'].inject.service(),

        items: [],
        links: {},

        isExtracting: false,
        failedExtraction: false,
        extractionTimeout: 0,

        spider: computed.readOnly('uiState.models.spider'),
        sample: computed.readOnly('uiState.models.sample'),
        noSamples: computed.equal('spider.samples.length', 0),

        init: function init() {
            this._super();
            var ws = this.get('webSocket');

            ws.addCommand('metadata', this, this._setItems);
            ws.addCommand('extract_items', this, this._setExtraction);
        },

        activateExtraction: function activateExtraction() {
            this.set('items', []);
            this.set('extractionTimeout', 0);
            this.set('isExtracting', true);
            this.set('failedExtraction', false);
            this.get('_extract').cancelAll();
        },

        failExtraction: function failExtraction(msg) {
            this._finishExtraction();
            this.set('failedExtraction', true);
            this.set('failedExtractionMsg', msg);
        },

        update: function update() {
            _ember['default'].run.throttle(this, this._getitems, 300, false);
        },

        _getitems: function _getitems() {
            var spiderId = this.get('spider.id');
            if (spiderId) {
                this.get('webSocket').send({
                    _command: 'extract_items',
                    project: this.get('uiState.models.project.id'),
                    spider: spiderId,
                    sample: this.get('sample.id')
                });
            }
        },

        _setExtraction: function _setExtraction(data) {
            if (this.get('noSamples')) {
                this.failExtraction('Samples are needed for extracting data.');
                return;
            }

            this._updateItems(data);
            this._updateExtraction(data);
            this._setItems(data);
        },

        _extract: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            var t;
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        t = this.get('extractionTimeout');
                        context$1$0.next = 3;
                        return (0, _emberConcurrency.timeout)(t);

                    case 3:
                        this.update();
                        this.set('extractionTimeout', t === 0 ? INITIAL_TIMEOUT : t * 2);

                    case 5:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this);
        })).drop(),

        _setItems: function _setItems(data) {
            this._startExtraction(data);

            this.setProperties({
                'links': data.links,
                'changes': data.changes,
                'type': data.type,
                'changed_values': data.changed_values
            });
        },

        _startExtraction: function _startExtraction(data) {
            if (data.loaded && this.get('isExtracting')) {
                this.get('_extract').perform();
            }
        },

        _updateItems: function _updateItems(data) {
            var items = data.items;
            var newItems = items && items.length >= this.get('items.length');

            if (newItems) {
                this.set('items', items);
            }
        },

        _updateExtraction: function _updateExtraction(data) {
            var receivedItems = data.items && data.items.length > 0;
            // Ensures the wait time is 254 seconds ~ 4 minutes
            var exceedWait = this.get('extractionTimeout') > MAX_TIMEOUT;

            if (receivedItems || exceedWait) {
                this._finishExtraction();
            } else {
                this.get('_extract').perform();
            }
        },

        _finishExtraction: function _finishExtraction() {
            this.set('isExtracting', false);
            this.get('_extract').cancelAll();
        }
    });
});
define('portia-ui/services/modal-dialog', ['exports', 'ember', 'ember-modal-dialog/services/modal-dialog', 'portia-ui/config/environment'], function (exports, _ember, _emberModalDialogServicesModalDialog, _portiaUiConfigEnvironment) {
  var computed = _ember['default'].computed;
  exports['default'] = _emberModalDialogServicesModalDialog['default'].extend({
    destinationElementId: computed(function () {
      /*
        everywhere except test, this property will be overwritten
        by the initializer that appends the modal container div
        to the DOM. because initializers don't run in unit/integration
        tests, this is a nice fallback.
      */
      if (_portiaUiConfigEnvironment['default'].environment === 'test') {
        return 'ember-testing';
      }
    })
  });
});
define('portia-ui/services/notification-manager', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Service.extend({
        banners: [],
        notifications: [],

        add: function add(options) {
            /*
                properties:
                    title (optional),
                    message,
                    type (optional): info (default), warning, success, danger
            */
            return this.get('notifications').pushObject(options);
        },

        addBanner: function addBanner(options) {
            return this.get('banners').addObject(options);
        },

        removeBanner: function removeBanner(options) {
            return this.get('banners').removeObject(options);
        },

        showNotification: function showNotification(title, message, type) {
            if (title && !message) {
                message = title;
                title = null;
            }
            if (message) {
                this.add({
                    title: title,
                    message: message,
                    type: type || 'info'
                });
            }
        },

        showSuccessNotification: function showSuccessNotification(title, message) {
            this.showNotification(title, message, 'success');
        },

        showWarningNotification: function showWarningNotification(title, message) {
            this.showNotification(title, message, 'warning');
        },

        showErrorNotification: function showErrorNotification(title, message) {
            this.showNotification(title, message, 'danger');
        }
    });
});
define('portia-ui/services/overlays', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Service.extend({
        counter: 0,

        hasOverlays: _ember['default'].computed.bool('counter'),

        add: function add() {
            this.incrementProperty('counter');
        },

        remove: function remove() {
            this.decrementProperty('counter');
        }
    });
});
define('portia-ui/services/position-monitor', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Service.extend({
        elements: [],
        timerId: null,

        registerElement: function registerElement(element, context, readCallback, writeCallback) {
            var options = {
                element: element,
                context: context,
                readCallback: readCallback,
                writeCallback: writeCallback,
                rects: null,
                boundingRect: null
            };
            this.elements.push(options);
            if (this.timerId === null) {
                this.update();
            }
        },

        unRegisterElement: function unRegisterElement(element, context, readCallback, writeCallback) {
            var elements = this.elements;
            var match = elements.find(function (options) {
                return options.element === element && options.context === context && options.readCallback === readCallback && options.writeCallback === writeCallback;
            });
            if (match) {
                elements.removeObject(match);
                if (!elements.length) {
                    cancelAnimationFrame(this.timerId);
                    this.timerId = null;
                }
            }
        },

        update: function update(elements) {
            elements = Array.isArray(elements) ? elements : this.elements;
            var updates = [];
            // for performance first do DOM reads ...
            elements.forEach(function (options) {
                var element = options.element;
                var rects = options.rects;

                var newRects = element.getClientRects();
                var changed = false;
                if (!rects || rects.length !== newRects.length) {
                    changed = true;
                } else {
                    for (var i = 0; i < rects.length; i++) {
                        var rect = rects[i];
                        var newRect = newRects[i];
                        if (newRect.top !== rect.top || newRect.bottom !== rect.bottom || newRect.left !== rect.left || newRect.right !== rect.right) {
                            changed = true;
                            break;
                        }
                    }
                }
                if (changed) {
                    options.rects = newRects;
                    options.boundingRect = element.getBoundingClientRect();
                    updates.push(options);
                }
            });
            // ... then run callbacks which will perform additional DOM reads ...
            updates.forEach(function (_ref) {
                var element = _ref.element;
                var context = _ref.context;
                var readCallback = _ref.readCallback;
                var rects = _ref.rects;
                var boundingRect = _ref.boundingRect;

                if (readCallback) {
                    readCallback.call(context, rects, boundingRect, element);
                }
            });
            // ... then run callbacks which will perform DOM writes
            updates.forEach(function (_ref2) {
                var element = _ref2.element;
                var context = _ref2.context;
                var writeCallback = _ref2.writeCallback;
                var rects = _ref2.rects;
                var boundingRect = _ref2.boundingRect;

                writeCallback.call(context, rects, boundingRect, element);
            });
            this.timerId = requestAnimationFrame(this.update.bind(this));
        }
    });
});
define('portia-ui/services/saving-notification', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = _ember['default'].Service.extend({
        extractedItems: _ember['default'].inject.service(),

        counter: 0,
        lastSaved: null,

        isSaving: _ember['default'].computed.bool('counter'),

        start: function start() {
            this.get('extractedItems').activateExtraction();

            this.incrementProperty('counter');
        },

        end: function end() {
            this.decrementProperty('counter');
            var counter = this.get('counter');
            if (!counter) {
                this.set('lastSaved', new Date());
            }
            this.get('extractedItems').update();
        }
    });
});
define('portia-ui/services/selector-matcher', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    function nodesEqual(nodesA, nodesB) {
        if (nodesA.length !== nodesB.length) {
            return false;
        }
        for (var i = nodesA.length; i--;) {
            if (nodesA[i] !== nodesB[i]) {
                return false;
            }
        }
        return true;
    }

    exports['default'] = _ember['default'].Service.extend(_ember['default'].Evented, {
        browser: _ember['default'].inject.service(),

        selectors: new Map(),
        timerId: null,
        updateInterval: 100,

        register: function register(selector, target, method) {
            var elements = this.selectors.get(selector);
            if (elements) {
                if (method) {
                    method.call(target, elements);
                } else {
                    target(elements);
                }
            } else {
                this.selectors.set(selector, []);
            }
            if (this.timerId === null) {
                this.scheduleUpdate(1);
            }
            this.on.apply(this, arguments);
        },

        unRegister: function unRegister(selector) {
            this.off.apply(this, arguments);
            if (!this.has(selector)) {
                this.selectors['delete'](selector);
                if (!this.selectors.size) {
                    _ember['default'].run.cancel(this.timerId);
                    this.timerId = null;
                }
            }
        },

        watch: function watch(target, method) {
            this.on('changed', target, method);
        },

        unWatch: function unWatch(target, method) {
            this.off('changed', target, method);
        },

        query: function query(selector) {
            var $document = this.get('browser.$document');
            if ($document) {
                var elements = this.selectors.get(selector);
                if (!elements) {
                    return $document.find(selector).toArray();
                } else if (!elements.length) {
                    elements = $document.find(selector).toArray();
                    this.selectors.set(selector, elements);
                }
                return elements;
            } else {
                return [];
            }
        },

        scheduleUpdate: function scheduleUpdate(delay) {
            _ember['default'].run.cancel(this.timerId);
            this.timerId = _ember['default'].run.later(this, this.update, delay);
        },

        update: function update() {
            var _this = this;

            var $document = this.get('browser.$document');
            if ($document) {
                (function () {
                    var updates = [];
                    _this.selectors.forEach(function (currentElements, selector) {
                        var newElements = $document.find(selector).toArray();
                        if (!nodesEqual(currentElements, newElements)) {
                            _this.selectors.set(selector, newElements);
                            updates.push([selector, newElements]);
                        }
                    });

                    if (updates.length) {
                        updates.forEach(function (_ref) {
                            var _ref2 = _slicedToArray(_ref, 2);

                            var selector = _ref2[0];
                            var elements = _ref2[1];

                            _this.trigger(selector, elements);
                        });
                        _this.trigger('changed', updates);
                    }
                })();
            }
            this.scheduleUpdate(this.updateInterval);
        }
    });
});
define('portia-ui/services/store', ['exports', 'ember-data'], function (exports, _emberData) {
    exports['default'] = _emberData['default'].Store.extend({
        didSaveRecord: function didSaveRecord(internalModel, dataArg) {
            // update record id if data has different id
            // TODO: support rollback of id change
            var recordMap = this.typeMapFor(internalModel.type).idToRecord;
            if (internalModel.id !== null && !(internalModel.id in recordMap)) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;

                try {
                    for (var _iterator = Object.keys(recordMap)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                        var id = _step.value;

                        if (recordMap[id] === internalModel) {
                            delete recordMap[id];
                            recordMap[internalModel.id] = internalModel;
                        }
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion && _iterator['return']) {
                            _iterator['return']();
                        }
                    } finally {
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
            }

            if (dataArg && dataArg.data && dataArg.data.links) {
                this.updateRecordLinks(internalModel, dataArg.data.links);
            }

            return this._super.apply(this, arguments);
        },

        _load: function _load(data) {
            var internalModel = this._super.apply(this, arguments);
            this.updateRecordLinks(internalModel, data.links);
            return internalModel;
        },

        updateRecordLinks: function updateRecordLinks(internalModel, links) {
            internalModel._links = links || internalModel._links || {};
        }
    });
});
define('portia-ui/services/ui-state', ['exports', 'ember', 'ember-local-storage'], function (exports, _ember, _emberLocalStorage) {
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    function computedActiveRoutes(mapping) {
        var properties = Object.keys(mapping);
        return _ember['default'].computed.apply(_ember['default'], ['router.currentState'].concat(_toConsumableArray(properties.map(function (key) {
            return mapping[key];
        })), [function () {
            var _this = this;

            var activeRoutes = {};
            var currentRouteName = this.get('router.currentRouteName');
            properties.forEach(function (property) {
                var routeProperty = mapping[property];
                var routeName = _this.get(routeProperty + '.routeName');
                activeRoutes[property] = currentRouteName.startsWith(routeName);
            });
            return activeRoutes;
        }]));
    }

    function computedRouteModels(mapping) {
        var properties = Object.keys(mapping);
        return _ember['default'].computed.apply(_ember['default'], ['router.currentState'].concat(_toConsumableArray(properties.map(function (key) {
            return mapping[key];
        })), [function () {
            var _this2 = this;

            var models = {};
            var currentRouteName = this.get('router.currentRouteName');
            properties.forEach(function (property) {
                var routeProperty = mapping[property];
                var routeName = _this2.get(routeProperty + '.routeName');
                var startsWithRoute = currentRouteName && currentRouteName.startsWith(routeName);
                models[property] = startsWithRoute ? _this2.get(routeProperty).modelFor(routeName) : null;
            });
            return models;
        }]));
    }

    exports['default'] = _ember['default'].Service.extend({
        models: computedRouteModels({
            project: 'projectRoute',
            spider: 'spiderRoute',
            sample: 'sampleRoute',
            item: 'itemRoute',
            annotation: 'annotationRoute',
            schema: 'schemaRoute',
            field: 'fieldRoute'
        }),
        routes: computedActiveRoutes({
            project: 'projectRoute',
            spider: 'spiderRoute',
            sample: 'sampleRoute',
            data: 'dataRoute',
            item: 'itemRoute',
            annotation: 'annotationRoute',
            schema: 'schemaRoute',
            field: 'fieldRoute'
        }),
        slideMain: false,
        selectedTools: (0, _emberLocalStorage.storageFor)('uiStateSelectedTools'),
        collapsedPanels: (0, _emberLocalStorage.storageFor)('uiStateCollapsedPanels'),
        viewPort: {
            hoveredElement: null,
            hoveredModels: [],
            // When the selected element is changed by clicking a parent in
            // the inspector, this is the original element that was selected
            originalSelectedElement: null,
            selectedElement: null,
            selectedModel: null,
            hoverOverlayColor: null
        }
    });
});
define('portia-ui/services/web-socket', ['exports', 'ember', 'portia-ui/config/environment', 'portia-ui/utils/utils'], function (exports, _ember, _portiaUiConfigEnvironment, _portiaUiUtilsUtils) {

    var APPLICATION_UNLOADING_CODE = 4001;
    var DEFAULT_RECONNECT_TIMEOUT = 5000;
    var DEFAULT_MAX_RECONNECT_TIMEOUT = 60000;

    var defaultUrl = function defaultUrl() {
        var uri = URI.parse(_portiaUiConfigEnvironment['default'].SLYD_URL || window.location.protocol + '//' + window.location.host);
        if (!/wss?/.test(uri.protocol)) {
            uri.protocol = uri.protocol === 'https' ? 'wss' : 'ws';
        }
        uri.path = '/ws';
        return URI.build(uri);
    };

    exports['default'] = _ember['default'].Service.extend(_ember['default'].Evented, {

        closed: true,
        opened: _ember['default'].computed.not('closed'),
        connecting: false,
        ws: null,
        heartbeat: null,
        nextConnect: null,
        reconnectTimeout: DEFAULT_RECONNECT_TIMEOUT,
        deferreds: {},
        url: defaultUrl(),
        secondsUntilReconnect: 0,
        reconnectImminent: _ember['default'].computed.lt('secondsUntilReconnect', 2),

        init: function init(options) {
            var _this = this;

            if (options) {
                this.setProperties(options);
            }

            window.addEventListener('beforeunload', function () {
                if (_this.get('opened')) {
                    _this.close(APPLICATION_UNLOADING_CODE);
                }
            });
        },

        connect: function connect() {
            if (this.get('closed')) {
                return this._createWebsocket();
            }
        },

        _updateCountdownTimer: (function () {
            var _this2 = this;

            if (this.secondsUntilReconnect === 0 && this.get('countdownTid')) {
                clearInterval(this.get('countdownTid'));
                this.set('countdownTid', null);
            } else if (this.secondsUntilReconnect > 0 && !this.get('countdownTid')) {
                this.set('countdownTid', setInterval(function () {
                    _this2.decrementProperty('secondsUntilReconnect');
                }, 1000));
            }
        }).observes('secondsUntilReconnect'),

        _onclose: function _onclose(e) {
            if (this.heartbeat) {
                clearInterval(this.heartbeat);
            }
            this.set('closed', true);
            this.set('connecting', false);
            _ember['default'].Logger.log('<Closed Websocket>');
            if (e.code !== APPLICATION_UNLOADING_CODE && e.code !== 1000) {
                var timeout = this._connectTimeout();
                this.set('secondsUntilReconnect', Math.round(timeout / 1000));
                var next = _ember['default'].run.later(this, this.connect, timeout);
                this.set('reconnectTid', next);
            }
        },

        _onmessage: function _onmessage(_ref) {
            var data = _ref.data;

            try {
                data = JSON.parse(data);
            } catch (err) {
                return (0, _portiaUiUtilsUtils.logError)('Error parsing data returned by server: ' + err + '\n' + data);
            }
            var command = data._command;
            if (!command) {
                return (0, _portiaUiUtilsUtils.logError)('Received response with no command: ' + JSON.stringify(data));
            }
            var deferred = data.id;
            if (deferred in this.get('deferreds')) {
                deferred = this.get('deferreds.' + deferred);
                delete this.get('deferreds')[data.id];
                if (data.error) {
                    var err = new Error(data.reason);
                    err.reason = { jqXHR: { responseText: data.reason } };
                    deferred.reject(err);
                    throw err;
                } else {
                    deferred.resolve(data);
                }
            }
            if (this.has(command)) {
                this.trigger(command, data);
            } else {
                return (0, _portiaUiUtilsUtils.logError)('Received unknown command: ' + command);
            }
        },

        _onopen: function _onopen() {
            _ember['default'].Logger.log('<Opened Websocket>');
            this.set('closed', false);
            this.set('connecting', false);
            this.set('reconnectTimeout', DEFAULT_RECONNECT_TIMEOUT);
            this.heartbeat = setInterval((function () {
                this.send({ _command: 'heartbeat' });
            }).bind(this), 20000);
        },

        _createWebsocket: function _createWebsocket() {
            if (this.get('reconnectTid')) {
                _ember['default'].run.cancel(this.get('reconnectTid'));
                this.set('reconnectTid', null);
            }
            this.set('secondsUntilReconnect', 0);
            this.set('connecting', true);
            var ws;
            try {
                ws = new WebSocket(this.get('url'));
            } catch (err) {
                _ember['default'].Logger.log('Error connecting to server: ' + err);
                this.set('connecting', false);
                return;
            }
            ws.onclose = this._onclose.bind(this);
            ws.onmessage = this._onmessage.bind(this);
            ws.onopen = this._onopen.bind(this);
            this.set('ws', ws);
        },

        _connectTimeout: function _connectTimeout() {
            var timeout = Math.max(this.get('reconnectTimeout'), DEFAULT_RECONNECT_TIMEOUT);
            this.set('reconnectTimeout', Math.min(timeout * 2, DEFAULT_MAX_RECONNECT_TIMEOUT));
            return this.get('reconnectTimeout');
        },

        addCommand: function addCommand() /*command, target, method*/{
            this.on.apply(this, arguments);
        },

        removeCommand: function removeCommand() /*command, target, method*/{
            this.off.apply(this, arguments);
        },

        close: function close(code, reason) {
            code = code || 1000;
            reason = reason || 'application called close';
            return this.get('ws').close(code, reason);
        },

        send: function send(data) {
            if (!this.get('closed') && data) {
                if (typeof data !== 'string') {
                    try {
                        data = JSON.stringify(data);
                    } catch (err) {
                        return (0, _portiaUiUtilsUtils.logError)('Error serializing data: ' + err);
                    }
                }
                return this.get('ws').send(data);
            }
        },

        _sendPromise: function _sendPromise(data) {
            var deferred = new _ember['default'].RSVP.defer();
            if (!data._meta) {
                data._meta = this._metadata(null);
            } else if (!data._meta.id) {
                data._meta.id = (0, _portiaUiUtilsUtils.shortGuid)();
            }
            if (this.get('opened')) {
                this.set('deferreds.' + data._meta.id, deferred);
                this.send(data);
            } else {
                deferred.reject('Websocket is closed');
            }
            return deferred.promise;
        },

        _metadata: function _metadata(type) {
            return {
                // TODO: send current spider and project?
                type: type,
                id: (0, _portiaUiUtilsUtils.shortGuid)()
            };
        }
    });
});
define('portia-ui/storages/cookies', ['exports', 'ember-local-storage/local/object'], function (exports, _emberLocalStorageLocalObject) {

  var Storage = _emberLocalStorageLocalObject['default'].extend();

  exports['default'] = Storage;
});
define('portia-ui/storages/ui-state-collapsed-panels', ['exports', 'ember-local-storage/local/object'], function (exports, _emberLocalStorageLocalObject) {

  var Storage = _emberLocalStorageLocalObject['default'].extend();

  exports['default'] = Storage;
});
define('portia-ui/storages/ui-state-selected-tools', ['exports', 'ember-local-storage/local/object'], function (exports, _emberLocalStorageLocalObject) {

    var Storage = _emberLocalStorageLocalObject['default'].extend({
        init: function init() {
            this._super.apply(this, arguments);

            // clear the next click selection mode if magic tool is active
            if (this.get('magicToolActive')) {
                this.set('selectionMode', null);
            }
        }
    });

    Storage.reopenClass({
        initialState: function initialState() {
            return {
                magicToolActive: true,
                selectionMode: null
            };
        }
    });

    exports['default'] = Storage;
});
define("portia-ui/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 8
            },
            "end": {
              "line": 21,
              "column": 8
            }
          },
          "moduleName": "portia-ui/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "outlet", ["options-panels"], [], ["loc", [null, [18, 12], [18, 39]]]], ["inline", "outlet", ["main"], [], ["loc", [null, [19, 12], [19, 29]]]], ["inline", "outlet", ["tool-panels"], [], ["loc", [null, [20, 12], [20, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "id", "window");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("nav");
        dom.setAttribute(el2, "id", "top-bar");
        dom.setAttribute(el2, "class", "navbar navbar-default navbar-static-top");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "navbar-header navbar-left");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3, "class", "nav navbar-nav navbar-left");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "navbar-right");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        morphs[3] = dom.createMorphAt(element2, 1, 1);
        morphs[4] = dom.createMorphAt(element2, 3, 3);
        morphs[5] = dom.createMorphAt(element2, 5, 5);
        return morphs;
      },
      statements: [["inline", "partial", ["branding"], [], ["loc", [null, [4, 12], [4, 34]]]], ["content", "scrapinghub-links", ["loc", [null, [7, 12], [7, 33]]]], ["inline", "outlet", ["top-bar"], [], ["loc", [null, [10, 12], [10, 32]]]], ["content", "notification-container", ["loc", [null, [15, 8], [15, 34]]]], ["inline", "outlet", ["side-bar"], [], ["loc", [null, [16, 8], [16, 29]]]], ["block", "sliding-main", [], [], 0, null, ["loc", [null, [17, 8], [21, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/branding", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/branding.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "navbar-brand");
        var el2 = dom.createTextNode("\n    Portia ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "label label-danger");
        var el3 = dom.createTextNode("Alpha");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/browsers", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/browsers.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "browser-list-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        var el3 = dom.createTextNode("Unfortunately your browser doesn't support some of the features required to give you a great experience with Portia.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "browser-p");
        var el3 = dom.createTextNode("Please try using an up-to-date version of one of these browsers, which are known to work well with Portia.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 5, 5);
        return morphs;
      },
      statements: [["inline", "browser-list", [], ["browsers", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 28], [5, 33]]]]], [], []]], ["loc", [null, [5, 4], [5, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/add-start-url-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/add-start-url-button.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createTextNode("\n                Add this page as a start page for your spider\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 8
                },
                "end": {
                  "line": 12,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/add-start-url-button.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createTextNode("\n                Remove this page from your spider's start pages\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/add-start-url-button.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Toggle start page\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "newStartUrl", ["loc", [null, [4, 14], [4, 25]]]]], [], 0, 1, ["loc", [null, [4, 8], [12, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 17,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/add-start-url-button.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "id", "start-url-button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" Start page\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element0, 'disabled');
            morphs[2] = dom.createElementMorph(element0);
            morphs[3] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["btn btn-default ", ["subexpr", "if", [["subexpr", "not", [["get", "newStartUrl", ["loc", [null, [14, 85], [14, 96]]]]], [], ["loc", [null, [14, 80], [14, 97]]]], "active"], [], ["loc", [null, [14, 75], [14, 108]]]]]]], ["attribute", "disabled", ["get", "disableStartUrl", ["loc", [null, [14, 121], [14, 136]]]]], ["element", "action", ["toggleStartUrl"], [], ["loc", [null, [14, 139], [14, 166]]]], ["inline", "icon-button", [], ["icon", "url"], ["loc", [null, [15, 12], [15, 38]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/add-start-url-button.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [2, 14], [2, 29]]]], "tooltip"], [], ["loc", [null, [2, 10], [2, 40]]]]], [], 0, 1, ["loc", [null, [2, 4], [17, 11]]]]],
        locals: ["options"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/add-start-url-button.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tooltip-container", [], ["tooltipFor", "start-url-button", "tooltipContainer", "body"], 0, null, ["loc", [null, [1, 0], [18, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/animation-container", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/animation-container.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "animation-content");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [2, 4], [2, 13]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/annotation-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 9,
              "column": 8
            }
          },
          "moduleName": "portia-ui/templates/components/annotation-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            Only extract items that have this annotation. Only this sample will be affected\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 12
              },
              "end": {
                "line": 21,
                "column": 12
              }
            },
            "moduleName": "portia-ui/templates/components/annotation-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("The input value is not a valid CSS selector.");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createAttrMorph(element0, 'class');
            return morphs;
          },
          statements: [["inline", "buffered-input", [], ["type", "text", "name", "selector", "class", "form-control", "value", ["subexpr", "mut", [["get", "cssSelector", ["loc", [null, [19, 93], [19, 104]]]]], [], ["loc", [null, [19, 88], [19, 105]]]], "viewValue", ["subexpr", "mut", [["get", "editedCssSelector", ["loc", [null, [19, 121], [19, 138]]]]], [], ["loc", [null, [19, 116], [19, 139]]]], "onChange", ["subexpr", "action", ["save"], [], ["loc", [null, [19, 149], [19, 164]]]]], ["loc", [null, [19, 16], [19, 166]]]], ["attribute", "class", ["concat", ["help-block", ["subexpr", "if", [["subexpr", "not", [["get", "invalidSelector", ["loc", [null, [20, 49], [20, 64]]]]], [], ["loc", [null, [20, 44], [20, 65]]]], " hide"], [], ["loc", [null, [20, 39], [20, 75]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 12
              },
              "end": {
                "line": 23,
                "column": 12
              }
            },
            "moduleName": "portia-ui/templates/components/annotation-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "input", [], ["type", "text", "name", "selector", "class", "form-control", "value", ["subexpr", "get", [["get", "annotation", ["loc", [null, [22, 84], [22, 94]]]], ["get", "annotation.selectionMode", ["loc", [null, [22, 95], [22, 119]]]]], [], ["loc", [null, [22, 79], [22, 120]]]], "readonly", true], ["loc", [null, [22, 16], [22, 136]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/annotation-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "for", "selector");
          var el3 = dom.createTextNode("Selector");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["form-group", ["subexpr", "if", [["get", "invalidSelector", ["loc", [null, [16, 35], [16, 50]]]], " has-error"], [], ["loc", [null, [16, 30], [16, 65]]]]]]], ["block", "if", [["subexpr", "eq", [["get", "annotation.selectionMode", ["loc", [null, [18, 22], [18, 46]]]], "css"], [], ["loc", [null, [18, 18], [18, 53]]]]], [], 0, 1, ["loc", [null, [18, 12], [23, 19]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/annotation-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Annotation");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "checkbox");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Required\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3, "for", "selectionMode");
        var el4 = dom.createTextNode("Selection mode");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        dom.setAttribute(el3, "for", "attribute");
        var el4 = dom.createTextNode("Source");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(element2, [1]);
        var morphs = new Array(6);
        morphs[0] = dom.createElementMorph(element2);
        morphs[1] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element3, 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [3]), 3, 3);
        morphs[4] = dom.createMorphAt(element2, 5, 5);
        morphs[5] = dom.createMorphAt(dom.childAt(element2, [7]), 3, 3);
        return morphs;
      },
      statements: [["element", "action", ["save"], ["on", "change"], ["loc", [null, [2, 6], [2, 35]]]], ["inline", "input", [], ["type", "checkbox", "name", "required", "checked", ["subexpr", "mut", [["get", "annotation.required", ["loc", [null, [5, 65], [5, 84]]]]], [], ["loc", [null, [5, 60], [5, 85]]]]], ["loc", [null, [5, 12], [5, 87]]]], ["block", "help-icon", [], [], 0, null, ["loc", [null, [7, 8], [9, 22]]]], ["inline", "select-box", [], ["name", "selectionMode", "value", ["subexpr", "mut", [["get", "selectionMode", ["loc", [null, [13, 53], [13, 66]]]]], [], ["loc", [null, [13, 48], [13, 67]]]], "valueAttribute", "label", "choices", ["subexpr", "@mut", [["get", "selectionModeOptions", ["loc", [null, [13, 99], [13, 119]]]]], [], []], "onChange", ["subexpr", "action", ["save"], [], ["loc", [null, [13, 129], [13, 144]]]]], ["loc", [null, [13, 8], [13, 146]]]], ["block", "if", [["subexpr", "not-eq", [["get", "annotation.selectionMode", ["loc", [null, [15, 18], [15, 42]]]], "auto"], [], ["loc", [null, [15, 10], [15, 50]]]]], [], 1, null, ["loc", [null, [15, 4], [25, 11]]]], ["inline", "select-box", [], ["name", "attribute", "value", ["subexpr", "mut", [["get", "attribute", ["loc", [null, [28, 49], [28, 58]]]]], [], ["loc", [null, [28, 44], [28, 59]]]], "valueAttribute", "name", "choices", ["subexpr", "@mut", [["get", "attributes", ["loc", [null, [28, 90], [28, 100]]]]], [], []], "onChange", ["subexpr", "action", ["save"], [], ["loc", [null, [28, 110], [28, 125]]]]], ["loc", [null, [28, 8], [28, 127]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/browser-iframe", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["empty-body"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/browser-iframe.hbs"
      },
      isEmpty: true,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/browser-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 7,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/browser-list.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "no-decoration");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("img");
          dom.setAttribute(el2, "class", "browser-logo browser-mg");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "browser-p browser-mg");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'href');
          morphs[1] = dom.createAttrMorph(element1, 'src');
          morphs[2] = dom.createAttrMorph(element1, 'alt');
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "href", ["concat", [["get", "browser.href", ["loc", [null, [3, 41], [3, 53]]]]]]], ["attribute", "src", ["get", "browser.src", ["loc", [null, [4, 55], [4, 66]]]]], ["attribute", "alt", ["get", "browser.alt", ["loc", [null, [4, 75], [4, 86]]]]], ["content", "browser.name", ["loc", [null, [5, 44], [5, 60]]]]],
        locals: ["browser"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/browser-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "browser-logos");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "browsers", ["loc", [null, [2, 12], [2, 20]]]]], [], 0, null, ["loc", [null, [2, 4], [7, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/browser-view-port", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/browser-view-port.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Connecting ...\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 8
              },
              "end": {
                "line": 15,
                "column": 8
              }
            },
            "moduleName": "portia-ui/templates/components/browser-view-port.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            dom.setAttribute(el1, "class", "alert-link");
            var el2 = dom.createTextNode("Try Again");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(".\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["element", "action", ["reconnectWebsocket"], [], ["loc", [null, [14, 34], [14, 65]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/browser-view-port.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        Reconnecting to server in ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" seconds.\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "webSocket.secondsUntilReconnect", ["loc", [null, [12, 34], [12, 69]]]], ["block", "unless", [["get", "webSocket.reconnectImminent", ["loc", [null, [13, 18], [13, 45]]]]], [], 0, null, ["loc", [null, [13, 8], [15, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 4
            },
            "end": {
              "line": 36,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/browser-view-port.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n            You can also select one of your existing spiders from the sidebar.\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/browser-view-port.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "browser-navigation panel-heading");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "browser-toolbar");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "frame-container panel-body");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "overlay-container");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("img");
        dom.setAttribute(el2, "src", "/assets/images/portia-logo.svg");
        dom.setAttribute(el2, "alt", "Portia logo");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "style", "width: 20%; display: block;");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "src", "/assets/images/yaoota-logo.png");
        dom.setAttribute(el3, "alt", "Yaoota logo");
        dom.setAttribute(el3, "style", "width: 100%; height: 100px;");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        var el3 = dom.createTextNode("Do you want you port new merchant?");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(fragment, [4]);
        var element4 = dom.childAt(fragment, [6]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(element1, 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createMorphAt(element2, 1, 1);
        morphs[4] = dom.createMorphAt(element2, 2, 2);
        morphs[5] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        morphs[6] = dom.createMorphAt(element3, 3, 3);
        morphs[7] = dom.createAttrMorph(element4, 'class');
        morphs[8] = dom.createMorphAt(element4, 7, 7);
        morphs[9] = dom.createMorphAt(element4, 9, 9);
        return morphs;
      },
      statements: [["inline", "url-bar", [], ["class", "navbar-form", "role", "navigation"], ["loc", [null, [2, 4], [2, 53]]]], ["inline", "yield", [["subexpr", "hash", [], ["section", "toolbar"], ["loc", [null, [4, 16], [4, 40]]]]], [], ["loc", [null, [4, 8], [4, 42]]]], ["attribute", "class", ["concat", ["browser-banner", ["subexpr", "unless", [["get", "webSocket.closed", ["loc", [null, [7, 35], [7, 51]]]], " hide"], [], ["loc", [null, [7, 26], [7, 61]]]]]]], ["block", "if", [["get", "webSocket.connecting", ["loc", [null, [8, 10], [8, 30]]]]], [], 0, null, ["loc", [null, [8, 4], [10, 11]]]], ["block", "if", [["get", "webSocket.secondsUntilReconnect", ["loc", [null, [11, 10], [11, 41]]]]], [], 1, null, ["loc", [null, [11, 4], [16, 11]]]], ["inline", "yield", [["subexpr", "hash", [], ["section", "overlays"], ["loc", [null, [20, 16], [20, 41]]]]], [], ["loc", [null, [20, 8], [20, 43]]]], ["inline", "browser-iframe", [], ["clickHandler", ["subexpr", "action", ["viewPortClick"], [], ["loc", [null, [22, 34], [22, 58]]]]], ["loc", [null, [22, 4], [22, 60]]]], ["attribute", "class", ["concat", ["browser-start-page ", ["subexpr", "if", [["get", "browser.url", ["loc", [null, [25, 36], [25, 47]]]], "hide"], [], ["loc", [null, [25, 31], [25, 56]]]]]]], ["inline", "url-bar", [], ["class", "navbar-form", "role", "navigation", "autofocus", true], ["loc", [null, [31, 4], [31, 68]]]], ["block", "if", [["get", "uiState.models.project.spiders.length", ["loc", [null, [32, 10], [32, 47]]]]], [], 2, null, ["loc", [null, [32, 4], [36, 11]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("portia-ui/templates/components/buffered-input", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/buffered-input.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["id", ["subexpr", "@mut", [["get", "inputId", ["loc", [null, [1, 11], [1, 18]]]]], [], []], "type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [1, 24], [1, 28]]]]], [], []], "class", ["subexpr", "concat", ["form-control ", ["subexpr", "if", [["get", "focused", ["loc", [null, [1, 63], [1, 70]]]], "focused "], [], ["loc", [null, [1, 59], [1, 82]]]], ["get", "class", ["loc", [null, [1, 83], [1, 88]]]]], [], ["loc", [null, [1, 35], [1, 89]]]], "value", ["subexpr", "mut", [["get", "displayedValue", ["loc", [null, [1, 101], [1, 115]]]]], [], ["loc", [null, [1, 96], [1, 116]]]], "enter", ["subexpr", "if", [["get", "focused", ["loc", [null, [1, 127], [1, 134]]]], ["subexpr", "action", ["endEditing", "enter"], [], ["loc", [null, [1, 135], [1, 164]]]]], [], ["loc", [null, [1, 123], [1, 165]]]], "escape-press", ["subexpr", "if", [["get", "focused", ["loc", [null, [1, 183], [1, 190]]]], ["subexpr", "action", ["cancelEditing"], [], ["loc", [null, [1, 191], [1, 215]]]]], [], ["loc", [null, [1, 179], [1, 216]]]], "focus-in", ["subexpr", "action", ["startEditing"], [], ["loc", [null, [1, 226], [1, 249]]]], "bubbles", true, "focus-out", ["subexpr", "if", [["get", "focused", ["loc", [null, [1, 277], [1, 284]]]], ["subexpr", "action", ["endEditing", "focus-out"], [], ["loc", [null, [1, 285], [1, 318]]]]], [], ["loc", [null, [1, 273], [1, 319]]]], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [1, 332], [1, 343]]]]], [], []], "autofocus", ["subexpr", "@mut", [["get", "autofocus", ["loc", [null, [1, 354], [1, 363]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [1, 373], [1, 381]]]]], [], []], "spellcheck", ["subexpr", "@mut", [["get", "spellcheck", ["loc", [null, [1, 393], [1, 403]]]]], [], []]], ["loc", [null, [1, 0], [1, 405]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/colored-badge", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 41
            },
            "end": {
              "line": 1,
              "column": 66
            }
          },
          "moduleName": "portia-ui/templates/components/colored-badge.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [1, 57], [1, 66]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 66
            },
            "end": {
              "line": 1,
              "column": 83
            }
          },
          "moduleName": "portia-ui/templates/components/colored-badge.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "value", ["loc", [null, [1, 74], [1, 83]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/colored-badge.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "badge");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'style');
        morphs[1] = dom.createMorphAt(element0, 0, 0);
        return morphs;
      },
      statements: [["attribute", "style", ["get", "badgeStyle", ["loc", [null, [1, 28], [1, 38]]]]], ["block", "if", [["get", "hasBlock", ["loc", [null, [1, 47], [1, 55]]]]], [], 0, 1, ["loc", [null, [1, 41], [1, 90]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/colored-span", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/colored-span.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/combo-box", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/combo-box.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "combo-input");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "caret-container");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "caret");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createElementMorph(element1);
            morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "input", [], ["id", ["subexpr", "@mut", [["get", "inputId", ["loc", [null, [4, 23], [4, 30]]]]], [], []], "type", "text", "class", ["subexpr", "concat", ["form-control dropdown-toggle ", ["get", "inputClass", ["loc", [null, [4, 89], [4, 99]]]]], [], ["loc", [null, [4, 49], [4, 100]]]], "value", ["subexpr", "@mut", [["get", "query", ["loc", [null, [4, 107], [4, 112]]]]], [], []], "escape-press", ["subexpr", "action", [["get", "widget.closeMenu", ["loc", [null, [4, 134], [4, 150]]]], "escape"], [], ["loc", [null, [4, 126], [4, 160]]]], "focus-in", ["subexpr", "chain-actions", [["get", "widget.openMenu", ["loc", [null, [4, 185], [4, 200]]]], ["get", "widget.focusIn", ["loc", [null, [4, 201], [4, 215]]]]], [], ["loc", [null, [4, 170], [4, 216]]]], "bubbles", true, "focus-out", ["subexpr", "chain-actions", [["get", "widget.focusOut", ["loc", [null, [4, 255], [4, 270]]]], ["subexpr", "action", ["restoreFocus"], [], ["loc", [null, [4, 271], [4, 294]]]]], [], ["loc", [null, [4, 240], [4, 295]]]], "spellcheck", ["subexpr", "@mut", [["get", "spellcheck", ["loc", [null, [4, 307], [4, 317]]]]], [], []]], ["loc", [null, [4, 12], [4, 319]]]], ["element", "action", [["get", "widget.toggleMenu", ["loc", [null, [5, 51], [5, 68]]]], "button"], [], ["loc", [null, [5, 42], [5, 79]]]], ["content", "currentValue", ["loc", [null, [9, 8], [9, 24]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 11,
                    "column": 8
                  },
                  "end": {
                    "line": 13,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/combo-box.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "yield", [["subexpr", "hash", [], ["menu", ["get", "widget.menu", ["loc", [null, [12, 31], [12, 42]]]], "header", ["get", "widget.header", ["loc", [null, [12, 50], [12, 63]]]], "item", ["get", "widget.item", ["loc", [null, [12, 69], [12, 80]]]], "divider", ["get", "widget.divider", ["loc", [null, [12, 89], [12, 103]]]], "query", ["get", "query", ["loc", [null, [12, 110], [12, 115]]]], "setValue", ["subexpr", "action", ["setValue"], [], ["loc", [null, [12, 125], [12, 144]]]], "setViewValue", ["subexpr", "action", ["setViewValue"], [], ["loc", [null, [12, 158], [12, 181]]]], "setValueAndClose", ["subexpr", "action", ["setValueAndClose"], [], ["loc", [null, [12, 199], [12, 226]]]], "closeMenu", ["get", "widget.closeMenu", ["loc", [null, [12, 237], [12, 253]]]]], ["loc", [null, [12, 20], [12, 254]]]]], [], ["loc", [null, [12, 12], [12, 256]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 16,
                          "column": 20
                        },
                        "end": {
                          "line": 18,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/combo-box.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      return morphs;
                    },
                    statements: [["inline", "get", [["get", "choice", ["loc", [null, [17, 30], [17, 36]]]], ["get", "valueAttribute", ["loc", [null, [17, 37], [17, 51]]]]], [], ["loc", [null, [17, 24], [17, 53]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 18,
                          "column": 20
                        },
                        "end": {
                          "line": 20,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/combo-box.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      return morphs;
                    },
                    statements: [["content", "choice", ["loc", [null, [19, 24], [19, 34]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 15,
                        "column": 16
                      },
                      "end": {
                        "line": 21,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/combo-box.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "valueAttribute", ["loc", [null, [16, 26], [16, 40]]]]], [], 0, 1, ["loc", [null, [16, 20], [20, 27]]]]],
                  locals: [],
                  templates: [child0, child1]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 14,
                      "column": 12
                    },
                    "end": {
                      "line": 22,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/combo-box.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "widget.item", [], ["value", ["subexpr", "@mut", [["get", "choice", ["loc", [null, [15, 37], [15, 43]]]]], [], []], "action", ["subexpr", "action", ["setValueAndClose", ["get", "choice", ["loc", [null, [15, 78], [15, 84]]]]], [], ["loc", [null, [15, 51], [15, 85]]]]], 0, null, ["loc", [null, [15, 16], [21, 32]]]]],
                locals: ["choice"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 8
                  },
                  "end": {
                    "line": 23,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/combo-box.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "choices", ["loc", [null, [14, 20], [14, 27]]]]], [], 0, null, ["loc", [null, [14, 12], [22, 21]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 4
                },
                "end": {
                  "line": 24,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/combo-box.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [11, 14], [11, 22]]]]], [], 0, 1, ["loc", [null, [11, 8], [23, 15]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 24,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/combo-box.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "widget.section", ["loc", [null, [10, 18], [10, 32]]]], "menu"], [], ["loc", [null, [10, 14], [10, 40]]]]], [], 0, null, ["loc", [null, [10, 4], [24, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/combo-box.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "widget.section", ["loc", [null, [2, 14], [2, 28]]]], "widget"], [], ["loc", [null, [2, 10], [2, 38]]]]], [], 0, 1, ["loc", [null, [2, 4], [24, 11]]]]],
        locals: ["widget"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/combo-box.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "dropdown-widget", [], ["class", "combo-box", "events", ["subexpr", "@mut", [["get", "this", ["loc", [null, [1, 44], [1, 48]]]]], [], []], "open", ["subexpr", "mut", [["get", "open", ["loc", [null, [1, 59], [1, 63]]]]], [], ["loc", [null, [1, 54], [1, 64]]]], "active", ["subexpr", "mut", [["get", "viewValue", ["loc", [null, [1, 77], [1, 86]]]]], [], ["loc", [null, [1, 72], [1, 87]]]], "focused", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 96], [1, 101]]]]], [], []], "orderItemsForSearch", ["subexpr", "@mut", [["get", "orderItemsForSearch", ["loc", [null, [1, 122], [1, 141]]]]], [], []], "valuesEqual", ["subexpr", "@mut", [["get", "valuesEqual", ["loc", [null, [1, 154], [1, 165]]]]], [], []], "menuContainer", ["subexpr", "@mut", [["get", "menuContainer", ["loc", [null, [1, 180], [1, 193]]]]], [], []], "menuClass", ["subexpr", "@mut", [["get", "menuClass", ["loc", [null, [1, 204], [1, 213]]]]], [], []], "menuAlign", ["subexpr", "@mut", [["get", "menuAlign", ["loc", [null, [1, 224], [1, 233]]]]], [], []], "onClose", ["subexpr", "action", ["menuClosed"], [], ["loc", [null, [1, 242], [1, 263]]]]], 0, null, ["loc", [null, [1, 0], [25, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/create-project-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/create-project-button.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h5");
            var el2 = dom.createTextNode("OR");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/create-project-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "input-group project-create-input");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "input-group-btn");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "type", "button");
          dom.setAttribute(el3, "class", "btn btn-primary");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3]);
          var element1 = dom.childAt(element0, [3, 1]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createAttrMorph(element1, 'disabled');
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createMorphAt(element1, 1, 1);
          morphs[4] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", "form-control", "value", ["subexpr", "mut", [["get", "projectName", ["loc", [null, [4, 60], [4, 71]]]]], [], ["loc", [null, [4, 55], [4, 72]]]], "placeholder", "Create a new project", "enter", ["subexpr", "action", ["addProject"], [], ["loc", [null, [5, 16], [5, 37]]]]], ["loc", [null, [4, 8], [5, 39]]]], ["attribute", "disabled", ["subexpr", "not", [["get", "projectName", ["loc", [null, [7, 73], [7, 84]]]]], [], ["loc", [null, [7, 67], [7, 86]]]]], ["element", "action", ["addProject"], [], ["loc", [null, [7, 87], [7, 110]]]], ["inline", "icon-button", [], ["icon", "spider"], ["loc", [null, [8, 16], [8, 45]]]], ["block", "if", [["get", "projects", ["loc", [null, [12, 10], [12, 18]]]]], [], 0, null, ["loc", [null, [12, 4], [14, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/create-project-button.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "canCreateProjects", ["loc", [null, [1, 6], [1, 23]]]]], [], 0, null, ["loc", [null, [1, 0], [15, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/create-spider-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "modifiers",
          "modifiers": ["action"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/create-spider-button.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "type", "button");
        dom.setAttribute(el1, "class", "btn btn-primary");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" New spider\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'disabled');
        morphs[1] = dom.createElementMorph(element0);
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["attribute", "disabled", ["subexpr", "not", [["get", "canAddSpider", ["loc", [null, [1, 61], [1, 73]]]]], [], ["loc", [null, [1, 55], [1, 75]]]]], ["element", "action", ["addSpider"], [], ["loc", [null, [1, 76], [1, 98]]]], ["inline", "icon-button", [], ["icon", "spider"], ["loc", [null, [2, 4], [2, 33]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/currency-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/currency-list.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Select Currency\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/currency-list.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "option.label", ["loc", [null, [7, 12], [7, 28]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/currency-list.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "select.item", [], ["value", ["subexpr", "@mut", [["get", "option", ["loc", [null, [6, 29], [6, 35]]]]], [], []], "action", ["subexpr", "action", [["get", "select.setValueAndClose", ["loc", [null, [6, 51], [6, 74]]]], ["get", "option", ["loc", [null, [6, 75], [6, 81]]]]], [], ["loc", [null, [6, 43], [6, 82]]]]], 0, null, ["loc", [null, [6, 8], [8, 24]]]]],
          locals: ["option"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/currency-list.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "select.header", [], [], 0, null, ["loc", [null, [2, 4], [4, 22]]]], ["block", "each", [["get", "currencyCodeOptions", ["loc", [null, [5, 12], [5, 31]]]]], [], 1, null, ["loc", [null, [5, 4], [9, 13]]]]],
        locals: ["select"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/currency-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "list-item-selectable", [], ["value", ["subexpr", "mut", [["get", "currencyCode", ["loc", [null, [1, 35], [1, 47]]]]], [], ["loc", [null, [1, 30], [1, 48]]]], "valueAttribute", "label", "onChange", ["subexpr", "action", ["saveSpider"], [], ["loc", [null, [1, 81], [1, 102]]]], "menuContainer", "body", "menuAlign", "left"], 0, null, ["loc", [null, [1, 0], [10, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/currency-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/currency-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "list-item-icon", [], ["id", "detect-cookies-button", "icon", "play", "action", ["subexpr", "action", ["detectCookies", ["get", "spider", ["loc", [null, [11, 91], [11, 97]]]]], [], ["loc", [null, [11, 67], [11, 98]]]]], ["loc", [null, [11, 4], [11, 100]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/currency-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Currency Cookie Name");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Currency Cookie value");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 3, 3);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", "form-control", "id", "currencyCookieName", "value", ["subexpr", "mut", [["get", "spider.currencyCookieName", ["loc", [null, [25, 88], [25, 113]]]]], [], ["loc", [null, [25, 83], [25, 114]]]]], ["loc", [null, [25, 12], [25, 116]]]], ["inline", "input", [], ["type", "text", "class", "form-control", "id", "currencyCookieValue", "value", ["subexpr", "mut", [["get", "spider.currencyCookieValue", ["loc", [null, [29, 89], [29, 115]]]]], [], ["loc", [null, [29, 84], [29, 116]]]]], ["loc", [null, [29, 12], [29, 118]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/currency-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Currency Code");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Cookies\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "dvTable");
        dom.setAttribute(el1, "style", "align-text: center;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "checkbox");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Use Currency Cookies\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(fragment, [8]);
        var morphs = new Array(6);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[3] = dom.createElementMorph(element1);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [1, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element1, 3, 3);
        return morphs;
      },
      statements: [["element", "action", ["save"], ["on", "change"], ["loc", [null, [2, 6], [2, 35]]]], ["inline", "currency-list", [], ["spider", ["subexpr", "@mut", [["get", "spider", ["loc", [null, [4, 31], [4, 37]]]]], [], []]], ["loc", [null, [4, 8], [4, 39]]]], ["block", "tooltip-container", [], ["tooltipFor", "detect-cookies-button", "text", "Detect Cookies", "tooltipContainer", "body"], 0, null, ["loc", [null, [10, 0], [12, 22]]]], ["element", "action", ["save"], ["on", "change"], ["loc", [null, [16, 6], [16, 35]]]], ["inline", "input", [], ["type", "checkbox", "name", "useLanguageCookies", "checked", ["subexpr", "mut", [["get", "spider.useCurrencyCookies", ["loc", [null, [19, 75], [19, 100]]]]], [], ["loc", [null, [19, 70], [19, 101]]]]], ["loc", [null, [19, 12], [19, 103]]]], ["block", "if", [["get", "spider.useCurrencyCookies", ["loc", [null, [22, 10], [22, 35]]]]], [], 1, null, ["loc", [null, [22, 4], [32, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/data-structure-annotations", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [3, 8], [3, 17]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 16,
                            "column": 24
                          },
                          "end": {
                            "line": 18,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            Change type of selected field\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes() {
                        return [];
                      },
                      statements: [],
                      locals: [],
                      templates: []
                    };
                  })();
                  var child1 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 19,
                            "column": 24
                          },
                          "end": {
                            "line": 21,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "list-item-icon", [], ["icon", "options"], ["loc", [null, [20, 28], [20, 61]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 8,
                          "column": 20
                        },
                        "end": {
                          "line": 23,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(7);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                      morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                      morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                      morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
                      morphs[5] = dom.createMorphAt(fragment, 10, 10, contextualElement);
                      morphs[6] = dom.createMorphAt(fragment, 12, 12, contextualElement);
                      return morphs;
                    },
                    statements: [["inline", "indentation-spacer", [], ["isSmall", true], ["loc", [null, [9, 24], [9, 59]]]], ["inline", "list-item-badge", [], ["value", ["subexpr", "or", [["get", "annotation.elements.length", ["loc", [null, [11, 36], [11, 62]]]], 0], [], ["loc", [null, [11, 32], [11, 65]]]], "color", ["subexpr", "array-get", [["get", "annotationColors", ["loc", [null, [12, 43], [12, 59]]]], ["get", "annotation.orderedIndex", ["loc", [null, [12, 60], [12, 83]]]]], [], ["loc", [null, [12, 32], [12, 84]]]]], ["loc", [null, [10, 24], [13, 26]]]], ["inline", "list-item-icon", [], ["icon", ["subexpr", "@mut", [["get", "annotation.type", ["loc", [null, [14, 46], [14, 61]]]]], [], []]], ["loc", [null, [14, 24], [14, 63]]]], ["inline", "list-item-annotation-field", [], ["annotation", ["subexpr", "@mut", [["get", "annotation", ["loc", [null, [15, 64], [15, 74]]]]], [], []], "selecting", ["subexpr", "mut", [["get", "annotation.new", ["loc", [null, [15, 90], [15, 104]]]]], [], ["loc", [null, [15, 85], [15, 105]]]]], ["loc", [null, [15, 24], [15, 107]]]], ["block", "list-item-field-type", [], ["field", ["subexpr", "@mut", [["get", "annotation.field", ["loc", [null, [16, 54], [16, 70]]]]], [], []]], 0, null, ["loc", [null, [16, 24], [18, 49]]]], ["block", "link-to", ["projects.project.spider.sample.data.annotation.options", ["get", "annotation", ["loc", [null, [19, 92], [19, 102]]]]], ["bubbles", false, "class", "ignore-active"], 1, null, ["loc", [null, [19, 24], [21, 36]]]], ["inline", "list-item-icon", [], ["icon", "remove", "action", ["subexpr", "action", ["removeAnnotation", ["get", "annotation", ["loc", [null, [22, 89], [22, 99]]]]], [], ["loc", [null, [22, 62], [22, 100]]]], "bubbles", false], ["loc", [null, [22, 24], [22, 116]]]]],
                    locals: [],
                    templates: [child0, child1]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 7,
                        "column": 16
                      },
                      "end": {
                        "line": 24,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "link-to", ["projects.project.spider.sample.data.annotation", ["get", "annotation", ["loc", [null, [8, 80], [8, 90]]]]], [], 0, null, ["loc", [null, [8, 20], [23, 32]]]]],
                  locals: ["options"],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 6,
                      "column": 12
                    },
                    "end": {
                      "line": 25,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "tree-list-item", [], ["onMouseEnter", ["subexpr", "action", ["enterAnnotation", ["get", "annotation", ["loc", [null, [7, 73], [7, 83]]]]], [], ["loc", [null, [7, 47], [7, 84]]]], "onMouseLeave", ["subexpr", "action", ["leaveAnnotation", ["get", "item", ["loc", [null, [7, 124], [7, 128]]]]], [], ["loc", [null, [7, 98], [7, 129]]]]], 0, null, ["loc", [null, [7, 16], [24, 35]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 27,
                            "column": 20
                          },
                          "end": {
                            "line": 34,
                            "column": 20
                          }
                        },
                        "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                        ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                        ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                        ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                        ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                        ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                        ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(6);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                        morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
                        morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "list-item-icon", [], ["icon", "schema"], ["loc", [null, [28, 24], [28, 56]]]], ["inline", "list-item-badge", [], ["value", ["subexpr", "or", [["get", "annotation.elements.length", ["loc", [null, [29, 52], [29, 78]]]], 0], [], ["loc", [null, [29, 48], [29, 81]]]]], ["loc", [null, [29, 24], [29, 83]]]], ["inline", "list-item-editable", [], ["value", ["subexpr", "mut", [["get", "annotation.name", ["loc", [null, [30, 56], [30, 71]]]]], [], ["loc", [null, [30, 51], [30, 72]]]], "editing", ["subexpr", "mut", [["get", "annotation.new", ["loc", [null, [30, 86], [30, 100]]]]], [], ["loc", [null, [30, 81], [30, 101]]]], "onChange", ["subexpr", "action", ["saveItem", ["get", "annotation", ["loc", [null, [30, 130], [30, 140]]]]], [], ["loc", [null, [30, 111], [30, 141]]]]], ["loc", [null, [30, 24], [30, 143]]]], ["inline", "list-item-item-schema", [], ["item", ["subexpr", "@mut", [["get", "annotation", ["loc", [null, [31, 53], [31, 63]]]]], [], []]], ["loc", [null, [31, 24], [31, 65]]]], ["inline", "list-item-add-annotation-menu", [], ["item", ["subexpr", "@mut", [["get", "annotation", ["loc", [null, [32, 61], [32, 71]]]]], [], []]], ["loc", [null, [32, 24], [32, 73]]]], ["inline", "list-item-icon", [], ["icon", "remove", "action", ["subexpr", "action", ["removeItem", ["get", "annotation", ["loc", [null, [33, 83], [33, 93]]]]], [], ["loc", [null, [33, 62], [33, 94]]]], "bubbles", false], ["loc", [null, [33, 24], [33, 110]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 26,
                          "column": 16
                        },
                        "end": {
                          "line": 35,
                          "column": 16
                        }
                      },
                      "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["block", "link-to", ["projects.project.spider.sample.data.item", ["get", "annotation", ["loc", [null, [27, 74], [27, 84]]]]], [], 0, null, ["loc", [null, [27, 20], [34, 32]]]]],
                    locals: [],
                    templates: [child0]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 25,
                        "column": 12
                      },
                      "end": {
                        "line": 36,
                        "column": 12
                      }
                    },
                    "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    return morphs;
                  },
                  statements: [["block", "data-structure-annotations", [], ["sample", ["subexpr", "@mut", [["get", "sample", ["loc", [null, [26, 53], [26, 59]]]]], [], []], "item", ["subexpr", "@mut", [["get", "annotation", ["loc", [null, [26, 65], [26, 75]]]]], [], []], "annotationColors", ["subexpr", "@mut", [["get", "annotationColors", ["loc", [null, [26, 93], [26, 109]]]]], [], []]], 0, null, ["loc", [null, [26, 16], [35, 47]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 25,
                      "column": 12
                    },
                    "end": {
                      "line": 36,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["subexpr", "eq", [["get", "annotation.constructor.modelName", ["loc", [null, [25, 26], [25, 58]]]], "item"], [], ["loc", [null, [25, 22], [25, 66]]]]], [], 0, null, ["loc", [null, [25, 12], [36, 12]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 5,
                    "column": 8
                  },
                  "end": {
                    "line": 37,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["subexpr", "eq", [["get", "annotation.constructor.modelName", ["loc", [null, [6, 22], [6, 54]]]], "annotation"], [], ["loc", [null, [6, 18], [6, 68]]]]], [], 0, 1, ["loc", [null, [6, 12], [36, 19]]]]],
              locals: ["annotation"],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 38,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "each", [["get", "item.annotations", ["loc", [null, [5, 16], [5, 32]]]]], [], 0, null, ["loc", [null, [5, 8], [37, 17]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 38,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [4, 18], [4, 33]]]], "subtrees"], [], ["loc", [null, [4, 14], [4, 45]]]]], [], 0, null, ["loc", [null, [4, 4], [38, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [2, 14], [2, 29]]]], "item"], [], ["loc", [null, [2, 10], [2, 37]]]]], [], 0, 1, ["loc", [null, [2, 4], [38, 11]]]]],
        locals: ["options"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/data-structure-annotations.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tree-list-item", [], ["hasChildren", ["subexpr", "@mut", [["get", "item.annotations.length", ["loc", [null, [1, 30], [1, 53]]]]], [], []], "onMouseEnter", ["subexpr", "action", ["enterItem", ["get", "item", ["loc", [null, [1, 87], [1, 91]]]]], [], ["loc", [null, [1, 67], [1, 92]]]], "onMouseLeave", ["subexpr", "action", ["leaveItem", ["get", "item", ["loc", [null, [1, 126], [1, 130]]]]], [], ["loc", [null, [1, 106], [1, 131]]]]], 0, null, ["loc", [null, [1, 0], [39, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/data-structure-listing", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 12
                  },
                  "end": {
                    "line": 6,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/data-structure-listing.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                Items\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/data-structure-listing.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "list-item-text", [], ["class", "title"], 0, null, ["loc", [null, [4, 12], [6, 31]]]], ["inline", "list-item-icon", [], ["icon", "add", "action", ["subexpr", "action", ["addItem", ["get", "sample", ["loc", [null, [7, 65], [7, 71]]]]], [], ["loc", [null, [7, 47], [7, 72]]]]], ["loc", [null, [7, 12], [7, 74]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 12,
                            "column": 24
                          },
                          "end": {
                            "line": 18,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/data-structure-listing.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(5);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                        morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "list-item-badge", [], ["value", ["subexpr", "or", [["get", "item.elements.length", ["loc", [null, [13, 56], [13, 76]]]], 0], [], ["loc", [null, [13, 52], [13, 79]]]]], ["loc", [null, [13, 28], [13, 81]]]], ["inline", "list-item-icon", [], ["icon", "schema"], ["loc", [null, [14, 28], [14, 60]]]], ["inline", "list-item-item-schema", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [15, 57], [15, 61]]]]], [], []], "selecting", ["subexpr", "mut", [["get", "item.new", ["loc", [null, [15, 77], [15, 85]]]]], [], ["loc", [null, [15, 72], [15, 86]]]]], ["loc", [null, [15, 28], [15, 88]]]], ["inline", "list-item-add-annotation-menu", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [16, 65], [16, 69]]]]], [], []]], ["loc", [null, [16, 28], [16, 71]]]], ["inline", "list-item-icon", [], ["icon", "remove", "action", ["subexpr", "action", ["removeItem", ["get", "item", ["loc", [null, [17, 87], [17, 91]]]]], [], ["loc", [null, [17, 66], [17, 92]]]], "disabled", ["subexpr", "lte", [["get", "sample.items.length", ["loc", [null, [17, 107], [17, 126]]]], 1], [], ["loc", [null, [17, 102], [17, 129]]]], "bubbles", false], ["loc", [null, [17, 28], [17, 145]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 11,
                          "column": 20
                        },
                        "end": {
                          "line": 19,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/data-structure-listing.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["block", "link-to", ["projects.project.spider.sample.data.item", ["get", "item", ["loc", [null, [12, 78], [12, 82]]]]], [], 0, null, ["loc", [null, [12, 24], [18, 36]]]]],
                    locals: [],
                    templates: [child0]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 10,
                        "column": 16
                      },
                      "end": {
                        "line": 20,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/data-structure-listing.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "data-structure-annotations", [], ["sample", ["subexpr", "@mut", [["get", "sample", ["loc", [null, [11, 57], [11, 63]]]]], [], []], "item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [11, 69], [11, 73]]]]], [], []], "annotationColors", ["subexpr", "@mut", [["get", "annotationColors", ["loc", [null, [11, 91], [11, 107]]]]], [], []]], 0, null, ["loc", [null, [11, 20], [19, 51]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 9,
                      "column": 12
                    },
                    "end": {
                      "line": 21,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/data-structure-listing.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "unless", [["get", "item.parent", ["loc", [null, [10, 26], [10, 37]]]]], [], 0, null, ["loc", [null, [10, 16], [20, 27]]]]],
                locals: ["item"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 8,
                    "column": 8
                  },
                  "end": {
                    "line": 22,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/data-structure-listing.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "each", [["get", "sample.items", ["loc", [null, [9, 20], [9, 32]]]]], [], 0, null, ["loc", [null, [9, 12], [21, 21]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 8
                },
                "end": {
                  "line": 22,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/data-structure-listing.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [8, 22], [8, 37]]]], "subtrees"], [], ["loc", [null, [8, 18], [8, 49]]]]], [], 0, null, ["loc", [null, [8, 8], [22, 8]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 23,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/data-structure-listing.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [3, 18], [3, 33]]]], "item"], [], ["loc", [null, [3, 14], [3, 41]]]]], [], 0, 1, ["loc", [null, [3, 8], [22, 15]]]]],
          locals: ["options"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/data-structure-listing.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tree-list-item", [], ["hasChildren", ["subexpr", "@mut", [["get", "sample.items.length", ["loc", [null, [2, 34], [2, 53]]]]], [], []]], 0, null, ["loc", [null, [2, 4], [23, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/data-structure-listing.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tree-list", [], [], 0, null, ["loc", [null, [1, 0], [24, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/do-train-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/do-train-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "list-item-spider-train", [], ["action", ["subexpr", "action", ["trainSpider", ["get", "spider", ["loc", [null, [2, 58], [2, 64]]]]], [], ["loc", [null, [2, 36], [2, 65]]]]], ["loc", [null, [2, 4], [2, 67]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/do-train-button.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tooltip-container", [], ["tooltipFor", "train-spider-button", "text", "Train this spider.", "tooltipContainer", "body"], 0, null, ["loc", [null, [1, 0], [3, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/dropdown-divider", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["empty-body"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/dropdown-divider.hbs"
      },
      isEmpty: true,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/dropdown-header", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/dropdown-header.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/dropdown-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 4,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/dropdown-item.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "value", ["loc", [null, [3, 16], [3, 21]]]]], [], ["loc", [null, [3, 8], [3, 23]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 6,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/dropdown-item.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "value", ["loc", [null, [5, 8], [5, 17]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "modifiers",
          "modifiers": ["action"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/dropdown-item.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("a");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["performAction", ["get", "value", ["loc", [null, [1, 28], [1, 33]]]]], [], ["loc", [null, [1, 3], [1, 35]]]], ["block", "if", [["get", "hasBlock", ["loc", [null, [2, 10], [2, 18]]]]], [], 0, 1, ["loc", [null, [2, 4], [6, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/dropdown-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/dropdown-menu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "yield", [["subexpr", "hash", [], ["menu", ["get", "this", ["loc", [null, [1, 19], [1, 23]]]], "header", ["subexpr", "component", ["dropdown-header"], [], ["loc", [null, [1, 31], [1, 60]]]], "item", ["subexpr", "component", ["dropdown-item"], ["menu", ["subexpr", "@mut", [["get", "this", ["loc", [null, [1, 98], [1, 102]]]]], [], []]], ["loc", [null, [1, 66], [1, 103]]]], "divider", ["subexpr", "component", ["dropdown-divider"], [], ["loc", [null, [1, 112], [1, 142]]]]], ["loc", [null, [1, 8], [1, 143]]]]], [], ["loc", [null, [1, 0], [1, 145]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/dropdown-widget", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/dropdown-widget.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "menu", "menu", ["get", "options.menu", ["loc", [null, [4, 42], [4, 54]]]], "header", ["get", "options.header", ["loc", [null, [4, 62], [4, 76]]]], "item", ["get", "options.item", ["loc", [null, [4, 82], [4, 94]]]], "divider", ["get", "options.divider", ["loc", [null, [4, 103], [4, 118]]]], "openMenu", ["subexpr", "action", ["openMenu"], [], ["loc", [null, [4, 128], [4, 147]]]], "closeMenu", ["subexpr", "action", ["closeMenu"], [], ["loc", [null, [4, 158], [4, 178]]]], "toggleMenu", ["subexpr", "action", ["toggleMenu"], [], ["loc", [null, [4, 190], [4, 211]]]], "focusIn", ["subexpr", "action", ["focusIn"], [], ["loc", [null, [4, 220], [4, 238]]]], "focusOut", ["subexpr", "action", ["focusOut"], [], ["loc", [null, [4, 248], [4, 267]]]], "keyDown", ["subexpr", "action", ["keyDown"], [], ["loc", [null, [4, 276], [4, 294]]]]], ["loc", [null, [4, 16], [4, 295]]]]], [], ["loc", [null, [4, 8], [4, 297]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/dropdown-widget.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "open", ["loc", [null, [3, 10], [3, 14]]]]], [], 0, null, ["loc", [null, [3, 4], [5, 11]]]]],
        locals: ["options"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/dropdown-widget.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "widget", "openMenu", ["subexpr", "action", ["openMenu"], [], ["loc", [null, [1, 40], [1, 59]]]], "closeMenu", ["subexpr", "action", ["closeMenu"], [], ["loc", [null, [1, 70], [1, 90]]]], "toggleMenu", ["subexpr", "action", ["toggleMenu"], [], ["loc", [null, [1, 102], [1, 123]]]], "focusIn", ["subexpr", "action", ["focusIn"], [], ["loc", [null, [1, 132], [1, 150]]]], "focusOut", ["subexpr", "action", ["focusOut"], [], ["loc", [null, [1, 160], [1, 179]]]], "keyDown", ["subexpr", "action", ["keyDown"], [], ["loc", [null, [1, 188], [1, 206]]]]], ["loc", [null, [1, 8], [1, 207]]]]], [], ["loc", [null, [1, 0], [1, 209]]]], ["block", "dropdown-menu", [], ["class", ["subexpr", "@mut", [["get", "menuClasses", ["loc", [null, [2, 23], [2, 34]]]]], [], []], "events", ["subexpr", "@mut", [["get", "events", ["loc", [null, [2, 42], [2, 48]]]]], [], []], "keyNavigate", ["subexpr", "@mut", [["get", "keyNavigate", ["loc", [null, [2, 61], [2, 72]]]]], [], []], "active", ["subexpr", "mut", [["get", "active", ["loc", [null, [2, 85], [2, 91]]]]], [], ["loc", [null, [2, 80], [2, 92]]]], "focused", ["subexpr", "mut", [["get", "focused", ["loc", [null, [2, 106], [2, 113]]]]], [], ["loc", [null, [2, 101], [2, 114]]]], "orderItemsForSearch", ["subexpr", "@mut", [["get", "orderItemsForSearch", ["loc", [null, [2, 135], [2, 154]]]]], [], []], "valuesEqual", ["subexpr", "@mut", [["get", "valuesEqual", ["loc", [null, [2, 167], [2, 178]]]]], [], []], "onFocusIn", ["subexpr", "action", ["focusIn"], [], ["loc", [null, [2, 189], [2, 207]]]], "onFocusOut", ["subexpr", "action", ["focusOut"], [], ["loc", [null, [2, 219], [2, 238]]]]], 0, null, ["loc", [null, [2, 0], [6, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/edit-sample-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/edit-sample-button.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Edit sample\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "icon-button", [], ["icon", "sample"], ["loc", [null, [3, 8], [3, 37]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/edit-sample-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["projects.project.spider.sample", ["get", "editableSample", ["loc", [null, [2, 48], [2, 62]]]]], ["class", "btn btn-primary"], 0, null, ["loc", [null, [2, 4], [4, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 10,
                      "column": 16
                    },
                    "end": {
                      "line": 14,
                      "column": 16
                    }
                  },
                  "moduleName": "portia-ui/templates/components/edit-sample-button.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("p");
                  var el2 = dom.createTextNode("\n                        This spider is from a different domain to your spider. Maybe you would like to create a new spider for this sample?\n                    ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 8,
                    "column": 12
                  },
                  "end": {
                    "line": 15,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/edit-sample-button.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                Create a new sample from the current page so you can start annotating the data you want to extract\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "unless", [["get", "sameDomain", ["loc", [null, [10, 26], [10, 36]]]]], [], 0, null, ["loc", [null, [10, 16], [14, 27]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 8
                },
                "end": {
                  "line": 16,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/edit-sample-button.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "unless", [["get", "editableSample", ["loc", [null, [8, 22], [8, 36]]]]], [], 0, null, ["loc", [null, [8, 12], [15, 23]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 8
                },
                "end": {
                  "line": 20,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/edit-sample-button.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "id", "add-spider-browser-button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "btn btn-primary");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" New sample\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'disabled');
              morphs[1] = dom.createElementMorph(element0);
              morphs[2] = dom.createMorphAt(element0, 1, 1);
              return morphs;
            },
            statements: [["attribute", "disabled", ["get", "disableSample", ["loc", [null, [17, 100], [17, 113]]]]], ["element", "action", ["addSample"], [], ["loc", [null, [17, 116], [17, 138]]]], ["inline", "icon-button", [], ["icon", "sample"], ["loc", [null, [18, 16], [18, 45]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 21,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/edit-sample-button.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [7, 18], [7, 33]]]], "tooltip"], [], ["loc", [null, [7, 14], [7, 44]]]]], [], 0, 1, ["loc", [null, [7, 8], [20, 15]]]]],
          locals: ["options"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/edit-sample-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tooltip-container", [], ["tooltipFor", "add-spider-browser-button", "tooltipContainer", "body"], 0, null, ["loc", [null, [6, 4], [21, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/edit-sample-button.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "editableSample", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, 1, ["loc", [null, [1, 0], [22, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/element-overlay", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/element-overlay.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "element-rect-overlay", [], ["index", ["subexpr", "@mut", [["get", "index", ["loc", [null, [2, 33], [2, 38]]]]], [], []], "icon", ["subexpr", "@mut", [["get", "icon", ["loc", [null, [2, 44], [2, 48]]]]], [], []], "color", ["subexpr", "@mut", [["get", "color", ["loc", [null, [2, 55], [2, 60]]]]], [], []], "positionMode", ["subexpr", "@mut", [["get", "positionMode", ["loc", [null, [2, 74], [2, 86]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [2, 93], [2, 98]]]]], [], []], "overlay", ["subexpr", "@mut", [["get", "this", ["loc", [null, [2, 107], [2, 111]]]]], [], []]], ["loc", [null, [2, 4], [2, 113]]]]],
        locals: ["rect", "index"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/element-overlay.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "rects", ["loc", [null, [1, 8], [1, 13]]]]], ["key", "@index"], 0, null, ["loc", [null, [1, 0], [3, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/element-rect-overlay", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/element-rect-overlay.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "overlay-box");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "overlay-icon");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "overlay-box-background");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'style');
        morphs[1] = dom.createAttrMorph(element1, 'style');
        morphs[2] = dom.createMorphAt(element1, 1, 1);
        morphs[3] = dom.createAttrMorph(element2, 'style');
        return morphs;
      },
      statements: [["attribute", "style", ["get", "shadowStyle", ["loc", [null, [1, 33], [1, 44]]]]], ["attribute", "style", ["get", "textShadowStyle", ["loc", [null, [2, 39], [2, 54]]]]], ["inline", "icon-button", [], ["icon", ["subexpr", "@mut", [["get", "icon", ["loc", [null, [3, 27], [3, 31]]]]], [], []]], ["loc", [null, [3, 8], [3, 33]]]], ["attribute", "style", ["get", "backgroundStyle", ["loc", [null, [5, 48], [5, 63]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/extracted-item-table", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 20
                  },
                  "end": {
                    "line": 12,
                    "column": 20
                  }
                },
                "moduleName": "portia-ui/templates/components/extracted-item-table.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "extracted-item-table", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [11, 52], [11, 56]]]]], [], []]], ["loc", [null, [11, 24], [11, 58]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 20
                  },
                  "end": {
                    "line": 18,
                    "column": 20
                  }
                },
                "moduleName": "portia-ui/templates/components/extracted-item-table.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("table");
                var el2 = dom.createTextNode("\n                            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("tr");
                var el3 = dom.createTextNode("\n                                ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("td");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1, 1]), 0, 0);
                return morphs;
              },
              statements: [["content", "item", ["loc", [null, [15, 36], [15, 44]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 16
                },
                "end": {
                  "line": 19,
                  "column": 16
                }
              },
              "moduleName": "portia-ui/templates/components/extracted-item-table.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "is-object", [["get", "item", ["loc", [null, [10, 37], [10, 41]]]]], [], ["loc", [null, [10, 26], [10, 42]]]]], [], 0, 1, ["loc", [null, [10, 20], [18, 27]]]]],
            locals: ["item"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/extracted-item-table.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "colspan", "2");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 1]), 1, 1);
            return morphs;
          },
          statements: [["content", "key", ["loc", [null, [4, 16], [4, 23]]]], ["block", "each", [["get", "value", ["loc", [null, [9, 24], [9, 29]]]]], ["key", "@index"], 0, null, ["loc", [null, [9, 16], [19, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 8
                  },
                  "end": {
                    "line": 33,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/extracted-item-table.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("tr");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("td");
                dom.setAttribute(el2, "colspan", "2");
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
                return morphs;
              },
              statements: [["inline", "extracted-item-table", [], ["item", ["subexpr", "@mut", [["get", "value", ["loc", [null, [30, 48], [30, 53]]]]], [], []]], ["loc", [null, [30, 20], [30, 55]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/extracted-item-table.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "key", ["loc", [null, [24, 16], [24, 23]]]], ["block", "unless", [["subexpr", "is-empty-object", [["get", "value", ["loc", [null, [27, 35], [27, 40]]]]], [], ["loc", [null, [27, 18], [27, 41]]]]], [], 0, null, ["loc", [null, [27, 8], [33, 19]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/extracted-item-table.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("td");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
              return morphs;
            },
            statements: [["content", "key", ["loc", [null, [36, 16], [36, 23]]]], ["content", "value", ["loc", [null, [38, 16], [38, 25]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 4
              },
              "end": {
                "line": 41,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/extracted-item-table.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "is-object", [["get", "value", ["loc", [null, [22, 25], [22, 30]]]]], [], ["loc", [null, [22, 14], [22, 31]]]]], [], 0, 1, ["loc", [null, [22, 4], [41, 4]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 42,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/extracted-item-table.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "is-array", [["get", "value", ["loc", [null, [2, 20], [2, 25]]]]], [], ["loc", [null, [2, 10], [2, 26]]]]], [], 0, 1, ["loc", [null, [2, 4], [41, 11]]]]],
        locals: ["key", "value"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 43,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/extracted-item-table.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each-in", [["get", "item", ["loc", [null, [1, 11], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [42, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/extracted-items-group", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 12
                  },
                  "end": {
                    "line": 6,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/extracted-items-group.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                Extracted items\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 7,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/extracted-items-group.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "extracted-items-tab", [], [], 0, null, ["loc", [null, [4, 12], [6, 36]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 8
                },
                "end": {
                  "line": 10,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/extracted-items-group.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            JSON\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/extracted-items-group.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "group.tab", [], ["toolId", "extracted-items"], 0, null, ["loc", [null, [3, 8], [7, 22]]]], ["block", "group.tab", [], ["toolId", "extracted-items-json"], 1, null, ["loc", [null, [8, 8], [10, 22]]]], ["content", "extracted-items-status", ["loc", [null, [11, 8], [11, 34]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 8
                  },
                  "end": {
                    "line": 15,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/extracted-items-group.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "extracted-items-panel", [], ["selected", ["subexpr", "@mut", [["get", "active", ["loc", [null, [14, 45], [14, 51]]]]], [], []]], ["loc", [null, [14, 12], [14, 53]]]]],
              locals: ["active"],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 8
                  },
                  "end": {
                    "line": 18,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/extracted-items-group.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "extracted-items-json-panel", [], ["selected", ["subexpr", "@mut", [["get", "active", ["loc", [null, [17, 50], [17, 56]]]]], [], []]], ["loc", [null, [17, 12], [17, 58]]]]],
              locals: ["active"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 19,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/extracted-items-group.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "group.panel", [], ["class", "extracted-items container-fluid", "toolId", "extracted-items"], 0, null, ["loc", [null, [13, 8], [15, 24]]]], ["block", "group.panel", [], ["class", "extracted-items-json", "toolId", "extracted-items-json"], 1, null, ["loc", [null, [16, 8], [18, 24]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 19,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/extracted-items-group.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [12, 18], [12, 31]]]], "panels"], [], ["loc", [null, [12, 14], [12, 41]]]]], [], 0, null, ["loc", [null, [12, 4], [19, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/extracted-items-group.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [2, 14], [2, 27]]]], "tabs"], [], ["loc", [null, [2, 10], [2, 35]]]]], [], 0, 1, ["loc", [null, [2, 4], [19, 11]]]]],
        locals: ["group"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/extracted-items-group.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tool-group", [], ["id", "extracted-items-group"], 0, null, ["loc", [null, [1, 0], [20, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/extracted-items-json-panel", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/extracted-items-json-panel.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "extracted-items-json", [], ["json", ["subexpr", "@mut", [["get", "extractedItems.items", ["loc", [null, [3, 32], [3, 52]]]]], [], []], "position", 0], ["loc", [null, [3, 4], [3, 65]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/extracted-items-json-panel.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "json-character-size");
        var el2 = dom.createTextNode("a");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "selected", ["loc", [null, [2, 6], [2, 14]]]]], [], 0, null, ["loc", [null, [2, 0], [4, 8]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/extracted-items-json-value", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 72
            }
          },
          "moduleName": "portia-ui/templates/components/extracted-items-json-value.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "json-array-spacing");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "depthSpaces", ["loc", [null, [1, 50], [1, 65]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/extracted-items-json-value.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "fromArray", ["loc", [null, [1, 6], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [1, 79]]]], ["content", "escapedValue", ["loc", [null, [2, 0], [2, 16]]]], ["content", "comma", ["loc", [null, [2, 16], [2, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/extracted-items-json", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("b");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "openingCharacter", ["loc", [null, [4, 15], [4, 35]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 8,
                    "column": 12
                  },
                  "end": {
                    "line": 10,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("br");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 11,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("b");
              dom.setAttribute(el1, "class", "new-line");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [0]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(element4, 0, 0);
              morphs[1] = dom.createMorphAt(element4, 1, 1);
              morphs[2] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "depthPlus1Spaces", ["loc", [null, [7, 32], [7, 52]]]], ["content", "openChild", ["loc", [null, [7, 52], [7, 65]]]], ["block", "if", [["subexpr", "is-object", [["get", "json", ["loc", [null, [8, 30], [8, 34]]]]], [], ["loc", [null, [8, 19], [8, 35]]]]], [], 0, null, ["loc", [null, [8, 12], [10, 20]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["get", "fromKey", ["loc", [null, [3, 18], [3, 25]]]]], [], 0, null, ["loc", [null, [3, 8], [5, 19]]]], ["block", "if", [["get", "openChild", ["loc", [null, [6, 15], [6, 24]]]]], [], 1, null, ["loc", [null, [6, 8], [11, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 12
                  },
                  "end": {
                    "line": 15,
                    "column": 69
                  }
                },
                "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("b");
                dom.setAttribute(el1, "class", "new-line");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 8
                },
                "end": {
                  "line": 17,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
            },
            isEmpty: false,
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "and", [["get", "fromKey", ["loc", [null, [15, 23], [15, 30]]]], ["subexpr", "not", [["get", "index", ["loc", [null, [15, 36], [15, 41]]]]], [], ["loc", [null, [15, 31], [15, 42]]]]], [], ["loc", [null, [15, 18], [15, 43]]]]], [], 0, null, ["loc", [null, [15, 12], [15, 76]]]], ["inline", "extracted-items-json", [], ["json", ["subexpr", "@mut", [["get", "value", ["loc", [null, [16, 40], [16, 45]]]]], [], []], "position", ["subexpr", "@mut", [["get", "index", ["loc", [null, [16, 55], [16, 60]]]]], [], []], "from", "array", "parent", ["subexpr", "@mut", [["get", "json", ["loc", [null, [16, 81], [16, 85]]]]], [], []], "depth", ["subexpr", "@mut", [["get", "depth", ["loc", [null, [16, 92], [16, 97]]]]], [], []]], ["loc", [null, [16, 12], [16, 101]]]]],
            locals: ["value", "index"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 18,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "json", ["loc", [null, [14, 16], [14, 20]]]]], [], 0, null, ["loc", [null, [14, 8], [17, 18]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 19,
                    "column": 8
                  },
                  "end": {
                    "line": 19,
                    "column": 65
                  }
                },
                "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("b");
                dom.setAttribute(el1, "class", "new-line");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 21,
                      "column": 66
                    },
                    "end": {
                      "line": 21,
                      "column": 93
                    }
                  },
                  "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("[");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 21,
                      "column": 100
                    },
                    "end": {
                      "line": 21,
                      "column": 129
                    }
                  },
                  "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("{ ");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 8
                  },
                  "end": {
                    "line": 23,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
              },
              isEmpty: false,
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "json-key");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\"");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\": ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element3 = dom.childAt(fragment, [0]);
                var morphs = new Array(5);
                morphs[0] = dom.createMorphAt(element3, 0, 0);
                morphs[1] = dom.createMorphAt(element3, 2, 2);
                morphs[2] = dom.createMorphAt(element3, 4, 4);
                morphs[3] = dom.createMorphAt(element3, 5, 5);
                morphs[4] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["content", "depthPlus1Spaces", ["loc", [null, [21, 35], [21, 55]]]], ["content", "key", ["loc", [null, [21, 56], [21, 63]]]], ["block", "if", [["subexpr", "is-array", [["get", "v.value", ["loc", [null, [21, 82], [21, 89]]]]], [], ["loc", [null, [21, 72], [21, 90]]]]], [], 0, null, ["loc", [null, [21, 66], [21, 100]]]], ["block", "if", [["subexpr", "is-object", [["get", "v.value", ["loc", [null, [21, 117], [21, 124]]]]], [], ["loc", [null, [21, 106], [21, 125]]]]], [], 1, null, ["loc", [null, [21, 100], [21, 136]]]], ["inline", "extracted-items-json", [], ["json", ["subexpr", "@mut", [["get", "v.value", ["loc", [null, [22, 41], [22, 48]]]]], [], []], "position", ["subexpr", "@mut", [["get", "v.index", ["loc", [null, [22, 58], [22, 65]]]]], [], []], "from", "key", "parent", ["subexpr", "@mut", [["get", "json", ["loc", [null, [22, 84], [22, 88]]]]], [], []], "depth", ["subexpr", "@mut", [["get", "depth", ["loc", [null, [22, 95], [22, 100]]]]], [], []], "key", ["subexpr", "@mut", [["get", "key", ["loc", [null, [22, 105], [22, 108]]]]], [], []]], ["loc", [null, [22, 12], [22, 112]]]]],
              locals: ["key", "v"],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 4
                },
                "end": {
                  "line": 24,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "and", [["get", "fromKey", ["loc", [null, [19, 19], [19, 26]]]], ["subexpr", "not", [["get", "index", ["loc", [null, [19, 32], [19, 37]]]]], [], ["loc", [null, [19, 27], [19, 38]]]]], [], ["loc", [null, [19, 14], [19, 39]]]]], [], 0, null, ["loc", [null, [19, 8], [19, 72]]]], ["block", "each-in", [["subexpr", "indexed-object", [["get", "json", ["loc", [null, [20, 35], [20, 39]]]]], [], ["loc", [null, [20, 19], [20, 40]]]]], [], 1, null, ["loc", [null, [20, 8], [23, 21]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 4
              },
              "end": {
                "line": 24,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "is-object", [["get", "json", ["loc", [null, [18, 25], [18, 29]]]]], [], ["loc", [null, [18, 14], [18, 30]]]]], [], 0, null, ["loc", [null, [18, 4], [24, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 4
              },
              "end": {
                "line": 29,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("b");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("b");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("b");
            dom.setAttribute(el1, "class", "new-line");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [0]);
            var element2 = dom.childAt(fragment, [2]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(element1, 0, 0);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            morphs[2] = dom.createMorphAt(element1, 2, 2);
            morphs[3] = dom.createMorphAt(element2, 0, 0);
            morphs[4] = dom.createMorphAt(element2, 1, 1);
            return morphs;
          },
          statements: [["content", "depthSpaces", ["loc", [null, [26, 11], [26, 26]]]], ["content", "closingCharacter", ["loc", [null, [26, 26], [26, 46]]]], ["content", "comma", ["loc", [null, [26, 46], [26, 55]]]], ["content", "depthSpaces", ["loc", [null, [27, 11], [27, 26]]]], ["content", "openSibling", ["loc", [null, [27, 26], [27, 41]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 4
              },
              "end": {
                "line": 31,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("b");
            dom.setAttribute(el1, "class", "new-line");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element0, 0, 0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            morphs[2] = dom.createMorphAt(element0, 2, 2);
            return morphs;
          },
          statements: [["content", "depthSpaces", ["loc", [null, [30, 28], [30, 43]]]], ["content", "closingCharacter", ["loc", [null, [30, 43], [30, 63]]]], ["content", "comma", ["loc", [null, [30, 63], [30, 72]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "showOpen", ["loc", [null, [2, 10], [2, 18]]]]], [], 0, null, ["loc", [null, [2, 4], [12, 12]]]], ["block", "if", [["subexpr", "is-array", [["get", "json", ["loc", [null, [13, 20], [13, 24]]]]], [], ["loc", [null, [13, 10], [13, 25]]]]], [], 1, 2, ["loc", [null, [13, 4], [24, 12]]]], ["block", "if", [["get", "openSibling", ["loc", [null, [25, 11], [25, 22]]]]], [], 3, 4, ["loc", [null, [25, 4], [31, 14]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("b");
          dom.setAttribute(el1, "class", "new-line");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["inline", "extracted-items-json-value", [], ["value", ["subexpr", "@mut", [["get", "json", ["loc", [null, [33, 39], [33, 43]]]]], [], []], "depth", ["subexpr", "@mut", [["get", "depth", ["loc", [null, [33, 50], [33, 55]]]]], [], []], "position", ["subexpr", "@mut", [["get", "position", ["loc", [null, [33, 65], [33, 73]]]]], [], []], "maxPosition", ["subexpr", "@mut", [["get", "maxPosition", ["loc", [null, [33, 86], [33, 97]]]]], [], []], "key", ["subexpr", "@mut", [["get", "key", ["loc", [null, [33, 102], [33, 105]]]]], [], []], "from", ["subexpr", "@mut", [["get", "from", ["loc", [null, [33, 111], [33, 115]]]]], [], []]], ["loc", [null, [33, 4], [33, 119]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/extracted-items-json.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["subexpr", "is-object-or-array", [["get", "json", ["loc", [null, [1, 26], [1, 30]]]]], [], ["loc", [null, [1, 6], [1, 31]]]]], [], 0, 1, ["loc", [null, [1, 0], [35, 8]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/extracted-items-panel", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/extracted-items-panel.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "mid-align twice-x spaced");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "fa fa-spin fa-refresh");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "mid-align one-half-x spaced");
          var el2 = dom.createTextNode("Extracting data...");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/extracted-items-panel.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "mid-align twice-x spaced");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "fa fa-ban");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "mid-align one-half-x spaced");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["content", "failedMsg", ["loc", [null, [13, 6], [13, 19]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/extracted-items-panel.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "extracted-item-table", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [19, 36], [19, 40]]]]], [], []]], ["loc", [null, [19, 8], [19, 42]]]]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/extracted-items-panel.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "extractedItems.items", ["loc", [null, [18, 12], [18, 32]]]]], ["key", "@index"], 0, null, ["loc", [null, [18, 4], [20, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/extracted-items-panel.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isExtracting", ["loc", [null, [1, 6], [1, 18]]]]], [], 0, null, ["loc", [null, [1, 0], [6, 7]]]], ["block", "if", [["get", "failedExtraction", ["loc", [null, [8, 6], [8, 22]]]]], [], 1, null, ["loc", [null, [8, 0], [15, 7]]]], ["block", "if", [["subexpr", "and", [["get", "selected", ["loc", [null, [17, 11], [17, 19]]]], ["subexpr", "not", [["get", "isExtracting", ["loc", [null, [17, 25], [17, 37]]]]], [], ["loc", [null, [17, 20], [17, 38]]]]], [], ["loc", [null, [17, 6], [17, 39]]]]], [], 2, null, ["loc", [null, [17, 0], [21, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("portia-ui/templates/components/extracted-items-status", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 12
                  },
                  "end": {
                    "line": 7,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/extracted-items-status.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                Javascript is enabled for this sample and may not be needed.\n                Your spider may run faster if Javascript is not run on pages like this\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 12
                  },
                  "end": {
                    "line": 9,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/extracted-items-status.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                Javascript is not enabled for this sample. It may extract more accurate data if it is enabled\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 10,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/extracted-items-status.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "type", ["loc", [null, [4, 22], [4, 26]]]], "js"], [], ["loc", [null, [4, 18], [4, 32]]]]], [], 0, 1, ["loc", [null, [4, 12], [9, 19]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 8
                },
                "end": {
                  "line": 12,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/extracted-items-status.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Your sample is correctly configured for extraction\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/extracted-items-status.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "hasWarning", ["loc", [null, [3, 14], [3, 24]]]]], [], 0, 1, ["loc", [null, [3, 8], [12, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/extracted-items-status.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "help-icon", [], ["icon", ["subexpr", "@mut", [["get", "icon", ["loc", [null, [2, 22], [2, 26]]]]], [], []], "placement", "left"], 0, null, ["loc", [null, [2, 4], [13, 18]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 12
          }
        },
        "moduleName": "portia-ui/templates/components/extracted-items-status.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "link-to", ["projects.project.spider.options"], ["bubbles", false], 0, null, ["loc", [null, [1, 0], [14, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/extracted-items-tab", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/extracted-items-tab.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "badge");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "numItems", ["loc", [null, [4, 24], [4, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/extracted-items-tab.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]], ["block", "unless", [["get", "isExtracting", ["loc", [null, [3, 10], [3, 22]]]]], [], 0, null, ["loc", [null, [3, 0], [5, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/extractor-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 12
                  },
                  "end": {
                    "line": 6,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/extractor-options.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                Extractors\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 8,
                      "column": 16
                    },
                    "end": {
                      "line": 8,
                      "column": 60
                    }
                  },
                  "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("Add field type extractor");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 10,
                        "column": 20
                      },
                      "end": {
                        "line": 12,
                        "column": 20
                      }
                    },
                    "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "list-item-icon", [], ["class", "icon", "icon", ["subexpr", "@mut", [["get", "type", ["loc", [null, [11, 59], [11, 63]]]]], [], []]], ["loc", [null, [11, 24], [11, 65]]]], ["content", "type", ["loc", [null, [11, 65], [11, 73]]]]],
                  locals: ["value"],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 9,
                      "column": 16
                    },
                    "end": {
                      "line": 13,
                      "column": 16
                    }
                  },
                  "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "dropdown.item", [], ["action", ["subexpr", "chain-actions", [["subexpr", "action", ["addTypeExtractor", ["get", "type", ["loc", [null, [10, 86], [10, 90]]]]], [], ["loc", [null, [10, 59], [10, 91]]]], ["get", "dropdown.closeMenu", ["loc", [null, [10, 92], [10, 110]]]]], [], ["loc", [null, [10, 44], [10, 111]]]]], 0, null, ["loc", [null, [10, 20], [12, 38]]]]],
                locals: ["type"],
                templates: [child0]
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 14,
                      "column": 16
                    },
                    "end": {
                      "line": 14,
                      "column": 68
                    }
                  },
                  "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("Add regular expression extractor");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            var child3 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 16,
                        "column": 20
                      },
                      "end": {
                        "line": 18,
                        "column": 20
                      }
                    },
                    "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "list-item-icon", [], ["class", "icon", "icon", "regular expression"], ["loc", [null, [17, 24], [17, 81]]]], ["content", "extractor.value", ["loc", [null, [17, 81], [17, 100]]]]],
                  locals: ["value"],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 15,
                      "column": 16
                    },
                    "end": {
                      "line": 19,
                      "column": 16
                    }
                  },
                  "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "dropdown.item", [], ["action", ["subexpr", "chain-actions", [["subexpr", "action", ["addRegexExtractor", ["get", "extractor", ["loc", [null, [16, 87], [16, 96]]]]], [], ["loc", [null, [16, 59], [16, 97]]]], ["get", "dropdown.closeMenu", ["loc", [null, [16, 98], [16, 116]]]]], [], ["loc", [null, [16, 44], [16, 117]]]]], 0, null, ["loc", [null, [16, 20], [18, 38]]]]],
                locals: ["extractor"],
                templates: [child0]
              };
            })();
            var child4 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 20,
                      "column": 16
                    },
                    "end": {
                      "line": 22,
                      "column": 16
                    }
                  },
                  "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("New regular expression\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "list-item-icon", [], ["class", "icon", "icon", "add"], ["loc", [null, [21, 20], [21, 62]]]]],
                locals: ["value"],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 12
                  },
                  "end": {
                    "line": 23,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/extractor-options.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(5);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "dropdown.header", [], [], 0, null, ["loc", [null, [8, 16], [8, 80]]]], ["block", "each", [["get", "types", ["loc", [null, [9, 24], [9, 29]]]]], [], 1, null, ["loc", [null, [9, 16], [13, 25]]]], ["block", "dropdown.header", [], [], 2, null, ["loc", [null, [14, 16], [14, 88]]]], ["block", "each", [["get", "regexExtractors", ["loc", [null, [15, 24], [15, 39]]]]], [], 3, null, ["loc", [null, [15, 16], [19, 25]]]], ["block", "dropdown.item", [], ["action", ["subexpr", "chain-actions", [["subexpr", "action", ["addNewRegexExtractor"], [], ["loc", [null, [20, 55], [20, 86]]]], ["get", "dropdown.closeMenu", ["loc", [null, [20, 87], [20, 105]]]]], [], ["loc", [null, [20, 40], [20, 106]]]]], 4, null, ["loc", [null, [20, 16], [22, 34]]]]],
              locals: ["dropdown"],
              templates: [child0, child1, child2, child3, child4]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 24,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/extractor-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-item-text", [], ["class", "title"], 0, null, ["loc", [null, [4, 12], [6, 31]]]], ["block", "list-item-icon-menu", [], ["icon", "add-dropdown"], 1, null, ["loc", [null, [7, 12], [23, 36]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 29,
                            "column": 24
                          },
                          "end": {
                            "line": 31,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["content", "extractor.value", ["loc", [null, [30, 28], [30, 47]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 27,
                          "column": 20
                        },
                        "end": {
                          "line": 32,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(2);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["inline", "list-item-icon", [], ["icon", ["subexpr", "@mut", [["get", "extractor.value", ["loc", [null, [28, 46], [28, 61]]]]], [], []]], ["loc", [null, [28, 24], [28, 63]]]], ["block", "list-item-text", [], [], 0, null, ["loc", [null, [29, 24], [31, 43]]]]],
                    locals: [],
                    templates: [child0]
                  };
                })();
                var child1 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 32,
                            "column": 20
                          },
                          "end": {
                            "line": 35,
                            "column": 20
                          }
                        },
                        "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                        ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                        ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                    ");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(2);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "list-item-icon", [], ["icon", "regular expression"], ["loc", [null, [33, 24], [33, 68]]]], ["inline", "list-item-editable", [], ["value", ["subexpr", "mut", [["get", "extractor.value", ["loc", [null, [34, 56], [34, 71]]]]], [], ["loc", [null, [34, 51], [34, 72]]]], "editing", ["subexpr", "mut", [["get", "extractor.new", ["loc", [null, [34, 86], [34, 99]]]]], [], ["loc", [null, [34, 81], [34, 100]]]], "onChange", ["subexpr", "action", ["saveExtractor", ["get", "extractor", ["loc", [null, [34, 134], [34, 143]]]]], [], ["loc", [null, [34, 110], [34, 144]]]]], ["loc", [null, [34, 24], [34, 146]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 32,
                          "column": 20
                        },
                        "end": {
                          "line": 35,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["block", "if", [["subexpr", "eq", [["get", "extractor.type", ["loc", [null, [32, 34], [32, 48]]]], "regex"], [], ["loc", [null, [32, 30], [32, 57]]]]], [], 0, null, ["loc", [null, [32, 20], [35, 20]]]]],
                    locals: [],
                    templates: [child0]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 26,
                        "column": 16
                      },
                      "end": {
                        "line": 37,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("                    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    return morphs;
                  },
                  statements: [["block", "if", [["subexpr", "eq", [["get", "extractor.type", ["loc", [null, [27, 30], [27, 44]]]], "type"], [], ["loc", [null, [27, 26], [27, 52]]]]], [], 0, 1, ["loc", [null, [27, 20], [35, 27]]]], ["inline", "list-item-icon", [], ["icon", "remove", "action", ["subexpr", "action", ["removeExtractor", ["get", "extractor", ["loc", [null, [36, 84], [36, 93]]]]], [], ["loc", [null, [36, 58], [36, 94]]]], "bubbles", false], ["loc", [null, [36, 20], [36, 110]]]]],
                  locals: [],
                  templates: [child0, child1]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 25,
                      "column": 12
                    },
                    "end": {
                      "line": 38,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/extractor-options.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "tree-list-item", [], [], 0, null, ["loc", [null, [26, 16], [37, 35]]]]],
                locals: ["extractor"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 24,
                    "column": 8
                  },
                  "end": {
                    "line": 39,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/extractor-options.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "each", [["get", "annotation.extractors", ["loc", [null, [25, 20], [25, 41]]]]], [], 0, null, ["loc", [null, [25, 12], [38, 21]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 39,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/extractor-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [24, 22], [24, 37]]]], "subtrees"], [], ["loc", [null, [24, 18], [24, 49]]]]], [], 0, null, ["loc", [null, [24, 8], [39, 8]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 40,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/extractor-options.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [3, 18], [3, 33]]]], "item"], [], ["loc", [null, [3, 14], [3, 41]]]]], [], 0, 1, ["loc", [null, [3, 8], [39, 15]]]]],
          locals: ["options"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/extractor-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tree-list-item", [], ["hasChildren", true], 0, null, ["loc", [null, [2, 4], [40, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/extractor-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tree-list", [], ["class", "extractor-options"], 0, null, ["loc", [null, [1, 0], [41, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/feed-url-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/feed-url-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "spaced");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "txt-describe");
        var el3 = dom.createTextNode("\n        Enter a publicly available URL containing newline separated URLs\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "target", "_blank");
        var el4 = dom.createTextNode("like this.");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "spaced");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("label");
        dom.setAttribute(el2, "for", "feedUrl");
        var el3 = dom.createTextNode("Feed URL");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'href');
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 3, 3);
        return morphs;
      },
      statements: [["attribute", "href", ["get", "feedLink", ["loc", [null, [4, 18], [4, 26]]]]], ["inline", "input", [], ["type", "text", "id", "feedUrl", "class", "form-control focus-control", "value", ["subexpr", "mut", [["get", "startUrl.url", ["loc", [null, [14, 17], [14, 29]]]]], [], ["loc", [null, [14, 12], [14, 30]]]], "focus-out", "saveFeedUrl", "placeholder", "https://gist.github.com/user/gist_id"], ["loc", [null, [10, 4], [17, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/field-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 9,
              "column": 8
            }
          },
          "moduleName": "portia-ui/templates/components/field-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            Only extract items that have this field. All samples using this data format will be affected\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 8
            },
            "end": {
              "line": 17,
              "column": 8
            }
          },
          "moduleName": "portia-ui/templates/components/field-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            The value of this field will be ignored when checking for duplicate items\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/field-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Field");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "checkbox");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Required\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "checkbox");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Vary\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element1, 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[4] = dom.createMorphAt(element2, 3, 3);
        return morphs;
      },
      statements: [["element", "action", ["save"], ["on", "change"], ["loc", [null, [2, 6], [2, 35]]]], ["inline", "input", [], ["type", "checkbox", "name", "required", "checked", ["subexpr", "mut", [["get", "field.required", ["loc", [null, [5, 65], [5, 79]]]]], [], ["loc", [null, [5, 60], [5, 80]]]]], ["loc", [null, [5, 12], [5, 82]]]], ["block", "help-icon", [], [], 0, null, ["loc", [null, [7, 8], [9, 22]]]], ["inline", "input", [], ["type", "checkbox", "name", "vary", "checked", ["subexpr", "mut", [["get", "field.vary", ["loc", [null, [13, 61], [13, 71]]]]], [], ["loc", [null, [13, 56], [13, 72]]]]], ["loc", [null, [13, 12], [13, 74]]]], ["block", "help-icon", [], [], 1, null, ["loc", [null, [15, 8], [17, 22]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/fragment-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/fragment-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "list-item-badge", [], ["value", ["subexpr", "@mut", [["get", "multiplicity", ["loc", [null, [2, 28], [2, 40]]]]], [], []], "color", ["subexpr", "@mut", [["get", "fragmentColor", ["loc", [null, [2, 47], [2, 60]]]]], [], []]], ["loc", [null, [2, 4], [2, 62]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 7,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/fragment-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "changeset.error.value.validation", ["loc", [null, [6, 12], [6, 48]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 8
                },
                "end": {
                  "line": 9,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/fragment-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "icon-button", [], ["id", ["subexpr", "concat", ["error-icon-", ["get", "elementId", ["loc", [null, [8, 51], [8, 60]]]]], [], ["loc", [null, [8, 29], [8, 61]]]], "icon", "error-triangle", "class", "fragment-error tooltip-for"], ["loc", [null, [8, 12], [8, 120]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/fragment-options.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "tooltip.section", ["loc", [null, [5, 18], [5, 33]]]], "tooltip"], [], ["loc", [null, [5, 14], [5, 44]]]]], [], 0, 1, ["loc", [null, [5, 8], [9, 15]]]]],
          locals: ["tooltip"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/fragment-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tooltip-container", [], ["toggleTooltip", ["subexpr", "@mut", [["get", "toggleTooltip", ["loc", [null, [4, 39], [4, 52]]]]], [], []], "tooltipContainer", "body", "tooltipFor", ["subexpr", "concat", ["error-icon-", ["get", "elementId", ["loc", [null, [4, 110], [4, 119]]]]], [], ["loc", [null, [4, 88], [4, 120]]]], "placement", "left"], 0, null, ["loc", [null, [4, 4], [10, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/fragment-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("-");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", "form-control compact-control fragment-left-half focus-control", "value", ["subexpr", "mut", [["get", "lower", ["loc", [null, [15, 109], [15, 114]]]]], [], ["loc", [null, [15, 104], [15, 115]]]], "placeholder", "start", "focus-out", ["subexpr", "action", ["saveFragment"], [], ["loc", [null, [15, 146], [15, 169]]]]], ["loc", [null, [15, 8], [15, 171]]]], ["inline", "input", [], ["type", "text", "class", "form-control compact-control fragment-right-half", "value", ["subexpr", "mut", [["get", "higher", ["loc", [null, [17, 96], [17, 102]]]]], [], ["loc", [null, [17, 91], [17, 103]]]], "placeholder", "end", "focus-out", ["subexpr", "action", ["saveFragment"], [], ["loc", [null, [17, 132], [17, 155]]]]], ["loc", [null, [17, 8], [17, 157]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/fragment-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", "form-control compact-control fragment-input focus-control", "value", ["subexpr", "mut", [["get", "changeset.value", ["loc", [null, [19, 105], [19, 120]]]]], [], ["loc", [null, [19, 100], [19, 121]]]], "placeholder", ["subexpr", "@mut", [["get", "listPlaceholder", ["loc", [null, [19, 134], [19, 149]]]]], [], []], "focus-out", ["subexpr", "action", ["saveFragment"], [], ["loc", [null, [19, 160], [19, 183]]]], "key-up", ["subexpr", "action", ["updateValue"], [], ["loc", [null, [19, 191], [19, 213]]]]], ["loc", [null, [19, 8], [19, 215]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/fragment-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "list-item-icon", [], ["class", "fragment-action-icon", "icon", "remove", "action", ["subexpr", "action", [["get", "removeFragment", ["loc", [null, [38, 21], [38, 35]]]], ["get", "fragment", ["loc", [null, [38, 36], [38, 44]]]]], [], ["loc", [null, [38, 13], [38, 45]]]], "bubbles", false], ["loc", [null, [35, 4], [40, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/fragment-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "form-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[4] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "changeset.isValid", ["loc", [null, [1, 6], [1, 23]]]]], [], 0, 1, ["loc", [null, [1, 0], [11, 7]]]], ["attribute", "class", ["concat", ["form-group ", ["subexpr", "if", [["get", "changeset.isInvalid", ["loc", [null, [13, 28], [13, 47]]]], "has-error"], [], ["loc", [null, [13, 23], [13, 61]]]]]]], ["block", "if", [["get", "isRange", ["loc", [null, [14, 10], [14, 17]]]]], [], 2, 3, ["loc", [null, [14, 4], [20, 11]]]], ["inline", "select-box", [], ["buttonClass", "compact-control fragment-type", "value", ["subexpr", "mut", [["get", "fragmentType", ["loc", [null, [26, 17], [26, 29]]]]], [], ["loc", [null, [26, 12], [26, 30]]]], "valueAttribute", "label", "choices", ["subexpr", "@mut", [["get", "fragmentTypes", ["loc", [null, [28, 14], [28, 27]]]]], [], []], "isDisabled", ["subexpr", "eq", [["get", "index", ["loc", [null, [29, 21], [29, 26]]]], 0], [], ["loc", [null, [29, 17], [29, 29]]]], "onClick", ["subexpr", "action", ["changeFragmentType"], [], ["loc", [null, [30, 14], [30, 43]]]]], ["loc", [null, [24, 4], [31, 6]]]], ["block", "if", [["subexpr", "not-eq", [["get", "index", ["loc", [null, [34, 14], [34, 19]]]], 0], [], ["loc", [null, [34, 6], [34, 22]]]]], [], 4, null, ["loc", [null, [34, 0], [41, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("portia-ui/templates/components/generated-url-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/generated-url-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Fragments\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("\n            A generated url is made up of one or more fragments. A fragment can be a single value,\n            a list of different values or a range of numbers.\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("\n            Using fragments you can create a large number of urls.\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/generated-url-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    Fragments\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "help-icon", [], [], 0, null, ["loc", [null, [3, 4], [12, 18]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/generated-url-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "list-item-icon", [], ["icon", "add", "id", "add-fragment-button", "action", ["subexpr", "action", ["addFragment"], [], ["loc", [null, [19, 13], [19, 35]]]], "disabled", ["subexpr", "not", [["get", "allValidFragments", ["loc", [null, [20, 20], [20, 37]]]]], [], ["loc", [null, [20, 15], [20, 38]]]]], ["loc", [null, [16, 4], [20, 40]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/generated-url-options.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "fragment-options", [], ["index", ["subexpr", "@mut", [["get", "index", ["loc", [null, [25, 23], [25, 28]]]]], [], []], "fragment", ["subexpr", "@mut", [["get", "fragment", ["loc", [null, [26, 23], [26, 31]]]]], [], []], "saveSpider", ["subexpr", "@mut", [["get", "saveSpider", ["loc", [null, [27, 23], [27, 33]]]]], [], []], "fragmentColor", ["subexpr", "array-get", [["get", "fragmentColors", ["loc", [null, [28, 34], [28, 48]]]], ["get", "index", ["loc", [null, [28, 49], [28, 54]]]]], [], ["loc", [null, [28, 23], [28, 55]]]], "removeFragment", ["subexpr", "action", ["removeFragment"], [], ["loc", [null, [29, 23], [29, 48]]]], "allValidFragments", ["subexpr", "@mut", [["get", "allValidFragments", ["loc", [null, [30, 26], [30, 43]]]]], [], []]], ["loc", [null, [24, 4], [31, 6]]]]],
        locals: ["fragment", "index"],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 12
                },
                "end": {
                  "line": 42,
                  "column": 12
                }
              },
              "moduleName": "portia-ui/templates/components/generated-url-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "fragment", ["loc", [null, [41, 16], [41, 28]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 8
              },
              "end": {
                "line": 43,
                "column": 8
              }
            },
            "moduleName": "portia-ui/templates/components/generated-url-options.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "colored-span", [], ["class", "fragment-span", "color", ["subexpr", "array-get", [["get", "fragmentColors", ["loc", [null, [40, 67], [40, 81]]]], ["get", "index", ["loc", [null, [40, 82], [40, 87]]]]], [], ["loc", [null, [40, 56], [40, 88]]]]], 0, null, ["loc", [null, [40, 12], [42, 29]]]]],
          locals: ["fragment", "index"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 45,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/generated-url-options.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "generatedUrlList", ["loc", [null, [39, 16], [39, 32]]]]], [], 0, null, ["loc", [null, [39, 8], [43, 17]]]]],
        locals: ["generatedUrlList"],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/generated-url-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "tooltip-icon", [], ["icon", "vertical-ellipsis", "text", "This list only shows the first few generated urls.", "modifyClasses", "one-half-x full-width"], ["loc", [null, [48, 8], [52, 10]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 57,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/generated-url-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "start-url-list-title");
        var el2 = dom.createTextNode("Generation List");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("section");
        dom.setAttribute(el2, "class", "start-url-generation-list");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [8]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[3] = dom.createAttrMorph(element0, 'class');
        morphs[4] = dom.createMorphAt(element1, 1, 1);
        morphs[5] = dom.createMorphAt(element1, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "list-item-text", [], ["class", "title fragments-title"], 0, null, ["loc", [null, [1, 0], [13, 19]]]], ["block", "tooltip-container", [], ["tooltipFor", "add-fragment-button", "text", "Create a new fragment to generate URLs", "tooltipContainer", "body"], 1, null, ["loc", [null, [15, 0], [21, 22]]]], ["block", "each", [["get", "fragments", ["loc", [null, [23, 8], [23, 17]]]]], [], 2, null, ["loc", [null, [23, 0], [32, 9]]]], ["attribute", "class", ["concat", ["start-url-list form-control ", ["subexpr", "unless", [["get", "allValidFragments", ["loc", [null, [35, 49], [35, 66]]]], "has-error"], [], ["loc", [null, [35, 40], [35, 80]]]]]]], ["block", "each", [["get", "generatedUrlLists", ["loc", [null, [37, 12], [37, 29]]]]], [], 3, null, ["loc", [null, [37, 4], [45, 13]]]], ["block", "if", [["subexpr", "not", [["get", "isComplete", ["loc", [null, [47, 15], [47, 25]]]]], [], ["loc", [null, [47, 10], [47, 26]]]]], [], 4, null, ["loc", [null, [47, 4], [53, 11]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("portia-ui/templates/components/help-icon", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/help-icon.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [3, 8], [3, 17]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/help-icon.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "icon-button", [], ["id", ["subexpr", "concat", ["help-icon-", ["get", "elementId", ["loc", [null, [5, 46], [5, 55]]]]], [], ["loc", [null, [5, 25], [5, 56]]]], "class", ["subexpr", "@mut", [["get", "classes", ["loc", [null, [5, 63], [5, 70]]]]], [], []], "icon", ["subexpr", "@mut", [["get", "icon", ["loc", [null, [5, 76], [5, 80]]]]], [], []]], ["loc", [null, [5, 8], [5, 82]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/help-icon.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "tooltip.section", ["loc", [null, [2, 14], [2, 29]]]], "tooltip"], [], ["loc", [null, [2, 10], [2, 40]]]]], [], 0, 1, ["loc", [null, [2, 4], [6, 11]]]]],
        locals: ["tooltip"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/help-icon.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tooltip-container", [], ["tooltipClasses", ["subexpr", "@mut", [["get", "tooltipClasses", ["loc", [null, [1, 36], [1, 50]]]]], [], []], "tooltipFor", ["subexpr", "concat", ["help-icon-", ["get", "elementId", ["loc", [null, [1, 83], [1, 92]]]]], [], ["loc", [null, [1, 62], [1, 93]]]], "tooltipContainer", ["subexpr", "@mut", [["get", "tooltipContainer", ["loc", [null, [1, 111], [1, 127]]]]], [], []], "placement", ["subexpr", "@mut", [["get", "placement", ["loc", [null, [1, 138], [1, 147]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [7, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/icon-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["empty-body"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/icon-button.hbs"
      },
      isEmpty: true,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/input-with-clear", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/input-with-clear.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["class", "form-control", "value", ["subexpr", "mut", [["get", "value", ["loc", [null, [1, 40], [1, 45]]]]], [], ["loc", [null, [1, 35], [1, 46]]]], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [1, 59], [1, 70]]]]], [], []], "keyUp", ["subexpr", "action", ["keyUp"], ["on", "key-up"], ["loc", [null, [1, 77], [1, 105]]]]], ["loc", [null, [1, 0], [1, 107]]]], ["inline", "icon-button", [], ["class", "clear-input", "icon", "close", "action", ["subexpr", "action", ["clear"], [], ["loc", [null, [2, 54], [2, 70]]]]], ["loc", [null, [2, 0], [2, 72]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/inspector-panel", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 28
                  },
                  "end": {
                    "line": 16,
                    "column": 28
                  }
                },
                "moduleName": "portia-ui/templates/components/inspector-panel.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "colored-badge", [], ["value", ["subexpr", "@mut", [["get", "annotation.name", ["loc", [null, [15, 54], [15, 69]]]]], [], []], "color", ["subexpr", "array-get", [["get", "annotationColors", ["loc", [null, [15, 87], [15, 103]]]], ["get", "annotation.orderedIndex", ["loc", [null, [15, 104], [15, 127]]]]], [], ["loc", [null, [15, 76], [15, 128]]]]], ["loc", [null, [15, 32], [15, 130]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 24
                },
                "end": {
                  "line": 19,
                  "column": 24
                }
              },
              "moduleName": "portia-ui/templates/components/inspector-panel.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element0, 1, 1);
              morphs[1] = dom.createMorphAt(element0, 3, 3);
              return morphs;
            },
            statements: [["block", "if", [["get", "annotation.name", ["loc", [null, [14, 34], [14, 49]]]]], [], 0, null, ["loc", [null, [14, 28], [16, 35]]]], ["inline", "icon-button", [], ["icon", "add", "action", ["subexpr", "action", ["addAnnotation", ["get", "attribute.attribute", ["loc", [null, [17, 84], [17, 103]]]]], [], ["loc", [null, [17, 60], [17, 104]]]], "bubbles", false], ["loc", [null, [17, 28], [17, 120]]]]],
            locals: ["annotation"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 8
              },
              "end": {
                "line": 23,
                "column": 8
              }
            },
            "moduleName": "portia-ui/templates/components/inspector-panel.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createTextNode("\n                    ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            var el4 = dom.createTextNode("\n                        ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            var el5 = dom.createTextNode("\n                            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("span");
            dom.setAttribute(el5, "class", "value");
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n                        ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                    ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var element2 = dom.childAt(element1, [3, 1]);
            var morphs = new Array(4);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
            morphs[2] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 0, 0);
            morphs[3] = dom.createMorphAt(element2, 3, 3);
            return morphs;
          },
          statements: [["element", "action", ["changeAnnotationSource", ["get", "attribute.attribute", ["loc", [null, [5, 50], [5, 69]]]]], [], ["loc", [null, [5, 16], [5, 71]]]], ["content", "attribute.name", ["loc", [null, [6, 20], [6, 38]]]], ["content", "attribute.value", ["loc", [null, [10, 48], [10, 67]]]], ["block", "with", [["subexpr", "attribute-annotation", [["subexpr", "get", [["get", "sample.dataStructure.annotations", ["loc", [null, [12, 59], [12, 91]]]], ["subexpr", "guid", [["get", "inspectedElement", ["loc", [null, [12, 98], [12, 114]]]]], [], ["loc", [null, [12, 92], [12, 115]]]]], [], ["loc", [null, [12, 54], [12, 116]]]], ["get", "attribute.name", ["loc", [null, [12, 117], [12, 131]]]]], [], ["loc", [null, [12, 32], [12, 132]]]]], [], 0, null, ["loc", [null, [12, 24], [19, 33]]]]],
          locals: ["attribute"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/inspector-panel.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["content", "elementPath", ["loc", [null, [2, 9], [2, 24]]]], ["block", "each", [["get", "attributes", ["loc", [null, [4, 16], [4, 26]]]]], [], 0, null, ["loc", [null, [4, 8], [23, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/inspector-panel.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "text-muted empty-notice");
          var el2 = dom.createTextNode("\n        No element selected\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/inspector-panel.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "inspectedElement", ["loc", [null, [1, 6], [1, 22]]]]], [], 0, 1, ["loc", [null, [1, 0], [29, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/json-file-compare", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 11
                  },
                  "end": {
                    "line": 6,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "json-file-compare", [], ["json", ["subexpr", "@mut", [["get", "entry.json", ["loc", [null, [5, 41], [5, 51]]]]], [], []], "path", ["subexpr", "@mut", [["get", "entry.path", ["loc", [null, [5, 57], [5, 67]]]]], [], []], "update", "update", "multi", true], ["loc", [null, [5, 16], [5, 96]]]]],
              locals: ["entry"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 7,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "entries", ["loc", [null, [4, 19], [4, 26]]]]], [], 0, null, ["loc", [null, [4, 11], [6, 21]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 8
                },
                "end": {
                  "line": 9,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "comma");
              var el3 = dom.createTextNode(",");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "entry.value", ["loc", [null, [8, 18], [8, 33]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 5
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "if", [["get", "entry.conflict", ["loc", [null, [3, 14], [3, 28]]]]], [], 0, 1, ["loc", [null, [3, 8], [9, 15]]]]],
          locals: ["entry", "index"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    [");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("]\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "each", [["get", "entries", ["loc", [null, [2, 13], [2, 20]]]]], [], 0, null, ["loc", [null, [2, 5], [10, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 8
                  },
                  "end": {
                    "line": 19,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "style", "color:#2d882d;font-weight:bold");
                var el2 = dom.createTextNode("RESOLVED");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "style", "margin:5px 0px 0px 40px;background:#AEA;");
                dom.setAttribute(el1, "class", "conflict-option");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "style", "font-weight:bold;color:#2d882d;margin:5px");
                var el3 = dom.createTextNode(" [CHANGE SELECTION] ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(",\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [3]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element5);
                morphs[1] = dom.createMorphAt(element5, 3, 3);
                return morphs;
              },
              statements: [["element", "action", ["reset"], [], ["loc", [null, [15, 17], [15, 35]]]], ["content", "resolvedRepr", ["loc", [null, [17, 16], [17, 32]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 26,
                        "column": 28
                      },
                      "end": {
                        "line": 28,
                        "column": 28
                      }
                    },
                    "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "fa fa-icon fa-check green-label");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element2 = dom.childAt(fragment, [1]);
                    var morphs = new Array(1);
                    morphs[0] = dom.createElementMorph(element2);
                    return morphs;
                  },
                  statements: [["element", "action", ["conflictOptionSelected", ["get", "value.key", ["loc", [null, [27, 68], [27, 77]]]]], [], ["loc", [null, [27, 34], [27, 79]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 30,
                          "column": 32
                        },
                        "end": {
                          "line": 32,
                          "column": 32
                        }
                      },
                      "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                                    ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("span");
                      dom.setAttribute(el1, "class", "fa fa-icon fa-times red-label");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element1 = dom.childAt(fragment, [1]);
                      var morphs = new Array(1);
                      morphs[0] = dom.createElementMorph(element1);
                      return morphs;
                    },
                    statements: [["element", "action", ["conflictOptionRejected", ["get", "value.key", ["loc", [null, [31, 76], [31, 85]]]]], [], ["loc", [null, [31, 42], [31, 87]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 29,
                        "column": 28
                      },
                      "end": {
                        "line": 33,
                        "column": 28
                      }
                    },
                    "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "unless", [["get", "value.rejected", ["loc", [null, [30, 42], [30, 56]]]]], [], 0, null, ["loc", [null, [30, 32], [32, 43]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 22,
                      "column": 16
                    },
                    "end": {
                      "line": 39,
                      "column": 16
                    }
                  },
                  "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "style", "font-weight:bold");
                  var el3 = dom.createTextNode("\n                            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode(":\n");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("                        ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "style", "word-break:break-word");
                  var el3 = dom.createTextNode("\n                            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                        ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element3 = dom.childAt(fragment, [1]);
                  var element4 = dom.childAt(element3, [1]);
                  var morphs = new Array(6);
                  morphs[0] = dom.createAttrMorph(element3, 'class');
                  morphs[1] = dom.createAttrMorph(element4, 'class');
                  morphs[2] = dom.createMorphAt(element4, 1, 1);
                  morphs[3] = dom.createMorphAt(element4, 3, 3);
                  morphs[4] = dom.createMorphAt(element4, 4, 4);
                  morphs[5] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", ["conflict-option ", ["get", "value.state", ["loc", [null, [23, 50], [23, 61]]]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "value.accepted", ["loc", [null, [24, 67], [24, 81]]]], "green-label", ""], [], ["loc", [null, [24, 62], [24, 100]]]]]]], ["content", "value.label", ["loc", [null, [25, 28], [25, 43]]]], ["block", "unless", [["get", "value.accepted", ["loc", [null, [26, 38], [26, 52]]]]], [], 0, null, ["loc", [null, [26, 28], [28, 39]]]], ["block", "if", [["get", "multi", ["loc", [null, [29, 34], [29, 39]]]]], [], 1, null, ["loc", [null, [29, 28], [33, 35]]]], ["content", "value.value", ["loc", [null, [36, 28], [36, 43]]]]],
                locals: ["value"],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 19,
                    "column": 8
                  },
                  "end": {
                    "line": 41,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "style", "color:#ff3939;font-weight:bold");
                var el2 = dom.createTextNode("CONFLICT");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "style", "margin-left:40px;");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
                return morphs;
              },
              statements: [["block", "each", [["get", "conflictValues", ["loc", [null, [22, 24], [22, 38]]]]], [], 0, null, ["loc", [null, [22, 16], [39, 25]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 42,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isResolved", ["loc", [null, [13, 14], [13, 24]]]]], [], 0, 1, ["loc", [null, [13, 8], [41, 15]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 44,
                    "column": 12
                  },
                  "end": {
                    "line": 48,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "style", "margin:5px 5px 0px 20px;");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "style", "font-weight:bold");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(":");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(element0, 2, 2);
                return morphs;
              },
              statements: [["content", "entry.key", ["loc", [null, [46, 51], [46, 64]]]], ["inline", "json-file-compare", [], ["json", ["subexpr", "@mut", [["get", "entry.json", ["loc", [null, [46, 97], [46, 107]]]]], [], []], "path", ["subexpr", "@mut", [["get", "entry.path", ["loc", [null, [46, 113], [46, 123]]]]], [], []], "update", "update"], ["loc", [null, [46, 72], [46, 141]]]]],
              locals: ["entry"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["block", "each", [["get", "entries", ["loc", [null, [44, 20], [44, 27]]]]], [], 0, null, ["loc", [null, [44, 12], [48, 21]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 0
              },
              "end": {
                "line": 51,
                "column": 0
              }
            },
            "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isConflict", ["loc", [null, [12, 10], [12, 20]]]]], [], 0, 1, ["loc", [null, [12, 4], [50, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 0
              },
              "end": {
                "line": 53,
                "column": 0
              }
            },
            "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "value", ["loc", [null, [52, 4], [52, 13]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 53,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isObject", ["loc", [null, [11, 10], [11, 18]]]]], [], 0, 1, ["loc", [null, [11, 0], [53, 0]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 54,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/json-file-compare.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isArray", ["loc", [null, [1, 6], [1, 13]]]]], [], 0, 1, ["loc", [null, [1, 0], [53, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/language-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/language-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "list-item-icon", [], ["id", "detect-cookies-button", "icon", "play", "action", ["subexpr", "action", ["detectCookies", ["get", "spider", ["loc", [null, [19, 91], [19, 97]]]]], [], ["loc", [null, [19, 67], [19, 98]]]]], ["loc", [null, [19, 4], [19, 100]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/language-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("English Cookie Name");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("English Cookie value");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Arabic Cookie Name");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createTextNode("Arabic Cookie value");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 3, 3);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 3, 3);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7]), 3, 3);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", "form-control", "id", "englishCookieName", "value", ["subexpr", "mut", [["get", "spider.englishCookieName", ["loc", [null, [33, 87], [33, 111]]]]], [], ["loc", [null, [33, 82], [33, 112]]]]], ["loc", [null, [33, 12], [33, 114]]]], ["inline", "input", [], ["type", "text", "class", "form-control", "id", "englishCookieValue", "value", ["subexpr", "mut", [["get", "spider.englishCookieValue", ["loc", [null, [37, 88], [37, 113]]]]], [], ["loc", [null, [37, 83], [37, 114]]]]], ["loc", [null, [37, 12], [37, 116]]]], ["inline", "input", [], ["type", "text", "class", "form-control", "id", "arabicCookieName", "value", ["subexpr", "mut", [["get", "spider.arabicCookieName", ["loc", [null, [41, 86], [41, 109]]]]], [], ["loc", [null, [41, 81], [41, 110]]]]], ["loc", [null, [41, 12], [41, 112]]]], ["inline", "input", [], ["type", "text", "class", "form-control", "id", "arabicCookieValue", "value", ["subexpr", "mut", [["get", "spider.arabicCookieValue", ["loc", [null, [45, 87], [45, 111]]]]], [], ["loc", [null, [45, 82], [45, 112]]]]], ["loc", [null, [45, 12], [45, 114]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/language-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("URL Configs");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("English URL");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("English URL Args");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("Arabic URL");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("Arabic URL Args");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Cookies\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "dvTable");
        dom.setAttribute(el1, "style", "align-text: center;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "checkbox");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Use Language Cookies\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(fragment, [8]);
        var morphs = new Array(9);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(element1, 3, 3);
        morphs[2] = dom.createMorphAt(element1, 7, 7);
        morphs[3] = dom.createMorphAt(element2, 3, 3);
        morphs[4] = dom.createMorphAt(element2, 7, 7);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        morphs[6] = dom.createElementMorph(element3);
        morphs[7] = dom.createMorphAt(dom.childAt(element3, [1, 1]), 1, 1);
        morphs[8] = dom.createMorphAt(element3, 3, 3);
        return morphs;
      },
      statements: [["element", "action", ["save"], ["on", "change"], ["loc", [null, [2, 6], [2, 35]]]], ["inline", "input", [], ["type", "url", "class", "form-control", "id", "englishURL", "value", ["subexpr", "mut", [["get", "spider.englishURL", ["loc", [null, [5, 75], [5, 92]]]]], [], ["loc", [null, [5, 70], [5, 93]]]]], ["loc", [null, [5, 8], [5, 95]]]], ["inline", "input", [], ["type", "text", "class", "form-control", "id", "englishUrlArgs", "value", ["subexpr", "mut", [["get", "spider.englishUrlArgs", ["loc", [null, [7, 80], [7, 101]]]]], [], ["loc", [null, [7, 75], [7, 102]]]]], ["loc", [null, [7, 8], [7, 104]]]], ["inline", "input", [], ["type", "url", "class", "form-control", "id", "arabicURL", "value", ["subexpr", "mut", [["get", "spider.arabicURL", ["loc", [null, [11, 74], [11, 90]]]]], [], ["loc", [null, [11, 69], [11, 91]]]]], ["loc", [null, [11, 8], [11, 93]]]], ["inline", "input", [], ["type", "text", "class", "form-control", "id", "arabicUrlArgs", "value", ["subexpr", "mut", [["get", "spider.arabicUrlArgs", ["loc", [null, [13, 79], [13, 99]]]]], [], ["loc", [null, [13, 74], [13, 100]]]]], ["loc", [null, [13, 8], [13, 102]]]], ["block", "tooltip-container", [], ["tooltipFor", "detect-cookies-button", "text", "Detect Cookies", "tooltipContainer", "body"], 0, null, ["loc", [null, [18, 0], [20, 22]]]], ["element", "action", ["save"], ["on", "change"], ["loc", [null, [24, 6], [24, 35]]]], ["inline", "input", [], ["type", "checkbox", "name", "useLanguageCookies", "checked", ["subexpr", "mut", [["get", "spider.useLanguageCookies", ["loc", [null, [27, 75], [27, 100]]]]], [], ["loc", [null, [27, 70], [27, 101]]]]], ["loc", [null, [27, 12], [27, 103]]]], ["block", "if", [["get", "spider.useLanguageCookies", ["loc", [null, [30, 10], [30, 35]]]]], [], 1, null, ["loc", [null, [30, 4], [47, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/link-crawling-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/link-crawling-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "text-muted");
          var el2 = dom.createTextNode("Following all encountered links within the same domains");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/link-crawling-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "text-muted");
            var el2 = dom.createTextNode("Not following any links");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 4
                },
                "end": {
                  "line": 12,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/link-crawling-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("Follow links that match these patterns");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("Exclude links that match these patterns");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              return morphs;
            },
            statements: [["inline", "regex-pattern-list", [], ["list", ["subexpr", "@mut", [["get", "spider.followPatterns", ["loc", [null, [9, 34], [9, 55]]]]], [], []], "onChange", ["subexpr", "action", ["save"], [], ["loc", [null, [9, 65], [9, 80]]]]], ["loc", [null, [9, 8], [9, 82]]]], ["inline", "regex-pattern-list", [], ["list", ["subexpr", "@mut", [["get", "spider.excludePatterns", ["loc", [null, [11, 34], [11, 56]]]]], [], []], "onChange", ["subexpr", "action", ["save"], [], ["loc", [null, [11, 66], [11, 81]]]]], ["loc", [null, [11, 8], [11, 83]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/link-crawling-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "spider.linksToFollow", ["loc", [null, [7, 18], [7, 38]]]], "patterns"], [], ["loc", [null, [7, 14], [7, 50]]]]], [], 0, null, ["loc", [null, [7, 4], [12, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/link-crawling-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "spider.linksToFollow", ["loc", [null, [5, 18], [5, 38]]]], "none"], [], ["loc", [null, [5, 14], [5, 46]]]]], [], 0, 1, ["loc", [null, [5, 4], [12, 4]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/link-crawling-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Crawling rules");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "checkbox");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Respect the \"nofollow\" attribute\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["save"], ["on", "change"], ["loc", [null, [2, 6], [2, 35]]]], ["block", "if", [["subexpr", "eq", [["get", "spider.linksToFollow", ["loc", [null, [3, 14], [3, 34]]]], "all"], [], ["loc", [null, [3, 10], [3, 41]]]]], [], 0, 1, ["loc", [null, [3, 4], [12, 11]]]], ["inline", "input", [], ["type", "checkbox", "name", "respectNoFollow", "checked", ["subexpr", "mut", [["get", "spider.respectNoFollow", ["loc", [null, [16, 72], [16, 94]]]]], [], ["loc", [null, [16, 67], [16, 95]]]], "disabled", ["subexpr", "eq", [["get", "spider.linksToFollow", ["loc", [null, [16, 109], [16, 129]]]], "none"], [], ["loc", [null, [16, 105], [16, 137]]]]], ["loc", [null, [16, 12], [16, 139]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/list-item-add-annotation-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-add-annotation-menu.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            return morphs;
          },
          statements: [["inline", "list-item-icon", [], ["class", "icon", "icon", "add"], ["loc", [null, [3, 8], [3, 50]]]], ["content", "value", ["loc", [null, [3, 50], [3, 59]]]]],
          locals: ["value"],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-add-annotation-menu.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              return morphs;
            },
            statements: [["inline", "list-item-icon", [], ["class", "icon", "icon", "add"], ["loc", [null, [7, 12], [7, 54]]]], ["content", "value", ["loc", [null, [7, 54], [7, 63]]]]],
            locals: ["value"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-add-annotation-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "options.item", [], ["value", "Add nested item", "action", ["subexpr", "chain-actions", [["subexpr", "action", ["addNestedItem"], [], ["loc", [null, [6, 70], [6, 94]]]], ["get", "options.closeMenu", ["loc", [null, [6, 95], [6, 112]]]]], [], ["loc", [null, [6, 55], [6, 113]]]]], 0, null, ["loc", [null, [6, 8], [8, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-add-annotation-menu.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "options.item", [], ["value", "Add annotation", "action", ["subexpr", "chain-actions", [["subexpr", "action", ["addAnnotation"], [], ["loc", [null, [2, 65], [2, 89]]]], ["get", "options.closeMenu", ["loc", [null, [2, 90], [2, 107]]]]], [], ["loc", [null, [2, 50], [2, 108]]]]], 0, null, ["loc", [null, [2, 4], [4, 21]]]], ["block", "if", [["get", "allowNesting", ["loc", [null, [5, 10], [5, 22]]]]], [], 1, null, ["loc", [null, [5, 4], [9, 11]]]]],
        locals: ["options"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-add-annotation-menu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "list-item-icon-menu", [], ["icon", "add-dropdown"], 0, null, ["loc", [null, [1, 0], [10, 24]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/list-item-annotation-field", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-annotation-field.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Type to change the field\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-annotation-field.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        Select an existing field\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 4
                  },
                  "end": {
                    "line": 8,
                    "column": 4
                  }
                },
                "moduleName": "portia-ui/templates/components/list-item-annotation-field.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n    ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                return morphs;
              },
              statements: [["inline", "list-item-icon", [], ["class", "icon", "icon", ["subexpr", "@mut", [["get", "options.choice.type", ["loc", [null, [7, 43], [7, 62]]]]], [], []]], ["loc", [null, [7, 8], [7, 64]]]], ["content", "options.choice.name", ["loc", [null, [7, 64], [7, 87]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-annotation-field.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [6, 18], [6, 33]]]], "choice"], [], ["loc", [null, [6, 14], [6, 43]]]]], [], 0, null, ["loc", [null, [6, 4], [8, 4]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-annotation-field.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [4, 18], [4, 33]]]], "choices-header"], [], ["loc", [null, [4, 14], [4, 51]]]]], [], 0, 1, ["loc", [null, [4, 4], [8, 4]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-annotation-field.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [2, 14], [2, 29]]]], "change-header"], [], ["loc", [null, [2, 10], [2, 46]]]]], [], 0, 1, ["loc", [null, [2, 4], [8, 11]]]]],
        locals: ["options"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-annotation-field.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "list-item-relation-manager", [], ["value", ["subexpr", "mut", [["get", "annotation.field", ["loc", [null, [1, 41], [1, 57]]]]], [], ["loc", [null, [1, 36], [1, 58]]]], "choices", ["subexpr", "@mut", [["get", "annotation.field.schema.fields", ["loc", [null, [1, 67], [1, 97]]]]], [], []], "selecting", ["subexpr", "mut", [["get", "selecting", ["loc", [null, [1, 113], [1, 122]]]]], [], ["loc", [null, [1, 108], [1, 123]]]], "onChange", ["subexpr", "action", ["changeField"], [], ["loc", [null, [1, 133], [1, 155]]]], "validate", ["subexpr", "action", ["validateFieldName"], [], ["loc", [null, [1, 165], [1, 193]]]], "create", ["subexpr", "action", ["addField"], [], ["loc", [null, [1, 201], [1, 220]]]]], 0, null, ["loc", [null, [1, 0], [9, 31]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/list-item-badge", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 37
            },
            "end": {
              "line": 3,
              "column": 62
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-badge.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [3, 53], [3, 62]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 62
            },
            "end": {
              "line": 3,
              "column": 79
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-badge.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "value", ["loc", [null, [3, 70], [3, 79]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-badge.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "list-item-badge");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "badge");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "badge-centered");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'style');
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "style", ["get", "badgeStyle", ["loc", [null, [2, 32], [2, 42]]]]], ["block", "if", [["get", "hasBlock", ["loc", [null, [3, 43], [3, 51]]]]], [], 0, 1, ["loc", [null, [3, 37], [3, 86]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/list-item-combo", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-combo.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "yield", [["get", "options", ["loc", [null, [4, 20], [4, 27]]]]], [], ["loc", [null, [4, 12], [4, 29]]]]],
            locals: ["options"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-combo.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "combo-box", [], ["choices", ["subexpr", "@mut", [["get", "choices", ["loc", [null, [3, 29], [3, 36]]]]], [], []], "value", ["subexpr", "mut", [["get", "value", ["loc", [null, [3, 48], [3, 53]]]]], [], ["loc", [null, [3, 43], [3, 54]]]], "valueAttribute", ["subexpr", "@mut", [["get", "valueAttribute", ["loc", [null, [3, 70], [3, 84]]]]], [], []], "open", ["subexpr", "mut", [["get", "selecting", ["loc", [null, [3, 95], [3, 104]]]]], [], ["loc", [null, [3, 90], [3, 105]]]], "orderItemsForSearch", ["subexpr", "@mut", [["get", "orderItemsForSearch", ["loc", [null, [3, 126], [3, 145]]]]], [], []], "valuesEqual", ["subexpr", "@mut", [["get", "valuesEqual", ["loc", [null, [3, 158], [3, 169]]]]], [], []], "onChange", ["subexpr", "@mut", [["get", "onChange", ["loc", [null, [3, 179], [3, 187]]]]], [], []], "autoSelect", ["subexpr", "@mut", [["get", "autoSelect", ["loc", [null, [3, 199], [3, 209]]]]], [], []], "inputClass", ["subexpr", "concat", ["input-list-item ", ["get", "inputClass", ["loc", [null, [3, 248], [3, 258]]]]], [], ["loc", [null, [3, 221], [3, 259]]]], "menuClass", ["subexpr", "@mut", [["get", "menuClass", ["loc", [null, [3, 270], [3, 279]]]]], [], []], "menuAlign", ["subexpr", "@mut", [["get", "menuAlign", ["loc", [null, [3, 290], [3, 299]]]]], [], []], "menuContainer", ["subexpr", "@mut", [["get", "menuContainer", ["loc", [null, [3, 314], [3, 327]]]]], [], []]], 0, null, ["loc", [null, [3, 8], [5, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-combo.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "combo-box", [], ["choices", ["subexpr", "@mut", [["get", "choices", ["loc", [null, [7, 28], [7, 35]]]]], [], []], "value", ["subexpr", "mut", [["get", "value", ["loc", [null, [7, 47], [7, 52]]]]], [], ["loc", [null, [7, 42], [7, 53]]]], "valueAttribute", ["subexpr", "@mut", [["get", "valueAttribute", ["loc", [null, [7, 69], [7, 83]]]]], [], []], "open", ["subexpr", "mut", [["get", "selecting", ["loc", [null, [7, 94], [7, 103]]]]], [], ["loc", [null, [7, 89], [7, 104]]]], "orderItemsForSearch", ["subexpr", "@mut", [["get", "orderItemsForSearch", ["loc", [null, [7, 125], [7, 144]]]]], [], []], "valuesEqual", ["subexpr", "@mut", [["get", "valuesEqual", ["loc", [null, [7, 157], [7, 168]]]]], [], []], "onChange", ["subexpr", "@mut", [["get", "onChange", ["loc", [null, [7, 178], [7, 186]]]]], [], []], "autoSelect", ["subexpr", "@mut", [["get", "autoSelect", ["loc", [null, [7, 198], [7, 208]]]]], [], []], "inputClass", ["subexpr", "concat", ["input-list-item ", ["get", "inputClass", ["loc", [null, [7, 247], [7, 257]]]]], [], ["loc", [null, [7, 220], [7, 258]]]], "menuClass", ["subexpr", "@mut", [["get", "menuClass", ["loc", [null, [7, 269], [7, 278]]]]], [], []], "menuAlign", ["subexpr", "@mut", [["get", "menuAlign", ["loc", [null, [7, 289], [7, 298]]]]], [], []], "menuContainer", ["subexpr", "@mut", [["get", "menuContainer", ["loc", [null, [7, 313], [7, 326]]]]], [], []]], ["loc", [null, [7, 8], [7, 328]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-combo.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [2, 10], [2, 18]]]]], [], 0, 1, ["loc", [null, [2, 4], [8, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 13,
                "column": 8
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-combo.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "get", [["get", "value", ["loc", [null, [12, 18], [12, 23]]]], ["get", "valueAttribute", ["loc", [null, [12, 24], [12, 38]]]]], [], ["loc", [null, [12, 12], [12, 40]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 8
              },
              "end": {
                "line": 15,
                "column": 8
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-combo.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "value", ["loc", [null, [14, 12], [14, 21]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-combo.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "caret");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["block", "if", [["get", "valueAttribute", ["loc", [null, [11, 14], [11, 28]]]]], [], 0, 1, ["loc", [null, [11, 8], [15, 15]]]], ["element", "action", ["startSelecting"], [], ["loc", [null, [17, 7], [17, 34]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-combo.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "selecting", ["loc", [null, [1, 6], [1, 15]]]]], [], 0, 1, ["loc", [null, [1, 0], [20, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/list-item-country", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-country.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Select Country\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-country.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "option.label", ["loc", [null, [7, 12], [7, 28]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-country.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "select.item", [], ["value", ["subexpr", "@mut", [["get", "option", ["loc", [null, [6, 29], [6, 35]]]]], [], []], "action", ["subexpr", "action", [["get", "select.setValueAndClose", ["loc", [null, [6, 51], [6, 74]]]], ["get", "option", ["loc", [null, [6, 75], [6, 81]]]]], [], ["loc", [null, [6, 43], [6, 82]]]]], 0, null, ["loc", [null, [6, 8], [8, 24]]]]],
          locals: ["option"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-country.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "select.header", [], [], 0, null, ["loc", [null, [2, 4], [4, 22]]]], ["block", "each", [["get", "countryCodeOptions", ["loc", [null, [5, 12], [5, 30]]]]], [], 1, null, ["loc", [null, [5, 4], [9, 13]]]]],
        locals: ["select"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-country.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "list-item-selectable", [], ["value", ["subexpr", "mut", [["get", "countryCode", ["loc", [null, [1, 35], [1, 46]]]]], [], ["loc", [null, [1, 30], [1, 47]]]], "valueAttribute", "label", "onChange", ["subexpr", "action", ["saveSpider"], [], ["loc", [null, [1, 80], [1, 101]]]], "menuContainer", "body", "menuAlign", "left"], 0, null, ["loc", [null, [1, 0], [10, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/list-item-currency", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-currency.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Currency configurations\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-currency.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "option.label", ["loc", [null, [7, 12], [7, 28]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-currency.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "select.item", [], ["value", ["subexpr", "@mut", [["get", "option", ["loc", [null, [6, 29], [6, 35]]]]], [], []], "action", ["subexpr", "action", [["get", "select.setValueAndClose", ["loc", [null, [6, 51], [6, 74]]]], ["get", "option", ["loc", [null, [6, 75], [6, 81]]]]], [], ["loc", [null, [6, 43], [6, 82]]]]], 0, null, ["loc", [null, [6, 8], [8, 24]]]]],
          locals: ["option"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-currency.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "select.header", [], [], 0, null, ["loc", [null, [2, 4], [4, 22]]]], ["block", "each", [["get", "currencyConfigOptions", ["loc", [null, [5, 12], [5, 33]]]]], [], 1, null, ["loc", [null, [5, 4], [9, 13]]]]],
        locals: ["select"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-currency.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "list-item-selectable", [], ["value", ["subexpr", "mut", [["get", "useCurrencyConfig", ["loc", [null, [1, 35], [1, 52]]]]], [], ["loc", [null, [1, 30], [1, 53]]]], "valueAttribute", "label", "onChange", ["subexpr", "action", ["saveSpider"], [], ["loc", [null, [1, 86], [1, 107]]]], "menuContainer", "body", "menuAlign", "left"], 0, null, ["loc", [null, [1, 0], [10, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/list-item-editable", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-editable.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "buffered-input", [], ["class", "input-list-item", "value", ["subexpr", "mut", [["get", "value", ["loc", [null, [2, 56], [2, 61]]]]], [], ["loc", [null, [2, 51], [2, 62]]]], "focused", ["subexpr", "@mut", [["get", "editing", ["loc", [null, [2, 71], [2, 78]]]]], [], []], "autoSelect", true, "spellcheck", ["subexpr", "@mut", [["get", "spellcheck", ["loc", [null, [2, 106], [2, 116]]]]], [], []], "onChange", ["subexpr", "@mut", [["get", "onChange", ["loc", [null, [2, 126], [2, 134]]]]], [], []], "validate", ["subexpr", "@mut", [["get", "validate", ["loc", [null, [2, 144], [2, 152]]]]], [], []], "autofocus", "autofocus"], ["loc", [null, [2, 4], [2, 176]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-editable.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["content", "value", ["loc", [null, [4, 10], [4, 19]]]], ["inline", "icon-button", [], ["icon", "edit", "action", ["subexpr", "action", ["startEditing"], [], ["loc", [null, [5, 37], [5, 60]]]], "bubbles", false], ["loc", [null, [5, 4], [5, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-editable.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "editing", ["loc", [null, [1, 6], [1, 13]]]]], [], 0, 1, ["loc", [null, [1, 0], [6, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/list-item-field-type", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-field-type.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "yield", ["loc", [null, [4, 12], [4, 21]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-field-type.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "select.header", [], [], 0, null, ["loc", [null, [3, 8], [5, 26]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 8
                },
                "end": {
                  "line": 10,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-field-type.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              return morphs;
            },
            statements: [["inline", "list-item-icon", [], ["class", "icon", "icon", ["subexpr", "@mut", [["get", "type", ["loc", [null, [9, 47], [9, 51]]]]], [], []]], ["loc", [null, [9, 12], [9, 53]]]], ["content", "type", ["loc", [null, [9, 53], [9, 61]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-field-type.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "select.item", [], ["value", ["subexpr", "@mut", [["get", "type", ["loc", [null, [8, 29], [8, 33]]]]], [], []], "action", ["subexpr", "action", [["get", "select.setValueAndClose", ["loc", [null, [8, 49], [8, 72]]]], ["get", "type", ["loc", [null, [8, 73], [8, 77]]]]], [], ["loc", [null, [8, 41], [8, 78]]]]], 0, null, ["loc", [null, [8, 8], [10, 24]]]]],
          locals: ["type"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-field-type.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [2, 10], [2, 18]]]]], [], 0, null, ["loc", [null, [2, 4], [6, 11]]]], ["block", "each", [["get", "types", ["loc", [null, [7, 12], [7, 17]]]]], [], 1, null, ["loc", [null, [7, 4], [11, 13]]]]],
        locals: ["select"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-field-type.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "list-item-selectable", [], ["value", ["subexpr", "mut", [["get", "field.type", ["loc", [null, [1, 35], [1, 45]]]]], [], ["loc", [null, [1, 30], [1, 46]]]], "onChange", ["subexpr", "action", ["saveField"], [], ["loc", [null, [1, 56], [1, 76]]]], "menuContainer", "body", "menuAlign", "right"], 0, null, ["loc", [null, [1, 0], [12, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/list-item-icon-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-icon-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "list-item-icon", [], ["icon", ["subexpr", "@mut", [["get", "icon", ["loc", [null, [3, 30], [3, 34]]]]], [], []], "action", ["subexpr", "@mut", [["get", "options.toggleMenu", ["loc", [null, [3, 42], [3, 60]]]]], [], []], "tabindex", -1], ["loc", [null, [3, 8], [3, 74]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-icon-menu.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "yield", [["get", "options", ["loc", [null, [5, 16], [5, 23]]]]], [], ["loc", [null, [5, 8], [5, 25]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-icon-menu.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [4, 18], [4, 33]]]], "menu"], [], ["loc", [null, [4, 14], [4, 41]]]]], [], 0, null, ["loc", [null, [4, 4], [6, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-icon-menu.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [2, 14], [2, 29]]]], "widget"], [], ["loc", [null, [2, 10], [2, 39]]]]], [], 0, 1, ["loc", [null, [2, 4], [6, 11]]]]],
        locals: ["options"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-icon-menu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "dropdown-widget", [], ["class", "list-item-icon", "menuContainer", "body", "menuAlign", "right"], 0, null, ["loc", [null, [1, 0], [7, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/list-item-icon", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["empty-body"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-icon.hbs"
      },
      isEmpty: true,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/list-item-item-schema", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-item-schema.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Type to change the data format\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-item-schema.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        Select an existing data format\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 4
                  },
                  "end": {
                    "line": 8,
                    "column": 4
                  }
                },
                "moduleName": "portia-ui/templates/components/list-item-item-schema.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n    ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                return morphs;
              },
              statements: [["inline", "list-item-icon", [], ["class", "icon", "icon", "schema"], ["loc", [null, [7, 8], [7, 53]]]], ["content", "options.choice.name", ["loc", [null, [7, 53], [7, 76]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-item-schema.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [6, 18], [6, 33]]]], "choice"], [], ["loc", [null, [6, 14], [6, 43]]]]], [], 0, null, ["loc", [null, [6, 4], [8, 4]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-item-schema.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [4, 18], [4, 33]]]], "choices-header"], [], ["loc", [null, [4, 14], [4, 51]]]]], [], 0, 1, ["loc", [null, [4, 4], [8, 4]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-item-schema.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [2, 14], [2, 29]]]], "change-header"], [], ["loc", [null, [2, 10], [2, 46]]]]], [], 0, 1, ["loc", [null, [2, 4], [8, 11]]]]],
        locals: ["options"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-item-schema.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "list-item-relation-manager", [], ["value", ["subexpr", "mut", [["get", "item.schema", ["loc", [null, [1, 41], [1, 52]]]]], [], ["loc", [null, [1, 36], [1, 53]]]], "choices", ["subexpr", "@mut", [["get", "item.ownerSample.spider.project.schemas", ["loc", [null, [1, 62], [1, 101]]]]], [], []], "selecting", ["subexpr", "mut", [["get", "selecting", ["loc", [null, [1, 117], [1, 126]]]]], [], ["loc", [null, [1, 112], [1, 127]]]], "onChange", ["subexpr", "action", ["changeSchema"], [], ["loc", [null, [1, 137], [1, 160]]]], "create", ["subexpr", "action", ["addSchema"], [], ["loc", [null, [1, 168], [1, 188]]]]], 0, null, ["loc", [null, [1, 0], [9, 31]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/list-item-language", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-language.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Language configurations\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-language.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "option.label", ["loc", [null, [7, 12], [7, 28]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-language.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "select.item", [], ["value", ["subexpr", "@mut", [["get", "option", ["loc", [null, [6, 29], [6, 35]]]]], [], []], "action", ["subexpr", "action", [["get", "select.setValueAndClose", ["loc", [null, [6, 51], [6, 74]]]], ["get", "option", ["loc", [null, [6, 75], [6, 81]]]]], [], ["loc", [null, [6, 43], [6, 82]]]]], 0, null, ["loc", [null, [6, 8], [8, 24]]]]],
          locals: ["option"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-language.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "select.header", [], [], 0, null, ["loc", [null, [2, 4], [4, 22]]]], ["block", "each", [["get", "languageConfigOptions", ["loc", [null, [5, 12], [5, 33]]]]], [], 1, null, ["loc", [null, [5, 4], [9, 13]]]]],
        locals: ["select"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-language.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "list-item-selectable", [], ["value", ["subexpr", "mut", [["get", "useLanguageConfig", ["loc", [null, [1, 35], [1, 52]]]]], [], ["loc", [null, [1, 30], [1, 53]]]], "valueAttribute", "label", "onChange", ["subexpr", "action", ["saveSpider"], [], ["loc", [null, [1, 86], [1, 107]]]], "menuContainer", "body", "menuAlign", "left"], 0, null, ["loc", [null, [1, 0], [10, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/list-item-link-crawling", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-link-crawling.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Change how links are crawled\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-link-crawling.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "option.label", ["loc", [null, [7, 12], [7, 28]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-link-crawling.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "select.item", [], ["value", ["subexpr", "@mut", [["get", "option", ["loc", [null, [6, 29], [6, 35]]]]], [], []], "action", ["subexpr", "action", [["get", "select.setValueAndClose", ["loc", [null, [6, 51], [6, 74]]]], ["get", "option", ["loc", [null, [6, 75], [6, 81]]]]], [], ["loc", [null, [6, 43], [6, 82]]]]], 0, null, ["loc", [null, [6, 8], [8, 24]]]]],
          locals: ["option"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-link-crawling.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "select.header", [], [], 0, null, ["loc", [null, [2, 4], [4, 22]]]], ["block", "each", [["get", "followPatternOptions", ["loc", [null, [5, 12], [5, 32]]]]], [], 1, null, ["loc", [null, [5, 4], [9, 13]]]]],
        locals: ["select"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-link-crawling.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "list-item-selectable", [], ["value", ["subexpr", "mut", [["get", "linksToFollow", ["loc", [null, [1, 35], [1, 48]]]]], [], ["loc", [null, [1, 30], [1, 49]]]], "valueAttribute", "label", "onChange", ["subexpr", "action", ["saveSpider"], [], ["loc", [null, [1, 82], [1, 103]]]], "menuContainer", "body", "menuAlign", "left"], 0, null, ["loc", [null, [1, 0], [10, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/list-item-relation-manager", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-relation-manager.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "change-header"], ["loc", [null, [3, 16], [3, 46]]]]], [], ["loc", [null, [3, 8], [3, 48]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-relation-manager.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("Rename to “");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("”\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "list-item-icon", [], ["class", "icon", "icon", "edit"], ["loc", [null, [6, 8], [6, 51]]]], ["content", "combo.query", ["loc", [null, [6, 62], [6, 77]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-relation-manager.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("Add “");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("”\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "list-item-icon", [], ["class", "icon", "icon", "add"], ["loc", [null, [9, 8], [9, 50]]]], ["content", "combo.query", ["loc", [null, [9, 55], [9, 70]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 4
              },
              "end": {
                "line": 16,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-relation-manager.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "choices-header"], ["loc", [null, [15, 16], [15, 47]]]]], [], ["loc", [null, [15, 8], [15, 49]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 8
                },
                "end": {
                  "line": 20,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-relation-manager.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "choice", "choice", ["get", "choice", ["loc", [null, [19, 50], [19, 56]]]]], ["loc", [null, [19, 20], [19, 57]]]]], [], ["loc", [null, [19, 12], [19, 59]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 4
              },
              "end": {
                "line": 21,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-relation-manager.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "combo.item", [], ["value", ["subexpr", "@mut", [["get", "choice", ["loc", [null, [18, 28], [18, 34]]]]], [], []], "action", ["subexpr", "action", [["get", "combo.setValueAndClose", ["loc", [null, [18, 50], [18, 72]]]], ["get", "choice", ["loc", [null, [18, 73], [18, 79]]]]], [], ["loc", [null, [18, 42], [18, 80]]]]], 0, null, ["loc", [null, [18, 8], [20, 23]]]]],
          locals: ["choice"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-relation-manager.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "combo.header", [], [], 0, null, ["loc", [null, [2, 4], [4, 21]]]], ["block", "combo.item", [], ["value", ["subexpr", "hash", [], ["special", "rename", "name", ["get", "combo.query", ["loc", [null, [5, 52], [5, 63]]]], "onMenuClosed", ["subexpr", "action", ["rename", ["get", "combo.query", ["loc", [null, [5, 94], [5, 105]]]]], [], ["loc", [null, [5, 77], [5, 106]]]]], ["loc", [null, [5, 24], [5, 107]]]], "disabled", ["subexpr", "not", [["get", "combo.menu.active.special", ["loc", [null, [5, 122], [5, 147]]]]], [], ["loc", [null, [5, 117], [5, 148]]]], "action", ["subexpr", "chain-actions", [["subexpr", "action", ["rename", ["get", "combo.query", ["loc", [null, [5, 188], [5, 199]]]]], [], ["loc", [null, [5, 171], [5, 200]]]], ["subexpr", "action", [["get", "combo.closeMenu", ["loc", [null, [5, 209], [5, 224]]]], "escape"], [], ["loc", [null, [5, 201], [5, 234]]]]], [], ["loc", [null, [5, 156], [5, 235]]]]], 1, null, ["loc", [null, [5, 4], [7, 19]]]], ["block", "combo.item", [], ["value", ["subexpr", "hash", [], ["special", "add", "name", ["get", "combo.query", ["loc", [null, [8, 49], [8, 60]]]], "onMenuClosed", ["subexpr", "action", ["add", ["get", "combo.query", ["loc", [null, [8, 88], [8, 99]]]]], [], ["loc", [null, [8, 74], [8, 100]]]]], ["loc", [null, [8, 24], [8, 101]]]], "disabled", ["subexpr", "not", [["get", "combo.menu.active.special", ["loc", [null, [8, 116], [8, 141]]]]], [], ["loc", [null, [8, 111], [8, 142]]]], "action", ["subexpr", "chain-actions", [["subexpr", "action", ["add", ["get", "combo.query", ["loc", [null, [8, 179], [8, 190]]]]], [], ["loc", [null, [8, 165], [8, 191]]]], ["subexpr", "action", [["get", "combo.closeMenu", ["loc", [null, [8, 200], [8, 215]]]], "escape"], [], ["loc", [null, [8, 192], [8, 225]]]]], [], ["loc", [null, [8, 150], [8, 226]]]]], 2, null, ["loc", [null, [8, 4], [10, 19]]]], ["content", "combo.divider", ["loc", [null, [12, 4], [12, 21]]]], ["block", "combo.header", [], [], 3, null, ["loc", [null, [14, 4], [16, 21]]]], ["block", "each", [["get", "sortedChoices", ["loc", [null, [17, 12], [17, 25]]]]], [], 4, null, ["loc", [null, [17, 4], [21, 13]]]]],
        locals: ["combo"],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-relation-manager.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "list-item-combo", [], ["value", ["subexpr", "mut", [["get", "value.content", ["loc", [null, [1, 30], [1, 43]]]]], [], ["loc", [null, [1, 25], [1, 44]]]], "valueAttribute", "name", "selecting", ["subexpr", "mut", [["get", "selecting", ["loc", [null, [1, 82], [1, 91]]]]], [], ["loc", [null, [1, 77], [1, 92]]]], "orderItemsForSearch", ["subexpr", "@mut", [["get", "orderItemsForSearch", ["loc", [null, [1, 113], [1, 132]]]]], [], []], "valuesEqual", ["subexpr", "@mut", [["get", "valuesEqual", ["loc", [null, [1, 145], [1, 156]]]]], [], []], "onChange", ["subexpr", "@mut", [["get", "onChange", ["loc", [null, [1, 166], [1, 174]]]]], [], []], "autoSelect", true, "menuContainer", "body"], 0, null, ["loc", [null, [1, 0], [22, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/list-item-schema-manager", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-schema-manager.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "change-header"], ["loc", [null, [3, 16], [3, 46]]]]], [], ["loc", [null, [3, 8], [3, 48]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-schema-manager.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "choices-header"], ["loc", [null, [10, 16], [10, 47]]]]], [], ["loc", [null, [10, 8], [10, 49]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 8
                },
                "end": {
                  "line": 15,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-schema-manager.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "choice", "choice", ["get", "choice", ["loc", [null, [14, 50], [14, 56]]]]], ["loc", [null, [14, 20], [14, 57]]]]], [], ["loc", [null, [14, 12], [14, 59]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 16,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-schema-manager.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "combo.item", [], ["value", ["subexpr", "@mut", [["get", "choice", ["loc", [null, [13, 28], [13, 34]]]]], [], []], "action", ["subexpr", "action", [["get", "combo.setValueAndClose", ["loc", [null, [13, 50], [13, 72]]]], ["get", "choice", ["loc", [null, [13, 73], [13, 79]]]]], [], ["loc", [null, [13, 42], [13, 80]]]]], 0, null, ["loc", [null, [13, 8], [15, 23]]]]],
          locals: ["choice"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-schema-manager.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "combo.header", [], [], 0, null, ["loc", [null, [2, 4], [4, 21]]]], ["content", "combo.divider", ["loc", [null, [7, 4], [7, 21]]]], ["block", "combo.header", [], [], 1, null, ["loc", [null, [9, 4], [11, 21]]]], ["block", "each", [["get", "sortedChoices", ["loc", [null, [12, 12], [12, 25]]]]], [], 2, null, ["loc", [null, [12, 4], [16, 13]]]]],
        locals: ["combo"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-schema-manager.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "list-item-combo", [], ["value", ["subexpr", "mut", [["get", "value.content", ["loc", [null, [1, 30], [1, 43]]]]], [], ["loc", [null, [1, 25], [1, 44]]]], "valueAttribute", "name", "selecting", ["subexpr", "mut", [["get", "selecting", ["loc", [null, [1, 82], [1, 91]]]]], [], ["loc", [null, [1, 77], [1, 92]]]], "orderItemsForSearch", ["subexpr", "@mut", [["get", "orderItemsForSearch", ["loc", [null, [1, 113], [1, 132]]]]], [], []], "valuesEqual", ["subexpr", "@mut", [["get", "valuesEqual", ["loc", [null, [1, 145], [1, 156]]]]], [], []], "onChange", ["subexpr", "@mut", [["get", "onChange", ["loc", [null, [1, 166], [1, 174]]]]], [], []], "autoSelect", true, "menuContainer", "body"], 0, null, ["loc", [null, [1, 0], [17, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/list-item-selectable", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-selectable.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "yield", [["get", "options", ["loc", [null, [4, 20], [4, 27]]]]], [], ["loc", [null, [4, 12], [4, 29]]]]],
            locals: ["options"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-selectable.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "select-box", [], ["choices", ["subexpr", "@mut", [["get", "choices", ["loc", [null, [3, 30], [3, 37]]]]], [], []], "value", ["subexpr", "mut", [["get", "value", ["loc", [null, [3, 49], [3, 54]]]]], [], ["loc", [null, [3, 44], [3, 55]]]], "valueAttribute", ["subexpr", "@mut", [["get", "valueAttribute", ["loc", [null, [3, 71], [3, 85]]]]], [], []], "open", ["subexpr", "mut", [["get", "selecting", ["loc", [null, [3, 96], [3, 105]]]]], [], ["loc", [null, [3, 91], [3, 106]]]], "onChange", ["subexpr", "@mut", [["get", "onChange", ["loc", [null, [3, 116], [3, 124]]]]], [], []], "buttonClass", ["subexpr", "concat", ["input-list-item ", ["get", "buttonClass", ["loc", [null, [3, 164], [3, 175]]]]], [], ["loc", [null, [3, 137], [3, 176]]]], "menuClass", ["subexpr", "@mut", [["get", "menuClass", ["loc", [null, [3, 187], [3, 196]]]]], [], []], "menuAlign", ["subexpr", "@mut", [["get", "menuAlign", ["loc", [null, [3, 207], [3, 216]]]]], [], []], "menuContainer", ["subexpr", "@mut", [["get", "menuContainer", ["loc", [null, [3, 231], [3, 244]]]]], [], []]], 0, null, ["loc", [null, [3, 8], [5, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-selectable.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "select-box", [], ["choices", ["subexpr", "@mut", [["get", "choices", ["loc", [null, [7, 29], [7, 36]]]]], [], []], "value", ["subexpr", "mut", [["get", "value", ["loc", [null, [7, 48], [7, 53]]]]], [], ["loc", [null, [7, 43], [7, 54]]]], "valueAttribute", ["subexpr", "@mut", [["get", "valueAttribute", ["loc", [null, [7, 70], [7, 84]]]]], [], []], "open", ["subexpr", "mut", [["get", "selecting", ["loc", [null, [7, 95], [7, 104]]]]], [], ["loc", [null, [7, 90], [7, 105]]]], "onChange", ["subexpr", "@mut", [["get", "onChange", ["loc", [null, [7, 115], [7, 123]]]]], [], []], "buttonClass", ["subexpr", "concat", ["input-list-item ", ["get", "buttonClass", ["loc", [null, [7, 163], [7, 174]]]]], [], ["loc", [null, [7, 136], [7, 175]]]], "menuClass", ["subexpr", "@mut", [["get", "menuClass", ["loc", [null, [7, 186], [7, 195]]]]], [], []], "menuAlign", ["subexpr", "@mut", [["get", "menuAlign", ["loc", [null, [7, 206], [7, 215]]]]], [], []], "menuContainer", ["subexpr", "@mut", [["get", "menuContainer", ["loc", [null, [7, 230], [7, 243]]]]], [], []]], ["loc", [null, [7, 8], [7, 245]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-selectable.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [2, 10], [2, 18]]]]], [], 0, 1, ["loc", [null, [2, 4], [8, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 13,
                "column": 8
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-selectable.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "get", [["get", "value", ["loc", [null, [12, 18], [12, 23]]]], ["get", "valueAttribute", ["loc", [null, [12, 24], [12, 38]]]]], [], ["loc", [null, [12, 12], [12, 40]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 8
              },
              "end": {
                "line": 15,
                "column": 8
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-selectable.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "value", ["loc", [null, [14, 12], [14, 21]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-selectable.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "caret");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["block", "if", [["get", "valueAttribute", ["loc", [null, [11, 14], [11, 28]]]]], [], 0, 1, ["loc", [null, [11, 8], [15, 15]]]], ["element", "action", ["startSelecting"], [], ["loc", [null, [17, 7], [17, 34]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-selectable.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "selecting", ["loc", [null, [1, 6], [1, 15]]]]], [], 0, 1, ["loc", [null, [1, 0], [20, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/list-item-spider-train", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-spider-train.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "type", "button");
        dom.setAttribute(el1, "class", "btn btn-primary");
        dom.setAttribute(el1, "style", "display: block; margin: auto;");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" Train Spider\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "icon-button", [], ["icon", "spider"], ["loc", [null, [2, 4], [2, 34]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/list-item-text", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-text.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/list-item-username", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-username.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        Select Username\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/list-item-username.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "option.label", ["loc", [null, [7, 12], [7, 28]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/list-item-username.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "select.item", [], ["value", ["subexpr", "@mut", [["get", "option", ["loc", [null, [6, 29], [6, 35]]]]], [], []], "action", ["subexpr", "action", [["get", "select.setValueAndClose", ["loc", [null, [6, 51], [6, 74]]]], ["get", "option", ["loc", [null, [6, 75], [6, 81]]]]], [], ["loc", [null, [6, 43], [6, 82]]]]], 0, null, ["loc", [null, [6, 8], [8, 24]]]]],
          locals: ["option"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/list-item-username.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "select.header", [], [], 0, null, ["loc", [null, [2, 4], [4, 22]]]], ["block", "each", [["get", "usernameOptions", ["loc", [null, [5, 12], [5, 27]]]]], [], 1, null, ["loc", [null, [5, 4], [9, 13]]]]],
        locals: ["select"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/list-item-username.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "list-item-selectable", [], ["value", ["subexpr", "mut", [["get", "username", ["loc", [null, [1, 35], [1, 43]]]]], [], ["loc", [null, [1, 30], [1, 44]]]], "valueAttribute", "label", "onChange", ["subexpr", "action", ["saveSpider"], [], ["loc", [null, [1, 77], [1, 98]]]], "menuContainer", "body", "menuAlign", "left"], 0, null, ["loc", [null, [1, 0], [10, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('portia-ui/templates/components/modal-dialog', ['exports', 'ember-modal-dialog/templates/components/modal-dialog'], function (exports, _emberModalDialogTemplatesComponentsModalDialog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberModalDialogTemplatesComponentsModalDialog['default'];
    }
  });
});
define("portia-ui/templates/components/notification-container", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/notification-container.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "notification-message", [], ["notification", ["subexpr", "@mut", [["get", "notification", ["loc", [null, [2, 40], [2, 52]]]]], [], []], "fade", ["subexpr", "@mut", [["get", "notification.fading", ["loc", [null, [2, 58], [2, 77]]]]], [], []], "fadeAction", ["subexpr", "action", ["fadeBanner", ["get", "notification", ["loc", [null, [2, 110], [2, 122]]]]], [], ["loc", [null, [2, 89], [2, 123]]]]], ["loc", [null, [2, 4], [2, 125]]]]],
        locals: ["notification"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/notification-container.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "notification-message", [], ["notification", ["subexpr", "@mut", [["get", "notification", ["loc", [null, [6, 40], [6, 52]]]]], [], []], "fade", ["subexpr", "@mut", [["get", "notification.fading", ["loc", [null, [6, 58], [6, 77]]]]], [], []], "closeAction", ["subexpr", "action", ["dismissNotification", ["get", "notification", ["loc", [null, [6, 120], [6, 132]]]]], [], ["loc", [null, [6, 90], [6, 133]]]], "fadeAction", ["subexpr", "action", ["fadeNotification", ["get", "notification", ["loc", [null, [6, 172], [6, 184]]]]], [], ["loc", [null, [6, 145], [6, 185]]]]], ["loc", [null, [6, 4], [6, 187]]]]],
        locals: ["notification"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/notification-container.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "banners", ["loc", [null, [1, 8], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]], ["block", "each", [["get", "displayNotifications", ["loc", [null, [5, 8], [5, 28]]]]], [], 1, null, ["loc", [null, [5, 0], [7, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/notification-message", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "modifiers",
            "modifiers": ["action"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/notification-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "close");
          dom.setAttribute(el1, "aria-label", "Close");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "aria-hidden", "true");
          var el3 = dom.createTextNode("×");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["close"], [], ["loc", [null, [2, 59], [2, 77]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/notification-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h4");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [7, 8], [7, 17]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/notification-message.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "closeAction", ["loc", [null, [1, 6], [1, 17]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]], ["block", "if", [["get", "title", ["loc", [null, [6, 6], [6, 11]]]]], [], 1, null, ["loc", [null, [6, 0], [8, 7]]]], ["content", "message", ["loc", [null, [9, 3], [9, 14]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/page-actions-editor", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 16
                },
                "end": {
                  "line": 9,
                  "column": 16
                }
              },
              "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element2, 'value');
              morphs[1] = dom.createAttrMorph(element2, 'selected');
              morphs[2] = dom.createMorphAt(element2, 0, 0);
              return morphs;
            },
            statements: [["attribute", "value", ["get", "type", ["loc", [null, [8, 36], [8, 40]]]]], ["attribute", "selected", ["subexpr", "eq", [["get", "type", ["loc", [null, [8, 57], [8, 61]]]], ["get", "editing.type", ["loc", [null, [8, 62], [8, 74]]]]], [], ["loc", [null, [8, 52], [8, 76]]]]], ["content", "type", ["loc", [null, [8, 77], [8, 85]]]]],
            locals: ["type"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 18,
                "column": 0
              }
            },
            "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group form-group-sm");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "for", "actionType");
            dom.setAttribute(el2, "class", "col-sm-4 control-label");
            var el3 = dom.createTextNode("Action type");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "col-sm-7");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("select");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "btn-center");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            dom.setAttribute(el3, "class", "btn btn-primary fa fa-icon fa-plus");
            var el4 = dom.createTextNode("\n                Continue\n            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var element4 = dom.childAt(element3, [3, 1]);
            var element5 = dom.childAt(element3, [5, 1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element4, 'onchange');
            morphs[1] = dom.createMorphAt(element4, 1, 1);
            morphs[2] = dom.createElementMorph(element5);
            return morphs;
          },
          statements: [["attribute", "onchange", ["subexpr", "action", [["subexpr", "mut", [["get", "editing.type", ["loc", [null, [6, 43], [6, 55]]]]], [], ["loc", [null, [6, 38], [6, 56]]]]], ["value", "target.value"], ["loc", [null, [6, 29], [6, 79]]]]], ["block", "each", [["get", "actionTypes", ["loc", [null, [7, 24], [7, 35]]]]], [], 0, null, ["loc", [null, [7, 16], [9, 25]]]], ["element", "action", ["addContinue"], [], ["loc", [null, [13, 20], [13, 44]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group form-group-sm");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "for", "actionType");
              dom.setAttribute(el2, "class", "col-sm-4 control-label");
              var el3 = dom.createTextNode("Timeout (ms)");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-sm-7");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
              return morphs;
            },
            statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "editing.timeout", ["loc", [null, [24, 30], [24, 45]]]]], [], []], "pattern", "^[0-9]+$", "class", "form-control"], ["loc", [null, [24, 16], [24, 88]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group form-group-sm");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "for", "actionType");
              dom.setAttribute(el2, "class", "col-sm-4 control-label");
              var el3 = dom.createTextNode("Selector");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-sm-7");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
              return morphs;
            },
            statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "editing.selector", ["loc", [null, [31, 30], [31, 46]]]]], [], []], "class", "form-control"], ["loc", [null, [31, 16], [31, 70]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 35,
                  "column": 4
                },
                "end": {
                  "line": 42,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-group form-group-sm");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("label");
              dom.setAttribute(el2, "for", "actionType");
              dom.setAttribute(el2, "class", "col-sm-4 control-label");
              var el3 = dom.createTextNode("Value");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "col-sm-7");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]), 1, 1);
              return morphs;
            },
            statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "editing.value", ["loc", [null, [39, 30], [39, 43]]]]], [], []], "class", "form-control"], ["loc", [null, [39, 16], [39, 67]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 0
              },
              "end": {
                "line": 57,
                "column": 0
              }
            },
            "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("form");
            dom.setAttribute(el1, "class", "form-horizontal");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group form-group-sm");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "for", "actionType");
            dom.setAttribute(el2, "class", "control-label");
            var el3 = dom.createTextNode("Run only in pages matching");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "form-group form-group-sm");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            dom.setAttribute(el2, "for", "actionType");
            dom.setAttribute(el2, "class", "control-label");
            var el3 = dom.createTextNode("Don't run in pages matching");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "btn-center");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            dom.setAttribute(el2, "class", "btn btn-primary fa fa-icon fa-check");
            var el3 = dom.createTextNode("\n            Back\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0]);
            var element1 = dom.childAt(fragment, [6, 1]);
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createMorphAt(element0, 2, 2);
            morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]), 3, 3);
            morphs[3] = dom.createMorphAt(dom.childAt(fragment, [4]), 3, 3);
            morphs[4] = dom.createElementMorph(element1);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "editing.type", ["loc", [null, [20, 14], [20, 26]]]], "wait"], [], ["loc", [null, [20, 10], [20, 34]]]]], [], 0, 1, ["loc", [null, [20, 4], [34, 11]]]], ["block", "if", [["subexpr", "eq", [["get", "editing.type", ["loc", [null, [35, 14], [35, 26]]]], "set"], [], ["loc", [null, [35, 10], [35, 33]]]]], [], 2, null, ["loc", [null, [35, 4], [42, 11]]]], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "editing.accept", ["loc", [null, [46, 22], [46, 36]]]]], [], []], "class", "form-control"], ["loc", [null, [46, 8], [46, 60]]]], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "editing.reject", ["loc", [null, [50, 22], [50, 36]]]]], [], []], "class", "form-control"], ["loc", [null, [50, 8], [50, 60]]]], ["element", "action", ["back"], [], ["loc", [null, [53, 16], [53, 33]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 58,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "addingNew", ["loc", [null, [2, 6], [2, 15]]]]], [], 0, 1, ["loc", [null, [2, 0], [57, 7]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 62,
                      "column": 16
                    },
                    "end": {
                      "line": 62,
                      "column": 43
                    }
                  },
                  "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode(" OnLoad ");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 61,
                    "column": 12
                  },
                  "end": {
                    "line": 64,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["block", "list-item-text", [], [], 0, null, ["loc", [null, [62, 16], [62, 62]]]], ["inline", "list-item-icon", [], ["icon", "add", "action", ["subexpr", "action", ["addNew"], [], ["loc", [null, [63, 51], [63, 68]]]]], ["loc", [null, [63, 16], [63, 71]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  var child0 = (function () {
                    var child0 = (function () {
                      return {
                        meta: {
                          "fragmentReason": false,
                          "revision": "Ember@2.6.2",
                          "loc": {
                            "source": null,
                            "start": {
                              "line": 70,
                              "column": 28
                            },
                            "end": {
                              "line": 70,
                              "column": 83
                            }
                          },
                          "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
                        },
                        isEmpty: false,
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                          var el0 = dom.createDocumentFragment();
                          var el1 = dom.createElement("code");
                          var el2 = dom.createComment("");
                          dom.appendChild(el1, el2);
                          dom.appendChild(el0, el1);
                          return el0;
                        },
                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                          var morphs = new Array(1);
                          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                          return morphs;
                        },
                        statements: [["content", "action.selector", ["loc", [null, [70, 57], [70, 76]]]]],
                        locals: [],
                        templates: []
                      };
                    })();
                    var child1 = (function () {
                      return {
                        meta: {
                          "fragmentReason": false,
                          "revision": "Ember@2.6.2",
                          "loc": {
                            "source": null,
                            "start": {
                              "line": 71,
                              "column": 28
                            },
                            "end": {
                              "line": 71,
                              "column": 83
                            }
                          },
                          "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
                        },
                        isEmpty: false,
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                          var el0 = dom.createDocumentFragment();
                          var el1 = dom.createTextNode(" to ");
                          dom.appendChild(el0, el1);
                          var el1 = dom.createElement("code");
                          var el2 = dom.createTextNode("\"");
                          dom.appendChild(el1, el2);
                          var el2 = dom.createComment("");
                          dom.appendChild(el1, el2);
                          var el2 = dom.createTextNode("\"");
                          dom.appendChild(el1, el2);
                          dom.appendChild(el0, el1);
                          return el0;
                        },
                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                          var morphs = new Array(1);
                          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                          return morphs;
                        },
                        statements: [["content", "action.value", ["loc", [null, [71, 59], [71, 75]]]]],
                        locals: [],
                        templates: []
                      };
                    })();
                    var child2 = (function () {
                      return {
                        meta: {
                          "fragmentReason": false,
                          "revision": "Ember@2.6.2",
                          "loc": {
                            "source": null,
                            "start": {
                              "line": 72,
                              "column": 28
                            },
                            "end": {
                              "line": 72,
                              "column": 75
                            }
                          },
                          "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
                        },
                        isEmpty: false,
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                          var el0 = dom.createDocumentFragment();
                          var el1 = dom.createTextNode(" for ");
                          dom.appendChild(el0, el1);
                          var el1 = dom.createComment("");
                          dom.appendChild(el0, el1);
                          var el1 = dom.createTextNode("ms");
                          dom.appendChild(el0, el1);
                          return el0;
                        },
                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                          var morphs = new Array(1);
                          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                          return morphs;
                        },
                        statements: [["content", "action.timeout", ["loc", [null, [72, 55], [72, 73]]]]],
                        locals: [],
                        templates: []
                      };
                    })();
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 69,
                            "column": 24
                          },
                          "end": {
                            "line": 73,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(3);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                        return morphs;
                      },
                      statements: [["block", "if", [["get", "action.selector", ["loc", [null, [70, 34], [70, 49]]]]], [], 0, null, ["loc", [null, [70, 28], [70, 90]]]], ["block", "if", [["get", "action.value", ["loc", [null, [71, 34], [71, 46]]]]], [], 1, null, ["loc", [null, [71, 28], [71, 90]]]], ["block", "if", [["get", "action.timeout", ["loc", [null, [72, 34], [72, 48]]]]], [], 2, null, ["loc", [null, [72, 28], [72, 82]]]]],
                      locals: [],
                      templates: [child0, child1, child2]
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 66,
                          "column": 20
                        },
                        "end": {
                          "line": 76,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
                    },
                    isEmpty: false,
                    arity: 1,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(5);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                      morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                      morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                      morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
                      return morphs;
                    },
                    statements: [["content", "reorder-handler", ["loc", [null, [67, 24], [67, 43]]]], ["inline", "list-item-icon", [], ["icon", ["subexpr", "@mut", [["get", "action.type", ["loc", [null, [68, 46], [68, 57]]]]], [], []]], ["loc", [null, [68, 24], [68, 59]]]], ["block", "list-item-text", [], [], 0, null, ["loc", [null, [69, 24], [73, 43]]]], ["inline", "list-item-icon", [], ["icon", "options", "action", ["subexpr", "action", ["editPageAction", ["get", "action", ["loc", [null, [74, 88], [74, 94]]]]], [], ["loc", [null, [74, 63], [74, 95]]]]], ["loc", [null, [74, 24], [74, 97]]]], ["inline", "list-item-icon", [], ["icon", "remove", "action", ["subexpr", "action", ["deletePageAction", ["get", "index", ["loc", [null, [75, 89], [75, 94]]]]], [], ["loc", [null, [75, 62], [75, 95]]]]], ["loc", [null, [75, 24], [75, 97]]]]],
                    locals: ["options"],
                    templates: [child0]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 65,
                        "column": 16
                      },
                      "end": {
                        "line": 77,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
                  },
                  isEmpty: false,
                  arity: 2,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "tree-list-item", [], ["classNames", "page-action"], 0, null, ["loc", [null, [66, 20], [76, 39]]]]],
                  locals: ["action", "index"],
                  templates: [child0]
                };
              })();
              var child1 = (function () {
                var child0 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 79,
                            "column": 24
                          },
                          "end": {
                            "line": 79,
                            "column": 77
                          }
                        },
                        "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode(" No actions have been recorded yet");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes() {
                        return [];
                      },
                      statements: [],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 78,
                          "column": 20
                        },
                        "end": {
                          "line": 80,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      return morphs;
                    },
                    statements: [["block", "list-item-text", [], [], 0, null, ["loc", [null, [79, 24], [79, 96]]]]],
                    locals: [],
                    templates: [child0]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 77,
                        "column": 16
                      },
                      "end": {
                        "line": 81,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "tree-list-item", [], [], 0, null, ["loc", [null, [78, 20], [80, 39]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 64,
                      "column": 12
                    },
                    "end": {
                      "line": 82,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  return morphs;
                },
                statements: [["block", "each", [["get", "pageActions", ["loc", [null, [65, 24], [65, 35]]]]], [], 0, 1, ["loc", [null, [65, 16], [81, 25]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 64,
                    "column": 12
                  },
                  "end": {
                    "line": 82,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [64, 26], [64, 41]]]], "subtrees"], [], ["loc", [null, [64, 22], [64, 53]]]]], [], 0, null, ["loc", [null, [64, 12], [82, 12]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 60,
                  "column": 8
                },
                "end": {
                  "line": 83,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [61, 22], [61, 37]]]], "item"], [], ["loc", [null, [61, 18], [61, 45]]]]], [], 0, 1, ["loc", [null, [61, 12], [82, 19]]]]],
            locals: ["options"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 59,
                "column": 4
              },
              "end": {
                "line": 84,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "tree-list-item", [], ["hasChildren", true, "childsReorderable", true, "reorder", ["subexpr", "action", ["reorderPageAction"], [], ["loc", [null, [60, 74], [60, 102]]]]], 0, null, ["loc", [null, [60, 8], [83, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 58,
              "column": 0
            },
            "end": {
              "line": 85,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tree-list", [], [], 0, null, ["loc", [null, [59, 4], [84, 18]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 86,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/page-actions-editor.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "editing", ["loc", [null, [1, 6], [1, 13]]]]], [], 0, 1, ["loc", [null, [1, 0], [85, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/project-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 8
                },
                "end": {
                  "line": 4,
                  "column": 83
                }
              },
              "moduleName": "portia-ui/templates/components/project-list.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "project.name", ["loc", [null, [4, 8], [4, 83]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/project-list.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "link-to", ["projects.project", ["get", "project", ["loc", [null, [4, 50], [4, 57]]]]], ["class", "list-group-item"], 0, null, ["loc", [null, [4, 8], [4, 83]]]]],
          locals: ["project"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/project-list.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "input-with-clear", [], ["update", ["subexpr", "action", ["search"], [], ["loc", [null, [2, 30], [2, 47]]]], "clear", ["subexpr", "action", ["clear"], [], ["loc", [null, [2, 54], [2, 70]]]], "placeholder", "Search..."], ["loc", [null, [2, 4], [2, 96]]]], ["block", "each", [["get", "filteredProjects", ["loc", [null, [3, 12], [3, 28]]]]], [], 0, null, ["loc", [null, [3, 4], [5, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 83
                }
              },
              "moduleName": "portia-ui/templates/components/project-list.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "project.name", ["loc", [null, [8, 8], [8, 83]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/project-list.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "link-to", ["projects.project", ["get", "project", ["loc", [null, [8, 50], [8, 57]]]]], ["class", "list-group-item"], 0, null, ["loc", [null, [8, 8], [8, 83]]]]],
          locals: ["project"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/project-list.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "projects", ["loc", [null, [7, 12], [7, 20]]]]], [], 0, null, ["loc", [null, [7, 4], [9, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 7
          }
        },
        "moduleName": "portia-ui/templates/components/project-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "showSearch", ["loc", [null, [1, 6], [1, 16]]]]], [], 0, 1, ["loc", [null, [1, 0], [10, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/project-listing", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 8,
                        "column": 20
                      },
                      "end": {
                        "line": 28,
                        "column": 20
                      }
                    },
                    "moduleName": "portia-ui/templates/components/project-listing.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                        Not published\n                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("p");
                    var el2 = dom.createTextNode("\n                            This project has changes that have not yet been published.\n                        ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("p");
                    var el2 = dom.createTextNode("\n                            When you make changes in Portia a private workspace is created for your\n                            user, separate from the rest of the project. Other users cannot see\n                            these changes until they are published, and you cannot see changes that\n                            were published by other users after you started making changes.\n                        ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("p");
                    var el2 = dom.createTextNode("\n                            To run a spider or make your changes visible to other users you must\n                            first publish (");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(") the changes.\n                        ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("p");
                    var el2 = dom.createTextNode("\n                            To clean your private workspace, and get back to the most recently\n                            published version of your project, you can discard your changes\n                            (");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(").\n                        ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [5]), 1, 1);
                    morphs[1] = dom.createMorphAt(dom.childAt(fragment, [7]), 1, 1);
                    return morphs;
                  },
                  statements: [["inline", "icon-button", [], ["icon", "publish"], ["loc", [null, [21, 43], [21, 73]]]], ["inline", "icon-button", [], ["icon", "rollback"], ["loc", [null, [26, 29], [26, 60]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 6,
                      "column": 16
                    },
                    "end": {
                      "line": 29,
                      "column": 16
                    }
                  },
                  "moduleName": "portia-ui/templates/components/project-listing.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    Not published\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "help-icon", [], ["tooltipClasses", "tooltip-wide"], 0, null, ["loc", [null, [8, 20], [28, 34]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 12
                  },
                  "end": {
                    "line": 30,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/project-listing.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                Project\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "animation-container", [], ["hide", ["subexpr", "or", [["subexpr", "not", [["get", "versionControlled", ["loc", [null, [6, 53], [6, 70]]]]], [], ["loc", [null, [6, 48], [6, 71]]]], ["subexpr", "not", [["get", "project.hasChanges", ["loc", [null, [6, 77], [6, 95]]]]], [], ["loc", [null, [6, 72], [6, 96]]]]], [], ["loc", [null, [6, 44], [6, 97]]]], "id", "project-changes-info", "class", "inline project-changes", "setHeight", false], 0, null, ["loc", [null, [6, 16], [29, 40]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 31,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/project-listing.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-item-text", [], ["class", "title project-listing"], 0, null, ["loc", [null, [4, 12], [30, 31]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 36,
                          "column": 20
                        },
                        "end": {
                          "line": 38,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/project-listing.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      return morphs;
                    },
                    statements: [["content", "project.name", ["loc", [null, [37, 24], [37, 40]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 40,
                            "column": 24
                          },
                          "end": {
                            "line": 42,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/project-listing.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "list-item-icon", [], ["id", "project-publish-button", "class", ["subexpr", "if", [["get", "project.hasChanges", ["loc", [null, [41, 83], [41, 101]]]], "active"], [], ["loc", [null, [41, 79], [41, 111]]]], "icon", "publish", "action", ["subexpr", "action", ["publish"], [], ["loc", [null, [41, 134], [41, 152]]]]], ["loc", [null, [41, 28], [41, 154]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  var child1 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 43,
                            "column": 24
                          },
                          "end": {
                            "line": 45,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/project-listing.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "list-item-icon", [], ["id", "project-discard-button", "class", ["subexpr", "if", [["get", "project.hasChanges", ["loc", [null, [44, 83], [44, 101]]]], "active"], [], ["loc", [null, [44, 79], [44, 111]]]], "icon", "rollback", "action", ["subexpr", "action", ["discard"], [], ["loc", [null, [44, 135], [44, 153]]]]], ["loc", [null, [44, 28], [44, 155]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 39,
                          "column": 20
                        },
                        "end": {
                          "line": 46,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/project-listing.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(2);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["block", "tooltip-container", [], ["tooltipFor", "project-publish-button", "text", "Publish project", "tooltipContainer", "body"], 0, null, ["loc", [null, [40, 24], [42, 46]]]], ["block", "tooltip-container", [], ["tooltipFor", "project-discard-button", "text", "Discard changes", "tooltipContainer", "body"], 1, null, ["loc", [null, [43, 24], [45, 46]]]]],
                    locals: [],
                    templates: [child0, child1]
                  };
                })();
                var child2 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 48,
                            "column": 24
                          },
                          "end": {
                            "line": 50,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/project-listing.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "list-item-icon", [], ["icon", "close"], ["loc", [null, [49, 28], [49, 59]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 47,
                          "column": 20
                        },
                        "end": {
                          "line": 51,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/project-listing.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["block", "link-to", ["projects"], ["id", "project-close-button"], 0, null, ["loc", [null, [48, 24], [50, 36]]]]],
                    locals: [],
                    templates: [child0]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 33,
                        "column": 16
                      },
                      "end": {
                        "line": 52,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/project-listing.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n                    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(5);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                    morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
                    morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["content", "indentation-spacer", ["loc", [null, [34, 20], [34, 42]]]], ["inline", "list-item-icon", [], ["icon", "project"], ["loc", [null, [35, 20], [35, 53]]]], ["block", "list-item-text", [], [], 0, null, ["loc", [null, [36, 20], [38, 39]]]], ["block", "if", [["get", "versionControlled", ["loc", [null, [39, 26], [39, 43]]]]], [], 1, null, ["loc", [null, [39, 20], [46, 27]]]], ["block", "tooltip-container", [], ["tooltipFor", "project-close-button", "text", "Close project", "tooltipContainer", "body"], 2, null, ["loc", [null, [47, 20], [51, 42]]]]],
                  locals: [],
                  templates: [child0, child1, child2]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 32,
                      "column": 12
                    },
                    "end": {
                      "line": 53,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/project-listing.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "link-to", ["projects.project", ["get", "project", ["loc", [null, [33, 46], [33, 53]]]]], [], 0, null, ["loc", [null, [33, 16], [52, 28]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 31,
                    "column": 8
                  },
                  "end": {
                    "line": 54,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/project-listing.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "tree-list-item", [], [], 0, null, ["loc", [null, [32, 12], [53, 31]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 8
                },
                "end": {
                  "line": 54,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/project-listing.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [31, 22], [31, 37]]]], "subtrees"], [], ["loc", [null, [31, 18], [31, 49]]]]], [], 0, null, ["loc", [null, [31, 8], [54, 8]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 55,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/project-listing.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [3, 18], [3, 33]]]], "item"], [], ["loc", [null, [3, 14], [3, 41]]]]], [], 0, 1, ["loc", [null, [3, 8], [54, 15]]]]],
          locals: ["options"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 56,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/project-listing.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tree-list-item", [], ["hasChildren", true], 0, null, ["loc", [null, [2, 4], [55, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 57,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/project-listing.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tree-list", [], [], 0, null, ["loc", [null, [1, 0], [56, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/project-structure-listing", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 5,
                      "column": 20
                    },
                    "end": {
                      "line": 5,
                      "column": 96
                    }
                  },
                  "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("s ");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 7,
                        "column": 20
                      },
                      "end": {
                        "line": 20,
                        "column": 20
                      }
                    },
                    "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                        Spiders\n                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("p");
                    var el2 = dom.createTextNode("\n                            A spider crawls web pages to extract data.\n                        ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("p");
                    var el2 = dom.createTextNode("\n                            It is most common to create a spider for each website you wish to crawl, but\n                            a single spider can also crawl more than one website.\n                        ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n                        ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("p");
                    var el2 = dom.createTextNode("\n                            To create a spider first visit a web page that you would like to start\n                            crawling from.\n                        ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 6,
                      "column": 16
                    },
                    "end": {
                      "line": 21,
                      "column": 16
                    }
                  },
                  "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "help-icon", [], [], 0, null, ["loc", [null, [7, 20], [20, 34]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 12
                  },
                  "end": {
                    "line": 23,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              Spider");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                return morphs;
              },
              statements: [["block", "animation-container", [], ["class", "inline", "hide", ["subexpr", "@mut", [["get", "currentSpider", ["loc", [null, [5, 63], [5, 76]]]]], [], []], "setHeight", false], 0, null, ["loc", [null, [5, 20], [5, 120]]]], ["content", "pagination", ["loc", [null, [5, 126], [5, 140]]]], ["block", "animation-container", [], ["class", "inline", "setHeight", false], 1, null, ["loc", [null, [6, 16], [21, 40]]]], ["inline", "spider-message", [], ["currentSpider", ["subexpr", "@mut", [["get", "currentSpider", ["loc", [null, [22, 47], [22, 60]]]]], [], []]], ["loc", [null, [22, 16], [22, 62]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 24,
                    "column": 12
                  },
                  "end": {
                    "line": 26,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "list-item-icon", [], ["id", "add-spider-button", "icon", "add", "disabled", ["subexpr", "not", [["get", "canAddSpider", ["loc", [null, [25, 81], [25, 93]]]]], [], ["loc", [null, [25, 76], [25, 94]]]], "action", ["subexpr", "action", ["addSpider"], [], ["loc", [null, [25, 102], [25, 122]]]]], ["loc", [null, [25, 16], [25, 124]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 27,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-item-text", [], ["class", "title"], 0, null, ["loc", [null, [4, 12], [23, 31]]]], ["block", "tooltip-container", [], ["tooltipFor", "add-spider-button", "text", ["subexpr", "@mut", [["get", "addSpiderTooltipText", ["loc", [null, [24, 69], [24, 89]]]]], [], []], "tooltipContainer", "body"], 1, null, ["loc", [null, [24, 12], [26, 34]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 29,
                        "column": 16
                      },
                      "end": {
                        "line": 31,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                    This project has no spiders\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 28,
                      "column": 12
                    },
                    "end": {
                      "line": 32,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "list-item-text", [], ["class", "text-center"], 0, null, ["loc", [null, [29, 16], [31, 35]]]]],
                locals: ["options"],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 33,
                      "column": 12
                    },
                    "end": {
                      "line": 40,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "alert alert-info");
                  dom.setAttribute(el1, "role", "alert");
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("p");
                  var el3 = dom.createTextNode("\n                        To create a spider first visit a web page that you would like to start\n                        crawling from.\n                    ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: ["options"],
                templates: []
              };
            })();
            var child2 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 43,
                        "column": 16
                      },
                      "end": {
                        "line": 52,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("input");
                    dom.setAttribute(el1, "class", "form-control");
                    dom.setAttribute(el1, "placeholder", "Search for your spider");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element2 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createAttrMorph(element2, 'value');
                    morphs[1] = dom.createAttrMorph(element2, 'oninput');
                    return morphs;
                  },
                  statements: [["attribute", "value", ["get", "spiderSearch", ["loc", [null, [47, 29], [47, 41]]]]], ["attribute", "oninput", ["subexpr", "perform", [["get", "filterSpiders", ["loc", [null, [48, 39], [48, 52]]]], ["get", "sortedSpiders", ["loc", [null, [49, 30], [49, 43]]]]], ["value", "target.value"], ["loc", [null, [48, 29], [50, 52]]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 42,
                      "column": 12
                    },
                    "end": {
                      "line": 53,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "tree-list-item", [], [], 0, null, ["loc", [null, [43, 16], [52, 35]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child3 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 56,
                        "column": 16
                      },
                      "end": {
                        "line": 61,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("i");
                    dom.setAttribute(el1, "class", "fa fa-angle-up twice-x clickable");
                    var el2 = dom.createTextNode("\n                    ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element1 = dom.childAt(fragment, [1]);
                    var morphs = new Array(1);
                    morphs[0] = dom.createAttrMorph(element1, 'onclick');
                    return morphs;
                  },
                  statements: [["attribute", "onclick", ["subexpr", "perform", [["get", "turnPage", ["loc", [null, [58, 39], [58, 47]]]], -1], [], ["loc", [null, [58, 29], [58, 52]]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 55,
                      "column": 12
                    },
                    "end": {
                      "line": 62,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "tree-list-item", [], ["isCentered", true], 0, null, ["loc", [null, [56, 16], [61, 35]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child4 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  var child0 = (function () {
                    var child0 = (function () {
                      return {
                        meta: {
                          "fragmentReason": false,
                          "revision": "Ember@2.6.2",
                          "loc": {
                            "source": null,
                            "start": {
                              "line": 72,
                              "column": 28
                            },
                            "end": {
                              "line": 72,
                              "column": 67
                            }
                          },
                          "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                        },
                        isEmpty: false,
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                          var el0 = dom.createDocumentFragment();
                          var el1 = dom.createComment("");
                          dom.appendChild(el0, el1);
                          return el0;
                        },
                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                          var morphs = new Array(1);
                          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                          dom.insertBoundary(fragment, 0);
                          dom.insertBoundary(fragment, null);
                          return morphs;
                        },
                        statements: [["content", "spider.nameAlias", ["loc", [null, [72, 47], [72, 67]]]]],
                        locals: [],
                        templates: []
                      };
                    })();
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 71,
                            "column": 24
                          },
                          "end": {
                            "line": 73,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["block", "list-item-text", [], [], 0, null, ["loc", [null, [72, 28], [72, 86]]]]],
                      locals: [],
                      templates: [child0]
                    };
                  })();
                  var child1 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 73,
                            "column": 24
                          },
                          "end": {
                            "line": 75,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "list-item-editable", [], ["value", ["subexpr", "mut", [["get", "spider.nameAlias", ["loc", [null, [74, 60], [74, 76]]]]], [], ["loc", [null, [74, 55], [74, 77]]]], "onChange", ["subexpr", "action", ["saveSpiderName", ["get", "spider", ["loc", [null, [74, 112], [74, 118]]]]], [], ["loc", [null, [74, 87], [74, 119]]]], "validate", ["subexpr", "action", ["validateSpiderName", ["get", "spider", ["loc", [null, [74, 158], [74, 164]]]]], [], ["loc", [null, [74, 129], [74, 165]]]]], ["loc", [null, [74, 28], [74, 167]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  var child2 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 76,
                            "column": 24
                          },
                          "end": {
                            "line": 78,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "list-item-icon", [], ["icon", "remove", "action", ["subexpr", "action", ["removeSpider", ["get", "spider", ["loc", [null, [77, 89], [77, 95]]]]], [], ["loc", [null, [77, 66], [77, 96]]]], "bubbles", false], ["loc", [null, [77, 28], [77, 112]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  var child3 = (function () {
                    var child0 = (function () {
                      var child0 = (function () {
                        var child0 = (function () {
                          return {
                            meta: {
                              "fragmentReason": false,
                              "revision": "Ember@2.6.2",
                              "loc": {
                                "source": null,
                                "start": {
                                  "line": 82,
                                  "column": 36
                                },
                                "end": {
                                  "line": 84,
                                  "column": 36
                                }
                              },
                              "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                            },
                            isEmpty: false,
                            arity: 0,
                            cachedFragment: null,
                            hasRendered: false,
                            buildFragment: function buildFragment(dom) {
                              var el0 = dom.createDocumentFragment();
                              var el1 = dom.createTextNode("                                        ");
                              dom.appendChild(el0, el1);
                              var el1 = dom.createComment("");
                              dom.appendChild(el0, el1);
                              var el1 = dom.createTextNode("\n");
                              dom.appendChild(el0, el1);
                              return el0;
                            },
                            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                              var morphs = new Array(1);
                              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                              return morphs;
                            },
                            statements: [["inline", "list-item-icon", [], ["icon", "options"], ["loc", [null, [83, 40], [83, 73]]]]],
                            locals: [],
                            templates: []
                          };
                        })();
                        return {
                          meta: {
                            "fragmentReason": false,
                            "revision": "Ember@2.6.2",
                            "loc": {
                              "source": null,
                              "start": {
                                "line": 81,
                                "column": 32
                              },
                              "end": {
                                "line": 85,
                                "column": 32
                              }
                            },
                            "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                          },
                          isEmpty: false,
                          arity: 0,
                          cachedFragment: null,
                          hasRendered: false,
                          buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createComment("");
                            dom.appendChild(el0, el1);
                            return el0;
                          },
                          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                            var morphs = new Array(1);
                            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                            dom.insertBoundary(fragment, 0);
                            dom.insertBoundary(fragment, null);
                            return morphs;
                          },
                          statements: [["block", "link-to", ["projects.project.spider.options"], ["bubbles", false, "class", "ignore-active"], 0, null, ["loc", [null, [82, 36], [84, 48]]]]],
                          locals: [],
                          templates: [child0]
                        };
                      })();
                      return {
                        meta: {
                          "fragmentReason": false,
                          "revision": "Ember@2.6.2",
                          "loc": {
                            "source": null,
                            "start": {
                              "line": 80,
                              "column": 28
                            },
                            "end": {
                              "line": 86,
                              "column": 28
                            }
                          },
                          "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                        },
                        isEmpty: false,
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                          var el0 = dom.createDocumentFragment();
                          var el1 = dom.createComment("");
                          dom.appendChild(el0, el1);
                          return el0;
                        },
                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                          var morphs = new Array(1);
                          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                          dom.insertBoundary(fragment, 0);
                          dom.insertBoundary(fragment, null);
                          return morphs;
                        },
                        statements: [["block", "link-to", ["projects.project.spider"], ["id", ["subexpr", "concat", ["spider-options-button", ["subexpr", "guid", [["get", "spider", ["loc", [null, [81, 110], [81, 116]]]]], [], ["loc", [null, [81, 104], [81, 117]]]]], [], ["loc", [null, [81, 72], [81, 118]]]], "bubbles", false], 0, null, ["loc", [null, [81, 32], [85, 44]]]]],
                        locals: [],
                        templates: [child0]
                      };
                    })();
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 79,
                            "column": 24
                          },
                          "end": {
                            "line": 87,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                        dom.insertBoundary(fragment, 0);
                        dom.insertBoundary(fragment, null);
                        return morphs;
                      },
                      statements: [["block", "tooltip-container", [], ["tooltipFor", ["subexpr", "concat", ["spider-options-button", ["subexpr", "guid", [["get", "spider", ["loc", [null, [80, 98], [80, 104]]]]], [], ["loc", [null, [80, 92], [80, 105]]]]], [], ["loc", [null, [80, 60], [80, 106]]]], "text", "Advanced spider options", "tooltipContainer", "body"], 0, null, ["loc", [null, [80, 28], [86, 50]]]]],
                      locals: [],
                      templates: [child0]
                    };
                  })();
                  var child4 = (function () {
                    var child0 = (function () {
                      var child0 = (function () {
                        return {
                          meta: {
                            "fragmentReason": false,
                            "revision": "Ember@2.6.2",
                            "loc": {
                              "source": null,
                              "start": {
                                "line": 90,
                                "column": 32
                              },
                              "end": {
                                "line": 92,
                                "column": 32
                              }
                            },
                            "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                          },
                          isEmpty: false,
                          arity: 0,
                          cachedFragment: null,
                          hasRendered: false,
                          buildFragment: function buildFragment(dom) {
                            var el0 = dom.createDocumentFragment();
                            var el1 = dom.createTextNode("                                    ");
                            dom.appendChild(el0, el1);
                            var el1 = dom.createComment("");
                            dom.appendChild(el0, el1);
                            var el1 = dom.createTextNode("\n");
                            dom.appendChild(el0, el1);
                            return el0;
                          },
                          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                            var morphs = new Array(1);
                            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                            return morphs;
                          },
                          statements: [["inline", "list-item-icon", [], ["icon", "close"], ["loc", [null, [91, 36], [91, 67]]]]],
                          locals: [],
                          templates: []
                        };
                      })();
                      return {
                        meta: {
                          "fragmentReason": false,
                          "revision": "Ember@2.6.2",
                          "loc": {
                            "source": null,
                            "start": {
                              "line": 89,
                              "column": 28
                            },
                            "end": {
                              "line": 93,
                              "column": 28
                            }
                          },
                          "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                        },
                        isEmpty: false,
                        arity: 0,
                        cachedFragment: null,
                        hasRendered: false,
                        buildFragment: function buildFragment(dom) {
                          var el0 = dom.createDocumentFragment();
                          var el1 = dom.createComment("");
                          dom.appendChild(el0, el1);
                          return el0;
                        },
                        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                          var morphs = new Array(1);
                          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                          dom.insertBoundary(fragment, 0);
                          dom.insertBoundary(fragment, null);
                          return morphs;
                        },
                        statements: [["block", "link-to", ["projects.project"], ["id", ["subexpr", "concat", ["spider-close-button", ["subexpr", "guid", [["get", "spider", ["loc", [null, [90, 101], [90, 107]]]]], [], ["loc", [null, [90, 95], [90, 108]]]]], [], ["loc", [null, [90, 65], [90, 109]]]], "bubbles", false], 0, null, ["loc", [null, [90, 32], [92, 44]]]]],
                        locals: [],
                        templates: [child0]
                      };
                    })();
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 88,
                            "column": 24
                          },
                          "end": {
                            "line": 94,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                        dom.insertBoundary(fragment, 0);
                        dom.insertBoundary(fragment, null);
                        return morphs;
                      },
                      statements: [["block", "tooltip-container", [], ["tooltipFor", ["subexpr", "concat", ["spider-close-button", ["subexpr", "guid", [["get", "spider", ["loc", [null, [89, 96], [89, 102]]]]], [], ["loc", [null, [89, 90], [89, 103]]]]], [], ["loc", [null, [89, 60], [89, 104]]]], "text", "Close spider", "tooltipContainer", "body"], 0, null, ["loc", [null, [89, 28], [93, 50]]]]],
                      locals: [],
                      templates: [child0]
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 67,
                          "column": 20
                        },
                        "end": {
                          "line": 95,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n\n");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(6);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                      morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                      morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
                      morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                      morphs[5] = dom.createMorphAt(fragment, 8, 8, contextualElement);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["inline", "spider-indentation", [], ["spider", ["subexpr", "@mut", [["get", "spider", ["loc", [null, [68, 52], [68, 58]]]]], [], []], "currentSpider", ["subexpr", "@mut", [["get", "currentSpider", ["loc", [null, [68, 73], [68, 86]]]]], [], []]], ["loc", [null, [68, 24], [68, 88]]]], ["inline", "list-item-icon", [], ["icon", "spider"], ["loc", [null, [69, 24], [69, 56]]]], ["block", "if", [["get", "currentSpider", ["loc", [null, [71, 30], [71, 43]]]]], [], 0, 1, ["loc", [null, [71, 24], [75, 31]]]], ["block", "animation-container", [], ["class", "icon", "setWidth", false, "setHeight", false], 2, null, ["loc", [null, [76, 24], [78, 48]]]], ["block", "animation-container", [], ["class", "icon", "hide", ["subexpr", "not-eq", [["get", "spider", ["loc", [null, [79, 73], [79, 79]]]], ["get", "currentSpider", ["loc", [null, [79, 80], [79, 93]]]]], [], ["loc", [null, [79, 65], [79, 94]]]], "setWidth", false, "setHeight", false], 3, null, ["loc", [null, [79, 24], [87, 48]]]], ["block", "animation-container", [], ["class", "icon", "hide", ["subexpr", "not-eq", [["get", "spider", ["loc", [null, [88, 73], [88, 79]]]], ["get", "currentSpider", ["loc", [null, [88, 80], [88, 93]]]]], [], ["loc", [null, [88, 65], [88, 94]]]], "setWidth", false, "setHeight", false], 4, null, ["loc", [null, [88, 24], [94, 48]]]]],
                    locals: [],
                    templates: [child0, child1, child2, child3, child4]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 66,
                        "column": 16
                      },
                      "end": {
                        "line": 96,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "link-to", ["projects.project.spider", ["get", "spider", ["loc", [null, [67, 57], [67, 63]]]], ["subexpr", "query-params", [], ["url", ["subexpr", "or", [["get", "spider.firstUrl", ["loc", [null, [67, 86], [67, 101]]]], null], [], ["loc", [null, [67, 82], [67, 107]]]], "baseurl", null], ["loc", [null, [67, 64], [67, 121]]]]], ["current-when", "projects.project.spider"], 0, null, ["loc", [null, [67, 20], [95, 32]]]]],
                  locals: ["options"],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 65,
                      "column": 12
                    },
                    "end": {
                      "line": 97,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "tree-list-item", [], ["hide", ["subexpr", "and", [["get", "currentSpider", ["loc", [null, [66, 44], [66, 57]]]], ["subexpr", "not-eq", [["get", "spider", ["loc", [null, [66, 66], [66, 72]]]], ["get", "currentSpider", ["loc", [null, [66, 73], [66, 86]]]]], [], ["loc", [null, [66, 58], [66, 87]]]]], [], ["loc", [null, [66, 39], [66, 88]]]]], 0, null, ["loc", [null, [66, 16], [96, 35]]]]],
                locals: ["spider"],
                templates: [child0]
              };
            })();
            var child5 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 101,
                        "column": 16
                      },
                      "end": {
                        "line": 106,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                    ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("i");
                    dom.setAttribute(el1, "class", "fa fa-angle-down twice-x clickable");
                    var el2 = dom.createTextNode("\n                    ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element0 = dom.childAt(fragment, [1]);
                    var morphs = new Array(1);
                    morphs[0] = dom.createAttrMorph(element0, 'onclick');
                    return morphs;
                  },
                  statements: [["attribute", "onclick", ["subexpr", "perform", [["get", "turnPage", ["loc", [null, [103, 39], [103, 47]]]], 1], [], ["loc", [null, [103, 29], [103, 51]]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 100,
                      "column": 12
                    },
                    "end": {
                      "line": 107,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "tree-list-item", [], ["isCentered", true], 0, null, ["loc", [null, [101, 16], [106, 35]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 8
                  },
                  "end": {
                    "line": 109,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element3 = dom.childAt(fragment, [7]);
                var morphs = new Array(7);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[4] = dom.createAttrMorph(element3, 'class');
                morphs[5] = dom.createMorphAt(element3, 1, 1);
                morphs[6] = dom.createMorphAt(fragment, 9, 9, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "tree-list-item", [], ["hide", ["subexpr", "or", [["get", "project.spiders.isPending", ["loc", [null, [28, 39], [28, 64]]]], ["get", "project.spiders.length", ["loc", [null, [28, 65], [28, 87]]]]], [], ["loc", [null, [28, 35], [28, 88]]]]], 0, null, ["loc", [null, [28, 12], [32, 31]]]], ["block", "tree-list-item", [], ["hide", ["subexpr", "or", [["get", "project.spiders.isPending", ["loc", [null, [33, 39], [33, 64]]]], ["get", "project.spiders.length", ["loc", [null, [33, 65], [33, 87]]]]], [], ["loc", [null, [33, 35], [33, 88]]]], "class", "help"], 1, null, ["loc", [null, [33, 12], [40, 31]]]], ["block", "if", [["subexpr", "and", [["get", "noCurrentSpider", ["loc", [null, [42, 23], [42, 38]]]], ["get", "isLarge", ["loc", [null, [42, 39], [42, 46]]]]], [], ["loc", [null, [42, 18], [42, 47]]]]], [], 2, null, ["loc", [null, [42, 12], [53, 19]]]], ["block", "if", [["subexpr", "and", [["get", "noCurrentSpider", ["loc", [null, [55, 23], [55, 38]]]], ["get", "hasPreviousPage", ["loc", [null, [55, 39], [55, 54]]]]], [], ["loc", [null, [55, 18], [55, 55]]]]], [], 3, null, ["loc", [null, [55, 12], [62, 19]]]], ["attribute", "class", ["subexpr", "if", [["get", "isFiltering", ["loc", [null, [64, 28], [64, 39]]]], "very-opaque"], [], ["loc", [null, [64, 23], [64, 55]]]]], ["block", "each", [["get", "spiders", ["loc", [null, [65, 20], [65, 27]]]]], [], 4, null, ["loc", [null, [65, 12], [97, 21]]]], ["block", "if", [["subexpr", "and", [["get", "noCurrentSpider", ["loc", [null, [100, 23], [100, 38]]]], ["get", "hasNextPage", ["loc", [null, [100, 39], [100, 50]]]]], [], ["loc", [null, [100, 18], [100, 51]]]]], [], 5, null, ["loc", [null, [100, 12], [107, 19]]]]],
              locals: [],
              templates: [child0, child1, child2, child3, child4, child5]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 8
                },
                "end": {
                  "line": 109,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [27, 22], [27, 37]]]], "subtrees"], [], ["loc", [null, [27, 18], [27, 49]]]]], [], 0, null, ["loc", [null, [27, 8], [109, 8]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 110,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [3, 18], [3, 33]]]], "item"], [], ["loc", [null, [3, 14], [3, 41]]]]], [], 0, 1, ["loc", [null, [3, 8], [109, 15]]]]],
          locals: ["options"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 111,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tree-list-item", [], ["hasChildren", true], 0, null, ["loc", [null, [2, 4], [110, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 114,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/project-structure-listing.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "tree-list", [], ["hide", ["subexpr", "@mut", [["get", "currentSchema", ["loc", [null, [1, 18], [1, 31]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [111, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/project-structure-spider-feed-url", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 55
                }
              },
              "moduleName": "portia-ui/templates/components/project-structure-spider-feed-url.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "url", ["loc", [null, [5, 48], [5, 55]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 12
                  },
                  "end": {
                    "line": 12,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/project-structure-spider-feed-url.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "list-item-icon", [], ["icon", "options"], ["loc", [null, [11, 16], [11, 49]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 13,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/project-structure-spider-feed-url.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", ["projects.project.spider.start-url.options", ["get", "index", ["loc", [null, [7, 67], [7, 72]]]]], ["bubbles", false, "class", "ignore-active"], 0, null, ["loc", [null, [7, 12], [12, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/project-structure-spider-feed-url.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            return morphs;
          },
          statements: [["content", "indentation-spacer", ["loc", [null, [3, 8], [3, 30]]]], ["inline", "list-item-icon", [], ["icon", "url-feed"], ["loc", [null, [4, 8], [4, 42]]]], ["block", "list-item-text", [], ["class", "txt-describe"], 0, null, ["loc", [null, [5, 8], [5, 74]]]], ["block", "link-to", ["projects.project.spider"], ["bubbles", false], 1, null, ["loc", [null, [6, 8], [13, 20]]]], ["inline", "list-item-icon", [], ["icon", "remove", "action", ["subexpr", "action", [["get", "removeStartUrl", ["loc", [null, [14, 54], [14, 68]]]]], [], ["loc", [null, [14, 46], [14, 69]]]], "bubbles", false], ["loc", [null, [14, 8], [14, 85]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/project-structure-spider-feed-url.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["projects.project.spider.start-url.options", ["get", "index", ["loc", [null, [2, 59], [2, 64]]]]], ["bubbles", false], 0, null, ["loc", [null, [2, 4], [15, 16]]]]],
        locals: ["options"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/project-structure-spider-feed-url.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tree-list-item", [], [], 0, null, ["loc", [null, [1, 0], [16, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/project-structure-spider-generated-url", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 56
                }
              },
              "moduleName": "portia-ui/templates/components/project-structure-spider-generated-url.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "url", ["loc", [null, [5, 49], [5, 56]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 12
                  },
                  "end": {
                    "line": 9,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/project-structure-spider-generated-url.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "list-item-icon", [], ["icon", "options"], ["loc", [null, [8, 16], [8, 49]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 10,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/project-structure-spider-generated-url.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", ["projects.project.spider.start-url.options", ["get", "index", ["loc", [null, [7, 67], [7, 72]]]]], ["bubbles", false, "class", "ignore-active"], 0, null, ["loc", [null, [7, 12], [9, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/project-structure-spider-generated-url.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            return morphs;
          },
          statements: [["content", "indentation-spacer", ["loc", [null, [3, 8], [3, 30]]]], ["inline", "list-item-icon", [], ["icon", "url-generated"], ["loc", [null, [4, 8], [4, 47]]]], ["block", "list-item-text", [], ["class", "generated-url"], 0, null, ["loc", [null, [5, 8], [5, 75]]]], ["block", "link-to", ["projects.project.spider"], ["bubbles", false], 1, null, ["loc", [null, [6, 8], [10, 20]]]], ["inline", "list-item-icon", [], ["icon", "remove", "action", ["subexpr", "action", [["get", "removeStartUrl", ["loc", [null, [11, 54], [11, 68]]]]], [], ["loc", [null, [11, 46], [11, 69]]]], "bubbles", false], ["loc", [null, [11, 8], [11, 85]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/project-structure-spider-generated-url.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["projects.project.spider.start-url.options", ["get", "index", ["loc", [null, [2, 59], [2, 64]]]]], ["bubbles", false], 0, null, ["loc", [null, [2, 4], [12, 16]]]]],
        locals: ["options"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/project-structure-spider-generated-url.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tree-list-item", [], [], 0, null, ["loc", [null, [1, 0], [13, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/project-structure-spider-url", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/project-structure-spider-url.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            return morphs;
          },
          statements: [["content", "indentation-spacer", ["loc", [null, [3, 8], [3, 30]]]], ["inline", "list-item-icon", [], ["icon", "url"], ["loc", [null, [4, 8], [4, 37]]]], ["inline", "list-item-editable", [], ["value", ["subexpr", "mut", [["get", "viewUrl", ["loc", [null, [5, 40], [5, 47]]]]], [], ["loc", [null, [5, 35], [5, 48]]]], "editing", ["subexpr", "mut", [["get", "urlAdded", ["loc", [null, [5, 62], [5, 70]]]]], [], ["loc", [null, [5, 57], [5, 71]]]], "spellcheck", false], ["loc", [null, [5, 8], [5, 90]]]], ["inline", "list-item-icon", [], ["icon", "remove", "action", ["subexpr", "action", [["get", "removeStartUrl", ["loc", [null, [6, 54], [6, 68]]]]], [], ["loc", [null, [6, 46], [6, 69]]]], "bubbles", false], ["loc", [null, [6, 8], [6, 85]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/project-structure-spider-url.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["projects.project.spider", ["get", "spider", ["loc", [null, [2, 41], [2, 47]]]], ["subexpr", "query-params", [], ["url", ["get", "url", ["loc", [null, [2, 66], [2, 69]]]], "baseurl", null], ["loc", [null, [2, 48], [2, 83]]]]], ["active", false], 0, null, ["loc", [null, [2, 4], [7, 16]]]]],
        locals: ["options"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/project-structure-spider-url.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tree-list-item", [], [], 0, null, ["loc", [null, [1, 0], [8, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/regex-pattern-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 12
                  },
                  "end": {
                    "line": 7,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/regex-pattern-list.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "list-item-editable", [], ["value", ["subexpr", "@mut", [["get", "item", ["loc", [null, [5, 43], [5, 47]]]]], [], []], "spellcheck", false, "onChange", ["subexpr", "action", ["changePattern", ["get", "index", ["loc", [null, [5, 98], [5, 103]]]]], [], ["loc", [null, [5, 74], [5, 104]]]]], ["loc", [null, [5, 16], [5, 106]]]], ["inline", "list-item-icon", [], ["icon", "remove", "action", ["subexpr", "action", ["removePattern", ["get", "index", ["loc", [null, [6, 78], [6, 83]]]]], [], ["loc", [null, [6, 54], [6, 84]]]]], ["loc", [null, [6, 16], [6, 86]]]]],
              locals: ["options"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 8,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/regex-pattern-list.hbs"
            },
            isEmpty: false,
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "tree-list-item", [], ["hasChildren", ["subexpr", "@mut", [["get", "spider.startUrls.length", ["loc", [null, [4, 42], [4, 65]]]]], [], []]], 0, null, ["loc", [null, [4, 12], [7, 31]]]]],
            locals: ["item", "index"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/regex-pattern-list.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "list", ["loc", [null, [3, 16], [3, 20]]]]], [], 0, null, ["loc", [null, [3, 8], [8, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 8
                },
                "end": {
                  "line": 12,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/regex-pattern-list.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            No patterns defined\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: ["options"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/regex-pattern-list.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "tree-list-item", [], ["hasChildren", ["subexpr", "@mut", [["get", "spider.startUrls.length", ["loc", [null, [10, 38], [10, 61]]]]], [], []]], 0, null, ["loc", [null, [10, 8], [12, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/regex-pattern-list.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "list.length", ["loc", [null, [2, 10], [2, 21]]]]], [], 0, 1, ["loc", [null, [2, 4], [13, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/regex-pattern-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("The input value is not a valid regular expression.");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element1, 1, 1);
        morphs[3] = dom.createMorphAt(element1, 3, 3);
        morphs[4] = dom.createAttrMorph(element2, 'class');
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "tree-list", [], [], 0, null, ["loc", [null, [1, 0], [14, 14]]]], ["attribute", "class", ["concat", ["form-group new-pattern ", ["subexpr", "if", [["subexpr", "not", [["get", "newPatternCorrect", ["loc", [null, [15, 45], [15, 62]]]]], [], ["loc", [null, [15, 40], [15, 63]]]], "has-error"], [], ["loc", [null, [15, 35], [15, 77]]]]]]], ["inline", "input", [], ["type", "text", "class", "form-control", "placeholder", "Regular expression", "spellcheck", false, "value", ["subexpr", "mut", [["get", "newPattern", ["loc", [null, [17, 110], [17, 120]]]]], [], ["loc", [null, [17, 105], [17, 121]]]], "change", ["subexpr", "action", ["stopPropagation"], [], ["loc", [null, [17, 129], [17, 155]]]], "escape-press", ["subexpr", "action", ["clearPattern"], [], ["loc", [null, [17, 169], [17, 192]]]], "insert-newline", ["subexpr", "action", ["addPattern"], [], ["loc", [null, [17, 208], [17, 229]]]]], ["loc", [null, [17, 8], [17, 231]]]], ["inline", "icon-button", [], ["icon", "add", "disabled", ["subexpr", "or", [["subexpr", "not", [["get", "newPattern", ["loc", [null, [18, 51], [18, 61]]]]], [], ["loc", [null, [18, 46], [18, 62]]]], ["subexpr", "not", [["get", "newPatternCorrect", ["loc", [null, [18, 68], [18, 85]]]]], [], ["loc", [null, [18, 63], [18, 86]]]]], [], ["loc", [null, [18, 42], [18, 87]]]], "action", ["subexpr", "action", ["addPattern", ["get", "newPattern", ["loc", [null, [18, 116], [18, 126]]]]], [], ["loc", [null, [18, 95], [18, 127]]]]], ["loc", [null, [18, 8], [18, 129]]]], ["attribute", "class", ["concat", ["help-block", ["subexpr", "if", [["get", "newPatternCorrect", ["loc", [null, [20, 32], [20, 49]]]], " hide"], [], ["loc", [null, [20, 27], [20, 59]]]]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/save-status", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/save-status.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "first");
            var el2 = dom.createTextNode("Every change you make is automatically saved by Portia");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 12
                },
                "end": {
                  "line": 8,
                  "column": 12
                }
              },
              "moduleName": "portia-ui/templates/components/save-status.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                Saving ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createTextNode(".");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createTextNode(".");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createTextNode(".");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 8,
                    "column": 12
                  },
                  "end": {
                    "line": 10,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/save-status.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                Last saved ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "timeSinceLastSave", ["loc", [null, [9, 27], [9, 48]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 12
                  },
                  "end": {
                    "line": 12,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/save-status.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                Changes are saved automatically\n            ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 12
                },
                "end": {
                  "line": 12,
                  "column": 12
                }
              },
              "moduleName": "portia-ui/templates/components/save-status.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "timeSinceLastSave", ["loc", [null, [8, 22], [8, 39]]]]], [], 0, 1, ["loc", [null, [8, 12], [12, 12]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/save-status.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element0, 'id');
            morphs[1] = dom.createAttrMorph(element0, 'class');
            morphs[2] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "id", ["concat", ["label-", ["get", "elementId", ["loc", [null, [5, 26], [5, 35]]]]]]], ["attribute", "class", ["concat", ["label label-", ["get", "labelColorClass", ["loc", [null, [5, 60], [5, 75]]]]]]], ["block", "if", [["get", "isSaving", ["loc", [null, [6, 18], [6, 26]]]]], [], 0, 1, ["loc", [null, [6, 12], [12, 19]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/save-status.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "tooltip.section", ["loc", [null, [2, 14], [2, 29]]]], "tooltip"], [], ["loc", [null, [2, 10], [2, 40]]]]], [], 0, 1, ["loc", [null, [2, 4], [14, 11]]]]],
        locals: ["tooltip"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/save-status.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tooltip-container", [], ["tooltipFor", ["subexpr", "concat", ["label-", ["get", "elementId", ["loc", [null, [1, 49], [1, 58]]]]], [], ["loc", [null, [1, 32], [1, 59]]]], "tooltipContainer", "body"], 0, null, ["loc", [null, [1, 0], [15, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/schema-structure-listing", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 6,
                      "column": 16
                    },
                    "end": {
                      "line": 19,
                      "column": 16
                    }
                  },
                  "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    Fields\n                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("p");
                  var el2 = dom.createTextNode("\n                        A field describes the type of a value that you want to extract.\n                    ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("p");
                  var el2 = dom.createTextNode("\n                        Sample pages map the elements of a web page to the individual fields of a\n                        data format.\n                    ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("p");
                  var el2 = dom.createTextNode("\n                        You can create fields in advance, but you can also create them later, while\n                        annotating the data on a web page.\n                    ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 12
                  },
                  "end": {
                    "line": 20,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                Fields\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "help-icon", [], [], 0, null, ["loc", [null, [6, 16], [19, 30]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 12
                  },
                  "end": {
                    "line": 23,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "list-item-icon", [], ["id", "add-field-button", "icon", "add", "action", ["subexpr", "action", ["addField"], [], ["loc", [null, [22, 73], [22, 92]]]]], ["loc", [null, [22, 16], [22, 94]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 24,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-item-text", [], ["class", "title"], 0, null, ["loc", [null, [4, 12], [20, 31]]]], ["block", "tooltip-container", [], ["tooltipFor", "add-field-button", "text", "Add field", "tooltipContainer", "body"], 1, null, ["loc", [null, [21, 12], [23, 34]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 26,
                        "column": 16
                      },
                      "end": {
                        "line": 28,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                    This data format has no fields\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() {
                    return [];
                  },
                  statements: [],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 25,
                      "column": 12
                    },
                    "end": {
                      "line": 29,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "list-item-text", [], ["class", "text-center"], 0, null, ["loc", [null, [26, 16], [28, 35]]]]],
                locals: ["options"],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 36,
                            "column": 24
                          },
                          "end": {
                            "line": 38,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            Change field type\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes() {
                        return [];
                      },
                      statements: [],
                      locals: [],
                      templates: []
                    };
                  })();
                  var child1 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 39,
                            "column": 24
                          },
                          "end": {
                            "line": 41,
                            "column": 24
                          }
                        },
                        "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                            ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(1);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "list-item-icon", [], ["icon", "options"], ["loc", [null, [40, 28], [40, 61]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 32,
                          "column": 20
                        },
                        "end": {
                          "line": 43,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(6);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                      morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                      morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                      morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
                      morphs[5] = dom.createMorphAt(fragment, 10, 10, contextualElement);
                      return morphs;
                    },
                    statements: [["content", "indentation-spacer", ["loc", [null, [33, 24], [33, 46]]]], ["inline", "list-item-icon", [], ["icon", ["subexpr", "@mut", [["get", "field.type", ["loc", [null, [34, 46], [34, 56]]]]], [], []]], ["loc", [null, [34, 24], [34, 58]]]], ["inline", "list-item-editable", [], ["value", ["subexpr", "mut", [["get", "field.name", ["loc", [null, [35, 56], [35, 66]]]]], [], ["loc", [null, [35, 51], [35, 67]]]], "editing", ["subexpr", "mut", [["get", "field.new", ["loc", [null, [35, 81], [35, 90]]]]], [], ["loc", [null, [35, 76], [35, 91]]]], "onChange", ["subexpr", "action", ["saveField", ["get", "field", ["loc", [null, [35, 121], [35, 126]]]]], [], ["loc", [null, [35, 101], [35, 127]]]], "validate", ["subexpr", "action", ["validateFieldName", ["get", "field", ["loc", [null, [35, 165], [35, 170]]]]], [], ["loc", [null, [35, 137], [35, 171]]]]], ["loc", [null, [35, 24], [35, 173]]]], ["block", "list-item-field-type", [], ["field", ["subexpr", "@mut", [["get", "field", ["loc", [null, [36, 54], [36, 59]]]]], [], []]], 0, null, ["loc", [null, [36, 24], [38, 49]]]], ["block", "link-to", ["projects.project.schema.field.options", ["get", "field", ["loc", [null, [39, 75], [39, 80]]]]], ["bubbles", false, "class", "ignore-active"], 1, null, ["loc", [null, [39, 24], [41, 36]]]], ["inline", "list-item-icon", [], ["icon", "remove", "disabled", ["subexpr", "not", [["subexpr", "not", [["get", "field.annotations.length", ["loc", [null, [42, 74], [42, 98]]]]], [], ["loc", [null, [42, 69], [42, 99]]]]], [], ["loc", [null, [42, 64], [42, 100]]]], "action", ["subexpr", "action", ["removeField", ["get", "field", ["loc", [null, [42, 130], [42, 135]]]]], [], ["loc", [null, [42, 108], [42, 136]]]], "bubbles", false], ["loc", [null, [42, 24], [42, 152]]]]],
                    locals: [],
                    templates: [child0, child1]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 31,
                        "column": 16
                      },
                      "end": {
                        "line": 44,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "link-to", ["projects.project.schema.field", ["get", "field", ["loc", [null, [32, 63], [32, 68]]]]], [], 0, null, ["loc", [null, [32, 20], [43, 32]]]]],
                  locals: ["options"],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 30,
                      "column": 12
                    },
                    "end": {
                      "line": 45,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "tree-list-item", [], [], 0, null, ["loc", [null, [31, 16], [44, 35]]]]],
                locals: ["field"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 24,
                    "column": 8
                  },
                  "end": {
                    "line": 46,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "tree-list-item", [], ["hide", ["subexpr", "or", [["get", "schema.fields.isPending", ["loc", [null, [25, 39], [25, 62]]]], ["get", "schema.fields.length", ["loc", [null, [25, 63], [25, 83]]]]], [], ["loc", [null, [25, 35], [25, 84]]]]], 0, null, ["loc", [null, [25, 12], [29, 31]]]], ["block", "each", [["get", "schema.fields", ["loc", [null, [30, 20], [30, 33]]]]], [], 1, null, ["loc", [null, [30, 12], [45, 21]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 8
                },
                "end": {
                  "line": 46,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [24, 22], [24, 37]]]], "subtrees"], [], ["loc", [null, [24, 18], [24, 49]]]]], [], 0, null, ["loc", [null, [24, 8], [46, 8]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 47,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [3, 18], [3, 33]]]], "item"], [], ["loc", [null, [3, 14], [3, 41]]]]], [], 0, 1, ["loc", [null, [3, 8], [46, 15]]]]],
          locals: ["options"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tree-list-item", [], ["hasChildren", true], 0, null, ["loc", [null, [2, 4], [47, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/schema-structure-listing.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tree-list", [], [], 0, null, ["loc", [null, [1, 0], [48, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/scrapinghub-links", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/scrapinghub-links.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("li");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "http://portia.readthedocs.org/en/2.0-docs/");
        dom.setAttribute(el2, "target", "_blank");
        var el3 = dom.createTextNode("\n        Portia 2.0 Documentation\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/select-box", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 16
                },
                "end": {
                  "line": 18,
                  "column": 16
                }
              },
              "moduleName": "portia-ui/templates/components/select-box.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "get", [["get", "viewValue", ["loc", [null, [17, 26], [17, 35]]]], ["get", "valueAttribute", ["loc", [null, [17, 36], [17, 50]]]]], [], ["loc", [null, [17, 20], [17, 52]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 16
                },
                "end": {
                  "line": 20,
                  "column": 16
                }
              },
              "moduleName": "portia-ui/templates/components/select-box.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "viewValue", ["loc", [null, [19, 20], [19, 33]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 24,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/select-box.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "aria-haspopup", "true");
            dom.setAttribute(el1, "aria-expanded", "true");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "value");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "caret");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(5);
            morphs[0] = dom.createAttrMorph(element0, 'id');
            morphs[1] = dom.createAttrMorph(element0, 'class');
            morphs[2] = dom.createAttrMorph(element0, 'name');
            morphs[3] = dom.createElementMorph(element0);
            morphs[4] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
            return morphs;
          },
          statements: [["attribute", "id", ["concat", [["get", "inputId", ["loc", [null, [14, 18], [14, 25]]]]]]], ["attribute", "class", ["concat", ["btn btn-default form-control dropdown-toggle ", ["subexpr", "if", [["get", "buttonClass", ["loc", [null, [14, 86], [14, 97]]]], ["get", "buttonClass", ["loc", [null, [14, 98], [14, 109]]]]], [], ["loc", [null, [14, 81], [14, 111]]]], " ", ["subexpr", "if", [["get", "isDisabled", ["loc", [null, [14, 117], [14, 127]]]], "disabled"], [], ["loc", [null, [14, 112], [14, 140]]]]]]], ["attribute", "name", ["get", "name", ["loc", [null, [14, 163], [14, 167]]]]], ["element", "action", [["get", "widget.toggleMenu", ["loc", [null, [14, 221], [14, 238]]]], "button"], [], ["loc", [null, [14, 212], [14, 249]]]], ["block", "if", [["get", "valueAttribute", ["loc", [null, [16, 22], [16, 36]]]]], [], 0, 1, ["loc", [null, [16, 16], [20, 23]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 25,
                    "column": 8
                  },
                  "end": {
                    "line": 27,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/select-box.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "yield", [["subexpr", "hash", [], ["menu", ["get", "widget.menu", ["loc", [null, [26, 31], [26, 42]]]], "header", ["get", "widget.header", ["loc", [null, [26, 50], [26, 63]]]], "item", ["get", "widget.item", ["loc", [null, [26, 69], [26, 80]]]], "divider", ["get", "widget.divider", ["loc", [null, [26, 89], [26, 103]]]], "setValue", ["subexpr", "action", ["setValue"], [], ["loc", [null, [26, 113], [26, 132]]]], "setViewValue", ["subexpr", "action", ["setViewValue"], [], ["loc", [null, [26, 146], [26, 169]]]], "setValueAndClose", ["subexpr", "action", ["setValueAndClose"], [], ["loc", [null, [26, 187], [26, 214]]]], "closeMenu", ["get", "widget.closeMenu", ["loc", [null, [26, 225], [26, 241]]]]], ["loc", [null, [26, 20], [26, 242]]]]], [], ["loc", [null, [26, 12], [26, 244]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 30,
                          "column": 20
                        },
                        "end": {
                          "line": 32,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/select-box.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      return morphs;
                    },
                    statements: [["inline", "get", [["get", "choice", ["loc", [null, [31, 30], [31, 36]]]], ["get", "valueAttribute", ["loc", [null, [31, 37], [31, 51]]]]], [], ["loc", [null, [31, 24], [31, 53]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 32,
                          "column": 20
                        },
                        "end": {
                          "line": 34,
                          "column": 20
                        }
                      },
                      "moduleName": "portia-ui/templates/components/select-box.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                        ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      return morphs;
                    },
                    statements: [["content", "choice", ["loc", [null, [33, 24], [33, 34]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 29,
                        "column": 16
                      },
                      "end": {
                        "line": 35,
                        "column": 16
                      }
                    },
                    "moduleName": "portia-ui/templates/components/select-box.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "valueAttribute", ["loc", [null, [30, 26], [30, 40]]]]], [], 0, 1, ["loc", [null, [30, 20], [34, 27]]]]],
                  locals: [],
                  templates: [child0, child1]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 28,
                      "column": 12
                    },
                    "end": {
                      "line": 36,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/components/select-box.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "widget.item", [], ["value", ["subexpr", "@mut", [["get", "choice", ["loc", [null, [29, 37], [29, 43]]]]], [], []], "action", ["subexpr", "action", ["setValueAndClose", ["get", "choice", ["loc", [null, [29, 78], [29, 84]]]]], [], ["loc", [null, [29, 51], [29, 85]]]]], 0, null, ["loc", [null, [29, 16], [35, 32]]]]],
                locals: ["choice"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 8
                  },
                  "end": {
                    "line": 37,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/select-box.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "choices", ["loc", [null, [28, 20], [28, 27]]]]], [], 0, null, ["loc", [null, [28, 12], [36, 21]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 4
                },
                "end": {
                  "line": 38,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/select-box.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [25, 14], [25, 22]]]]], [], 0, 1, ["loc", [null, [25, 8], [37, 15]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 4
              },
              "end": {
                "line": 38,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/select-box.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "widget.section", ["loc", [null, [24, 18], [24, 32]]]], "menu"], [], ["loc", [null, [24, 14], [24, 40]]]]], [], 0, null, ["loc", [null, [24, 4], [38, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/select-box.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "widget.section", ["loc", [null, [13, 14], [13, 28]]]], "widget"], [], ["loc", [null, [13, 10], [13, 38]]]]], [], 0, 1, ["loc", [null, [13, 4], [38, 11]]]]],
        locals: ["widget"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/select-box.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "dropdown-widget", [], ["class", "select-box", "open", ["subexpr", "mut", [["get", "open", ["loc", [null, [3, 12], [3, 16]]]]], [], ["loc", [null, [3, 7], [3, 17]]]], "active", ["subexpr", "mut", [["get", "viewValue", ["loc", [null, [4, 14], [4, 23]]]]], [], ["loc", [null, [4, 9], [4, 24]]]], "focused", ["subexpr", "@mut", [["get", "value", ["loc", [null, [5, 10], [5, 15]]]]], [], []], "menuContainer", ["subexpr", "@mut", [["get", "menuContainer", ["loc", [null, [6, 16], [6, 29]]]]], [], []], "menuClass", ["subexpr", "@mut", [["get", "menuClass", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "menuAlign", ["subexpr", "@mut", [["get", "menuAlign", ["loc", [null, [8, 12], [8, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [9, 13], [9, 23]]]]], [], []], "onClick", ["subexpr", "action", ["menuClicked"], [], ["loc", [null, [10, 10], [10, 32]]]], "onClose", ["subexpr", "action", ["menuClosed"], [], ["loc", [null, [11, 10], [11, 31]]]]], 0, null, ["loc", [null, [1, 0], [39, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/show-links-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "modifiers",
            "modifiers": ["action"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/show-links-button.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "id", "show-links-button");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'disabled');
          morphs[2] = dom.createElementMorph(element0);
          morphs[3] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["btn btn-default ", ["subexpr", "if", [["get", "spider.showLinks", ["loc", [null, [2, 63], [2, 79]]]], "active"], [], ["loc", [null, [2, 58], [2, 90]]]]]]], ["attribute", "disabled", ["get", "disableLinks", ["loc", [null, [2, 103], [2, 115]]]]], ["element", "action", ["toggleShowLinks"], [], ["loc", [null, [2, 118], [2, 146]]]], ["inline", "icon-button", [], ["icon", "link"], ["loc", [null, [3, 8], [3, 35]]]]],
        locals: ["options"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/show-links-button.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tooltip-container", [], ["tooltipFor", "show-links-button", "text", "Toggle link highlighting", "tooltipContainer", "body"], 0, null, ["loc", [null, [1, 0], [5, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/show-links-legend", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/show-links-legend.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        Followed\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "list-item-badge", [], ["value", ["subexpr", "@mut", [["get", "followedLinks", ["loc", [null, [3, 32], [3, 45]]]]], [], []], "color", ["subexpr", "@mut", [["get", "colors.green", ["loc", [null, [3, 52], [3, 64]]]]], [], []]], ["loc", [null, [3, 8], [3, 66]]]]],
          locals: ["options"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/show-links-legend.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        Followed when Javascript is enabled\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "list-item-badge", [], ["value", ["subexpr", "@mut", [["get", "jsLinks", ["loc", [null, [7, 32], [7, 39]]]]], [], []], "color", ["subexpr", "@mut", [["get", "colors.blue", ["loc", [null, [7, 46], [7, 57]]]]], [], []]], ["loc", [null, [7, 8], [7, 59]]]]],
          locals: ["options"],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/show-links-legend.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n        Not Followed\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "list-item-badge", [], ["value", ["subexpr", "@mut", [["get", "ignoredLinks", ["loc", [null, [11, 32], [11, 44]]]]], [], []], "color", ["subexpr", "@mut", [["get", "colors.red", ["loc", [null, [11, 51], [11, 61]]]]], [], []]], ["loc", [null, [11, 8], [11, 63]]]]],
          locals: ["options"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/show-links-legend.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tree-list-item", [], [], 0, null, ["loc", [null, [2, 4], [5, 23]]]], ["block", "tree-list-item", [], [], 1, null, ["loc", [null, [6, 4], [9, 23]]]], ["block", "tree-list-item", [], [], 2, null, ["loc", [null, [10, 4], [13, 23]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/show-links-legend.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tree-list", [], [], 0, null, ["loc", [null, [1, 0], [14, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/sliding-main", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/sliding-main.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/spider-indentation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/spider-indentation.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "indentation-spacer", ["loc", [null, [1, 0], [1, 22]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/spider-message", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/spider-message.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "list-item-icon", [], ["id", "run-spider-button", "icon", "play", "action", ["subexpr", "action", ["trainSpider", ["get", "currentSpider", ["loc", [null, [3, 89], [3, 102]]]]], [], ["loc", [null, [3, 67], [3, 103]]]]], ["loc", [null, [3, 8], [3, 105]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/spider-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tooltip-container", [], ["tooltipFor", "run-spider-button", "text", "Train this spider.", "tooltipContainer", "body"], 0, null, ["loc", [null, [2, 4], [4, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/spider-message.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasSpider", ["loc", [null, [1, 6], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/spider-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/spider-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("Enable Javascript for URLs that match these patterns");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("Disable Javascript for URLs that match these patterns");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          return morphs;
        },
        statements: [["inline", "regex-pattern-list", [], ["list", ["subexpr", "@mut", [["get", "spider.jsEnablePatterns", ["loc", [null, [26, 34], [26, 57]]]]], [], []], "onChange", ["subexpr", "action", ["save"], [], ["loc", [null, [26, 67], [26, 82]]]]], ["loc", [null, [26, 8], [26, 84]]]], ["inline", "regex-pattern-list", [], ["list", ["subexpr", "@mut", [["get", "spider.jsDisablePatterns", ["loc", [null, [28, 34], [28, 58]]]]], [], []], "onChange", ["subexpr", "action", ["save"], [], ["loc", [null, [28, 68], [28, 83]]]]], ["loc", [null, [28, 8], [28, 85]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 52,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/spider-options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "for", "loginUrl");
          var el3 = dom.createTextNode("Login URL");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "for", "loginUser");
          var el3 = dom.createTextNode("Username");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "form-group");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          dom.setAttribute(el2, "for", "loginPassword");
          var el3 = dom.createTextNode("Password");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 3, 3);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 3, 3);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "url", "class", "form-control", "id", "loginUrl", "value", ["subexpr", "mut", [["get", "spider.loginUrl", ["loc", [null, [42, 77], [42, 92]]]]], [], ["loc", [null, [42, 72], [42, 93]]]]], ["loc", [null, [42, 12], [42, 95]]]], ["inline", "input", [], ["type", "text", "class", "form-control", "id", "loginUser", "value", ["subexpr", "mut", [["get", "spider.loginUser", ["loc", [null, [46, 79], [46, 95]]]]], [], ["loc", [null, [46, 74], [46, 96]]]]], ["loc", [null, [46, 12], [46, 98]]]], ["inline", "input", [], ["type", "text", "class", "form-control", "id", "loginPassword", "value", ["subexpr", "mut", [["get", "spider.loginPassword", ["loc", [null, [50, 83], [50, 103]]]]], [], ["loc", [null, [50, 78], [50, 104]]]]], ["loc", [null, [50, 12], [50, 106]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 54,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/spider-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Country");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "form-group");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Local Images");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "checkbox");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Local Images\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Javascript support");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "checkbox");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Enable Javascript\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Initialization");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "checkbox");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(" Perform login\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(fragment, [6]);
        var element2 = dom.childAt(fragment, [10]);
        var element3 = dom.childAt(fragment, [14]);
        var morphs = new Array(10);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[2] = dom.createElementMorph(element1);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [1, 1]), 1, 1);
        morphs[4] = dom.createElementMorph(element2);
        morphs[5] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[6] = dom.createMorphAt(element2, 3, 3);
        morphs[7] = dom.createElementMorph(element3);
        morphs[8] = dom.createMorphAt(dom.childAt(element3, [1, 1]), 1, 1);
        morphs[9] = dom.createMorphAt(element3, 3, 3);
        return morphs;
      },
      statements: [["element", "action", ["save"], ["on", "change"], ["loc", [null, [2, 6], [2, 35]]]], ["inline", "list-item-country", [], ["spider", ["subexpr", "@mut", [["get", "spider", ["loc", [null, [4, 35], [4, 41]]]]], [], []]], ["loc", [null, [4, 8], [4, 43]]]], ["element", "action", ["save"], ["on", "change"], ["loc", [null, [9, 6], [9, 35]]]], ["inline", "input", [], ["type", "checkbox", "name", "localImages", "checked", ["subexpr", "mut", [["get", "spider.local_images", ["loc", [null, [12, 68], [12, 87]]]]], [], ["loc", [null, [12, 63], [12, 88]]]]], ["loc", [null, [12, 12], [12, 90]]]], ["element", "action", ["save"], ["on", "change"], ["loc", [null, [18, 6], [18, 35]]]], ["inline", "input", [], ["type", "checkbox", "name", "jsEnabled", "checked", ["subexpr", "mut", [["get", "spider.jsEnabled", ["loc", [null, [21, 66], [21, 82]]]]], [], ["loc", [null, [21, 61], [21, 83]]]]], ["loc", [null, [21, 12], [21, 85]]]], ["block", "if", [["get", "spider.jsEnabled", ["loc", [null, [24, 10], [24, 26]]]]], [], 0, null, ["loc", [null, [24, 4], [29, 11]]]], ["element", "action", ["save"], ["on", "change"], ["loc", [null, [33, 6], [33, 35]]]], ["inline", "input", [], ["type", "checkbox", "name", "performLogin", "checked", ["subexpr", "mut", [["get", "spider.performLogin", ["loc", [null, [36, 69], [36, 88]]]]], [], ["loc", [null, [36, 64], [36, 89]]]]], ["loc", [null, [36, 12], [36, 91]]]], ["block", "if", [["get", "spider.performLogin", ["loc", [null, [39, 10], [39, 29]]]]], [], 1, null, ["loc", [null, [39, 4], [52, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/spider-structure-listing",["exports"],function(exports){exports["default"] = Ember.HTMLBars.template((function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":6,"column":16},"end":{"line":21,"column":16}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                    Start Pages\n                    ");dom.appendChild(el0,el1);var el1=dom.createElement("p");var el2=dom.createTextNode("\n                        Start pages are web pages that a spider will begin its crawl from. It will\n                        then continue to other web pages according to the defined link crawling\n                        rules.\n                    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                    ");dom.appendChild(el0,el1);var el1=dom.createElement("p");var el2=dom.createTextNode("\n                        Start pages also restrict the domains that a spider will crawl. A spider\n                        will never follow a link that goes to a domain not included in the start\n                        pages.\n                    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                    ");dom.appendChild(el0,el1);var el1=dom.createElement("p");var el2=dom.createTextNode("\n                        Without a start page the spider cannot begin crawling.\n                    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":4,"column":12},"end":{"line":22,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                Start Pages\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","help-icon",[],[],0,null,["loc",[null,[6,16],[21,30]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":25,"column":20},"end":{"line":28,"column":20}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);return morphs;},statements:[["inline","list-item-icon",[],["class","icon","icon","url"],["loc",[null,[27,24],[27,66]]]],["content","value",["loc",[null,[27,66],[27,75]]]]],locals:["value"],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":29,"column":20},"end":{"line":31,"column":20}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);return morphs;},statements:[["inline","list-item-icon",[],["class","icon","icon","url-generated"],["loc",[null,[30,24],[30,76]]]],["content","value",["loc",[null,[30,76],[30,85]]]]],locals:["value"],templates:[]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":32,"column":20},"end":{"line":35,"column":20}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);return morphs;},statements:[["inline","list-item-icon",[],["class","icon","icon","url-feed"],["loc",[null,[34,24],[34,71]]]],["content","value",["loc",[null,[34,71],[34,80]]]]],locals:["value"],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":24,"column":16},"end":{"line":36,"column":16}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(3);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","options.item",[],["value","Add fixed URL","action",["subexpr","chain-actions",[["subexpr","action",[["get","closeOptions",["loc",[null,[26,52],[26,64]]]]],[],["loc",[null,[26,44],[26,65]]]],["subexpr","action",["addStartUrl"],[],["loc",[null,[26,66],[26,88]]]],["get","options.closeMenu",["loc",[null,[26,89],[26,106]]]]],[],["loc",[null,[26,29],[26,107]]]]],0,null,["loc",[null,[25,20],[28,37]]]],["block","options.item",[],["value","Add generation URL","action",["subexpr","chain-actions",[["subexpr","action",["addGenerationUrl"],[],["loc",[null,[29,85],[29,112]]]],["get","options.closeMenu",["loc",[null,[29,113],[29,130]]]]],[],["loc",[null,[29,70],[29,131]]]]],1,null,["loc",[null,[29,20],[31,37]]]],["block","options.item",[],["value","Add feed URL","action",["subexpr","chain-actions",[["subexpr","action",[["get","closeOptions",["loc",[null,[33,52],[33,64]]]]],[],["loc",[null,[33,44],[33,65]]]],["subexpr","action",["addFeedUrl"],[],["loc",[null,[33,66],[33,87]]]],["get","options.closeMenu",["loc",[null,[33,88],[33,105]]]]],[],["loc",[null,[33,29],[33,106]]]]],2,null,["loc",[null,[32,20],[35,37]]]]],locals:["options"],templates:[child0,child1,child2]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":23,"column":12},"end":{"line":37,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","list-item-icon-menu",[],["icon","add-dropdown"],0,null,["loc",[null,[24,16],[36,40]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":3,"column":8},"end":{"line":38,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","list-item-text",[],["class","title"],0,null,["loc",[null,[4,12],[22,31]]]],["block","tooltip-container",[],["tooltipFor","add-start-url-button","text","Start crawling from the current page","tooltipContainer","body"],1,null,["loc",[null,[23,12],[37,34]]]]],locals:[],templates:[child0,child1]};})();var child1=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":40,"column":16},"end":{"line":42,"column":16}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                    This spider has no start pages\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":39,"column":12},"end":{"line":43,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","list-item-text",[],["class","text-center"],0,null,["loc",[null,[40,16],[42,35]]]]],locals:["options"],templates:[child0]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":44,"column":12},"end":{"line":50,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","alert alert-warning");dom.setAttribute(el1,"role","alert");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("p");var el3=dom.createTextNode("\n                        A spider needs at least one start page to start crawling from.\n                    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:["options"],templates:[]};})();var child2=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":52,"column":16},"end":{"line":59,"column":16}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                    ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","component",[["get","startUrl.componentName",["loc",[null,[53,32],[53,54]]]]],["index",["subexpr","@mut",[["get","index",["loc",[null,[54,32],[54,37]]]]],[],[]],"spider",["subexpr","@mut",[["get","spider",["loc",[null,[55,33],[55,39]]]]],[],[]],"startUrl",["subexpr","@mut",[["get","startUrl",["loc",[null,[56,35],[56,43]]]]],[],[]],"removeStartUrl",["subexpr","action",["removeStartUrl",["get","startUrl",["loc",[null,[57,66],[57,74]]]]],[],["loc",[null,[57,41],[57,75]]]]],["loc",[null,[53,20],[58,22]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":51,"column":12},"end":{"line":60,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:2,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","or",[["subexpr","not",[["get","newUrl",["loc",[null,[52,31],[52,37]]]]],[],["loc",[null,[52,26],[52,38]]]],["subexpr","not-eq",[["get","urlValue",["loc",[null,[52,47],[52,55]]]],["get","startUrl.url",["loc",[null,[52,56],[52,68]]]]],[],["loc",[null,[52,39],[52,69]]]]],[],["loc",[null,[52,22],[52,70]]]]],[],0,null,["loc",[null,[52,16],[59,23]]]]],locals:["startUrl","index"],templates:[child0]};})();var child3=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":61,"column":12},"end":{"line":69,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","project-structure-spider-url",[],["spider",["subexpr","@mut",[["get","spider",["loc",[null,[63,25],[63,31]]]]],[],[]],"startUrl",["subexpr","@mut",[["get","newStartUrl",["loc",[null,[64,27],[64,38]]]]],[],[]],"url",["subexpr","@mut",[["get","urlValue",["loc",[null,[65,22],[65,30]]]]],[],[]],"urlAdded",["subexpr","mut",[["get","newUrl",["loc",[null,[66,32],[66,38]]]]],[],["loc",[null,[66,27],[66,39]]]],"removeStartUrl",["subexpr","action",["removeStartUrl",["get","newUrl",["loc",[null,[67,58],[67,64]]]]],[],["loc",[null,[67,33],[67,65]]]]],["loc",[null,[62,16],[68,18]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":38,"column":8},"end":{"line":70,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(4);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);morphs[3] = dom.createMorphAt(fragment,3,3,contextualElement);dom.insertBoundary(fragment,0);return morphs;},statements:[["block","tree-list-item",[],["hide",["subexpr","@mut",[["get","spider.startUrls.length",["loc",[null,[39,35],[39,58]]]]],[],[]]],0,null,["loc",[null,[39,12],[43,31]]]],["block","tree-list-item",[],["hide",["subexpr","@mut",[["get","spider.startUrls.length",["loc",[null,[44,35],[44,58]]]]],[],[]],"class","help"],1,null,["loc",[null,[44,12],[50,31]]]],["block","each",[["get","spider.startUrls",["loc",[null,[51,20],[51,36]]]]],["key","@index"],2,null,["loc",[null,[51,12],[60,21]]]],["block","if",[["get","newUrl",["loc",[null,[61,18],[61,24]]]]],[],3,null,["loc",[null,[61,12],[69,19]]]]],locals:[],templates:[child0,child1,child2,child3]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":38,"column":8},"end":{"line":70,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","eq",[["get","options.section",["loc",[null,[38,22],[38,37]]]],"subtrees"],[],["loc",[null,[38,18],[38,49]]]]],[],0,null,["loc",[null,[38,8],[70,8]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":2,"column":4},"end":{"line":71,"column":4}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","eq",[["get","options.section",["loc",[null,[3,18],[3,33]]]],"item"],[],["loc",[null,[3,14],[3,41]]]]],[],0,1,["loc",[null,[3,8],[70,15]]]]],locals:["options"],templates:[child0,child1]};})();return {meta:{"fragmentReason":{"name":"missing-wrapper","problems":["wrong-type"]},"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":72,"column":0}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","tree-list-item",[],["hasChildren",true],0,null,["loc",[null,[2,4],[71,23]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":77,"column":12},"end":{"line":79,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                Link Crawling\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":76,"column":8},"end":{"line":80,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","list-item-text",[],["class","title"],0,null,["loc",[null,[77,12],[79,31]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":87,"column":24},"end":{"line":89,"column":24}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                            ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","list-item-icon",[],["icon","options"],["loc",[null,[88,28],[88,61]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":86,"column":20},"end":{"line":90,"column":20}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","link-to",["projects.project.spider.link-options"],["bubbles",false,"class","ignore-active"],0,null,["loc",[null,[87,24],[89,36]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":85,"column":16},"end":{"line":91,"column":16}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","link-to",["projects.project.spider"],["bubbles",false],0,null,["loc",[null,[86,20],[90,32]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":81,"column":12},"end":{"line":92,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(4);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","indentation-spacer",["loc",[null,[82,16],[82,38]]]],["inline","list-item-icon",[],["icon","link"],["loc",[null,[83,16],[83,46]]]],["inline","list-item-link-crawling",[],["spider",["subexpr","@mut",[["get","spider",["loc",[null,[84,49],[84,55]]]]],[],[]]],["loc",[null,[84,16],[84,57]]]],["block","if",[["subexpr","not-eq",[["get","spider.linksToFollow",["loc",[null,[85,30],[85,50]]]],"none"],[],["loc",[null,[85,22],[85,58]]]]],[],0,null,["loc",[null,[85,16],[91,23]]]]],locals:["options"],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":80,"column":8},"end":{"line":93,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);return morphs;},statements:[["block","tree-list-item",[],[],0,null,["loc",[null,[81,12],[92,31]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":80,"column":8},"end":{"line":93,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","eq",[["get","options.section",["loc",[null,[80,22],[80,37]]]],"subtrees"],[],["loc",[null,[80,18],[80,49]]]]],[],0,null,["loc",[null,[80,8],[93,8]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":75,"column":4},"end":{"line":94,"column":4}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","eq",[["get","options.section",["loc",[null,[76,18],[76,33]]]],"item"],[],["loc",[null,[76,14],[76,41]]]]],[],0,1,["loc",[null,[76,8],[93,15]]]]],locals:["options"],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":74,"column":0},"end":{"line":95,"column":0}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","tree-list-item",[],["hasChildren",true],0,null,["loc",[null,[75,4],[94,23]]]]],locals:[],templates:[child0]};})();var child2=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":100,"column":12},"end":{"line":102,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                Language\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":99,"column":8},"end":{"line":103,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","list-item-text",[],["class","title"],0,null,["loc",[null,[100,12],[102,31]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":110,"column":24},"end":{"line":112,"column":24}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                            ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","list-item-icon",[],["icon","options"],["loc",[null,[111,28],[111,61]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":109,"column":20},"end":{"line":113,"column":20}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","link-to",["projects.project.spider.language-options"],["bubbles",false,"class","ignore-active"],0,null,["loc",[null,[110,24],[112,36]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":108,"column":16},"end":{"line":114,"column":16}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","link-to",["projects.project.spider"],["bubbles",false],0,null,["loc",[null,[109,20],[113,32]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":104,"column":12},"end":{"line":115,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(4);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","indentation-spacer",["loc",[null,[105,16],[105,38]]]],["inline","list-item-icon",[],["icon","options"],["loc",[null,[106,16],[106,49]]]],["inline","list-item-language",[],["spider",["subexpr","@mut",[["get","spider",["loc",[null,[107,44],[107,50]]]]],[],[]]],["loc",[null,[107,16],[107,52]]]],["block","if",[["get","spider.useLanguageConfig",["loc",[null,[108,22],[108,46]]]]],[],0,null,["loc",[null,[108,16],[114,23]]]]],locals:["options"],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":103,"column":8},"end":{"line":116,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);return morphs;},statements:[["block","tree-list-item",[],[],0,null,["loc",[null,[104,12],[115,31]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":103,"column":8},"end":{"line":116,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","eq",[["get","options.section",["loc",[null,[103,22],[103,37]]]],"subtrees"],[],["loc",[null,[103,18],[103,49]]]]],[],0,null,["loc",[null,[103,8],[116,8]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":98,"column":4},"end":{"line":117,"column":4}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","eq",[["get","options.section",["loc",[null,[99,18],[99,33]]]],"item"],[],["loc",[null,[99,14],[99,41]]]]],[],0,1,["loc",[null,[99,8],[116,15]]]]],locals:["options"],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":97,"column":0},"end":{"line":118,"column":0}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","tree-list-item",[],["hasChildren",true],0,null,["loc",[null,[98,4],[117,23]]]]],locals:[],templates:[child0]};})();var child3=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":123,"column":12},"end":{"line":125,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                Currency\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":122,"column":8},"end":{"line":126,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","list-item-text",[],["class","title"],0,null,["loc",[null,[123,12],[125,31]]]]],locals:[],templates:[child0]};})();var child1=(function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":133,"column":24},"end":{"line":135,"column":24}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                            ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","list-item-icon",[],["icon","options"],["loc",[null,[134,28],[134,61]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":132,"column":20},"end":{"line":136,"column":20}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","link-to",["projects.project.spider.currency-options"],["bubbles",false,"class","ignore-active"],0,null,["loc",[null,[133,24],[135,36]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":131,"column":16},"end":{"line":137,"column":16}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","link-to",["projects.project.spider"],["bubbles",false],0,null,["loc",[null,[132,20],[136,32]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":127,"column":12},"end":{"line":138,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(4);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","indentation-spacer",["loc",[null,[128,16],[128,38]]]],["inline","list-item-icon",[],["icon","options"],["loc",[null,[129,16],[129,49]]]],["inline","list-item-currency",[],["spider",["subexpr","@mut",[["get","spider",["loc",[null,[130,44],[130,50]]]]],[],[]]],["loc",[null,[130,16],[130,52]]]],["block","if",[["get","spider.useCurrencyConfig",["loc",[null,[131,22],[131,46]]]]],[],0,null,["loc",[null,[131,16],[137,23]]]]],locals:["options"],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":126,"column":8},"end":{"line":139,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);return morphs;},statements:[["block","tree-list-item",[],[],0,null,["loc",[null,[127,12],[138,31]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":126,"column":8},"end":{"line":139,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","eq",[["get","options.section",["loc",[null,[126,22],[126,37]]]],"subtrees"],[],["loc",[null,[126,18],[126,49]]]]],[],0,null,["loc",[null,[126,8],[139,8]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":121,"column":4},"end":{"line":140,"column":4}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","eq",[["get","options.section",["loc",[null,[122,18],[122,33]]]],"item"],[],["loc",[null,[122,14],[122,41]]]]],[],0,1,["loc",[null,[122,8],[139,15]]]]],locals:["options"],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":120,"column":0},"end":{"line":141,"column":0}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","tree-list-item",[],["hasChildren",true],0,null,["loc",[null,[121,4],[140,23]]]]],locals:[],templates:[child0]};})();var child4=(function(){var child0=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":147,"column":27},"end":{"line":147,"column":102}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("s");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":149,"column":20},"end":{"line":163,"column":20}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        Sample Pages\n                        ");dom.appendChild(el0,el1);var el1=dom.createElement("p");var el2=dom.createTextNode("\n                            A sample page is a web page with the data you want to extract annotated.\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                        ");dom.appendChild(el0,el1);var el1=dom.createElement("p");var el2=dom.createTextNode("\n                            When the spider crawls to a new web page it finds the sample page that is\n                            the best match, and uses it to extract data.\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                        ");dom.appendChild(el0,el1);var el1=dom.createElement("p");var el2=dom.createTextNode("\n                            If you see a web page that the spider is having trouble extracting data\n                            from, you can create a new sample page from that web page to improve the\n                            extraction.\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":148,"column":16},"end":{"line":164,"column":16}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","help-icon",[],[],0,null,["loc",[null,[149,20],[163,34]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":146,"column":12},"end":{"line":165,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                Sample Page");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","animation-container",[],["class","inline","hide",["subexpr","@mut",[["get","currentSample",["loc",[null,[147,70],[147,83]]]]],[],[]],"setHeight",false],0,null,["loc",[null,[147,27],[147,126]]]],["block","animation-container",[],["class","inline","setHeight",false],1,null,["loc",[null,[148,16],[164,40]]]]],locals:[],templates:[child0,child1]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":166,"column":12},"end":{"line":168,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","list-item-icon",[],["id","add-sample-button","icon","add","disabled",["subexpr","not",[["get","canAddSample",["loc",[null,[167,81],[167,93]]]]],[],["loc",[null,[167,76],[167,94]]]],"action",["subexpr","action",["addSample"],[],["loc",[null,[167,102],[167,122]]]]],["loc",[null,[167,16],[167,124]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":145,"column":8},"end":{"line":169,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","list-item-text",[],["class","title"],0,null,["loc",[null,[146,12],[165,31]]]],["block","tooltip-container",[],["tooltipFor","add-sample-button","text","Create a new sample from the current page","tooltipContainer","body"],1,null,["loc",[null,[166,12],[168,34]]]]],locals:[],templates:[child0,child1]};})();var child1=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":171,"column":16},"end":{"line":173,"column":16}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                    This spider has no sample pages\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":170,"column":12},"end":{"line":174,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","list-item-text",[],["class","text-center"],0,null,["loc",[null,[171,16],[173,35]]]]],locals:["options"],templates:[child0]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":175,"column":12},"end":{"line":182,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","alert alert-info");dom.setAttribute(el1,"role","alert");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("p");var el3=dom.createTextNode("\n                        Navigate to a web page that has the data you need, and create a new sample\n                        page to begin annotating the data.\n                    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:["options"],templates:[]};})();var child2=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":189,"column":24},"end":{"line":191,"column":24}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                            ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","list-item-icon",[],["icon","remove","action",["subexpr","action",["removeSample",["get","sample",["loc",[null,[190,89],[190,95]]]]],[],["loc",[null,[190,66],[190,96]]]],"bubbles",false],["loc",[null,[190,28],[190,112]]]]],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":194,"column":32},"end":{"line":196,"column":32}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                                    ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","list-item-icon",[],["icon","close"],["loc",[null,[195,36],[195,67]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":193,"column":28},"end":{"line":197,"column":28}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","link-to",["projects.project.spider"],["id",["subexpr","concat",["sample-close-button",["subexpr","guid",[["get","sample",["loc",[null,[194,108],[194,114]]]]],[],["loc",[null,[194,102],[194,115]]]]],[],["loc",[null,[194,72],[194,116]]]],"bubbles",false],0,null,["loc",[null,[194,32],[196,44]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":192,"column":24},"end":{"line":198,"column":24}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","tooltip-container",[],["tooltipFor",["subexpr","concat",["sample-close-button",["subexpr","guid",[["get","sample",["loc",[null,[193,96],[193,102]]]]],[],["loc",[null,[193,90],[193,103]]]]],[],["loc",[null,[193,60],[193,104]]]],"text","Close sample","tooltipContainer","body"],0,null,["loc",[null,[193,28],[197,50]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":185,"column":20},"end":{"line":199,"column":20}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n                        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(5);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);morphs[4] = dom.createMorphAt(fragment,8,8,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["content","indentation-spacer",["loc",[null,[186,24],[186,46]]]],["inline","list-item-icon",[],["icon","sample"],["loc",[null,[187,24],[187,56]]]],["inline","list-item-editable",[],["value",["subexpr","mut",[["get","sample.name",["loc",[null,[188,56],[188,67]]]]],[],["loc",[null,[188,51],[188,68]]]],"editing",["subexpr","mut",[["get","sample.new",["loc",[null,[188,82],[188,92]]]]],[],["loc",[null,[188,77],[188,93]]]],"onChange",["subexpr","action",["saveSample",["get","sample",["loc",[null,[188,124],[188,130]]]]],[],["loc",[null,[188,103],[188,131]]]]],["loc",[null,[188,24],[188,133]]]],["block","animation-container",[],["class","icon","setWidth",false,"setHeight",false],0,null,["loc",[null,[189,24],[191,48]]]],["block","animation-container",[],["class","icon","hide",["subexpr","not-eq",[["get","sample",["loc",[null,[192,73],[192,79]]]],["get","currentSample",["loc",[null,[192,80],[192,93]]]]],[],["loc",[null,[192,65],[192,94]]]],"setWidth",false,"setHeight",false],1,null,["loc",[null,[192,24],[198,48]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":184,"column":16},"end":{"line":200,"column":16}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","link-to",["projects.project.spider.sample",["get","sample",["loc",[null,[185,64],[185,70]]]],["subexpr","query-params",[],["url",["get","sample.url",["loc",[null,[185,89],[185,99]]]],"baseurl",null],["loc",[null,[185,71],[185,113]]]]],["current-when","projects.project.spider.sample"],0,null,["loc",[null,[185,20],[199,32]]]]],locals:["options"],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":183,"column":12},"end":{"line":201,"column":12}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","tree-list-item",[],["hide",["subexpr","and",[["get","currentSample",["loc",[null,[184,44],[184,57]]]],["subexpr","not-eq",[["get","sample",["loc",[null,[184,66],[184,72]]]],["get","currentSample",["loc",[null,[184,73],[184,86]]]]],[],["loc",[null,[184,58],[184,87]]]]],[],["loc",[null,[184,39],[184,88]]]]],0,null,["loc",[null,[184,16],[200,35]]]]],locals:["sample"],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":169,"column":8},"end":{"line":202,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(3);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);dom.insertBoundary(fragment,0);return morphs;},statements:[["block","tree-list-item",[],["hide",["subexpr","or",[["get","spider.samples.isPending",["loc",[null,[170,39],[170,63]]]],["get","spider.samples.length",["loc",[null,[170,64],[170,85]]]]],[],["loc",[null,[170,35],[170,86]]]]],0,null,["loc",[null,[170,12],[174,31]]]],["block","tree-list-item",[],["hide",["subexpr","or",[["get","spider.samples.isPending",["loc",[null,[175,39],[175,63]]]],["get","spider.samples.length",["loc",[null,[175,64],[175,85]]]]],[],["loc",[null,[175,35],[175,86]]]],"class","help"],1,null,["loc",[null,[175,12],[182,31]]]],["block","each",[["get","spider.samples",["loc",[null,[183,20],[183,34]]]]],[],2,null,["loc",[null,[183,12],[201,21]]]]],locals:[],templates:[child0,child1,child2]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":169,"column":8},"end":{"line":202,"column":8}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","eq",[["get","options.section",["loc",[null,[169,22],[169,37]]]],"subtrees"],[],["loc",[null,[169,18],[169,49]]]]],[],0,null,["loc",[null,[169,8],[202,8]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":144,"column":4},"end":{"line":203,"column":4}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["subexpr","eq",[["get","options.section",["loc",[null,[145,18],[145,33]]]],"item"],[],["loc",[null,[145,14],[145,41]]]]],[],0,1,["loc",[null,[145,8],[202,15]]]]],locals:["options"],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":143,"column":0},"end":{"line":204,"column":0}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","tree-list-item",[],["hasChildren",true],0,null,["loc",[null,[144,4],[203,23]]]]],locals:[],templates:[child0]};})();var child5=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":207,"column":0},"end":{"line":212,"column":0}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"style","margin: 13px;");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n    ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(2);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);return morphs;},statements:[["inline","list-item-username",[],["spider",["subexpr","@mut",[["get","spider",["loc",[null,[209,36],[209,42]]]]],[],[]]],["loc",[null,[209,8],[209,44]]]],["inline","train-scrapely-button",[],["spider",["subexpr","@mut",[["get","spider",["loc",[null,[211,35],[211,41]]]]],[],[]]],["loc",[null,[211,4],[211,43]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":{"name":"missing-wrapper","problems":["wrong-type","multiple-nodes"]},"revision":"Ember@2.6.2","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":213,"column":0}},"moduleName":"portia-ui/templates/components/spider-structure-listing.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(6);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);morphs[3] = dom.createMorphAt(fragment,6,6,contextualElement);morphs[4] = dom.createMorphAt(fragment,8,8,contextualElement);morphs[5] = dom.createMorphAt(fragment,10,10,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","tree-list",[],["hide",["subexpr","@mut",[["get","currentSample",["loc",[null,[1,18],[1,31]]]]],[],[]]],0,null,["loc",[null,[1,0],[72,14]]]],["block","tree-list",[],["hide",["subexpr","@mut",[["get","currentSample",["loc",[null,[74,18],[74,31]]]]],[],[]]],1,null,["loc",[null,[74,0],[95,14]]]],["block","tree-list",[],["hide",["subexpr","@mut",[["get","currentSample",["loc",[null,[97,18],[97,31]]]]],[],[]]],2,null,["loc",[null,[97,0],[118,14]]]],["block","tree-list",[],["hide",["subexpr","@mut",[["get","currentSample",["loc",[null,[120,18],[120,31]]]]],[],[]]],3,null,["loc",[null,[120,0],[141,14]]]],["block","tree-list",[],[],4,null,["loc",[null,[143,0],[204,14]]]],["block","tree-list",[],["hide",["subexpr","@mut",[["get","currentSample",["loc",[null,[207,18],[207,31]]]]],[],[]]],5,null,["loc",[null,[207,0],[212,14]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5]};})());});
define("portia-ui/templates/components/start-url-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 3,
                  "column": 55
                }
              },
              "moduleName": "portia-ui/templates/components/start-url-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "title", ["loc", [null, [3, 46], [3, 55]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/start-url-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "group.tab", [], ["toolId", "annotation-options"], 0, null, ["loc", [null, [3, 4], [3, 69]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 5,
                    "column": 8
                  },
                  "end": {
                    "line": 11,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/components/start-url-options.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "component", [["get", "startUrl.optionsComponentName", ["loc", [null, [6, 24], [6, 53]]]]], ["spider", ["subexpr", "@mut", [["get", "spider", ["loc", [null, [7, 21], [7, 27]]]]], [], []], "startUrl", ["subexpr", "@mut", [["get", "startUrl", ["loc", [null, [8, 23], [8, 31]]]]], [], []], "saveSpider", ["subexpr", "@mut", [["get", "saveSpider", ["loc", [null, [9, 25], [9, 35]]]]], [], []]], ["loc", [null, [6, 12], [10, 14]]]]],
              locals: ["active"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 12,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/components/start-url-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "group.panel", [], ["class", "extracted-items container-fluid", "toolId", "annotation-options"], 0, null, ["loc", [null, [5, 8], [11, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/start-url-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [4, 18], [4, 31]]]], "panels"], [], ["loc", [null, [4, 14], [4, 41]]]]], [], 0, null, ["loc", [null, [4, 4], [12, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/start-url-options.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [2, 14], [2, 27]]]], "tabs"], [], ["loc", [null, [2, 10], [2, 35]]]]], [], 0, 1, ["loc", [null, [2, 4], [12, 11]]]]],
        locals: ["group"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/start-url-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tool-group", [], ["id", "fragments-options-group", "collapsible", false, "onClose", ["subexpr", "route-action", ["closeOptions"], [], ["loc", [null, [1, 69], [1, 98]]]]], 0, null, ["loc", [null, [1, 0], [13, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('portia-ui/templates/components/tether-dialog', ['exports', 'ember-modal-dialog/templates/components/tether-dialog'], function (exports, _emberModalDialogTemplatesComponentsTetherDialog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberModalDialogTemplatesComponentsTetherDialog['default'];
    }
  });
});
define("portia-ui/templates/components/tool-group", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 12
            },
            "end": {
              "line": 9,
              "column": 12
            }
          },
          "moduleName": "portia-ui/templates/components/tool-group.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "tool-group-collapse");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "caret");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["element", "action", ["toggleCollapsed"], [], ["loc", [null, [6, 47], [6, 75]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 12
            },
            "end": {
              "line": 14,
              "column": 12
            }
          },
          "moduleName": "portia-ui/templates/components/tool-group.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "tool-group-close");
          var el2 = dom.createTextNode("\n                    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["element", "action", ["close"], [], ["loc", [null, [11, 44], [11, 62]]]], ["inline", "icon-button", [], ["icon", "close"], ["loc", [null, [12, 20], [12, 48]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/tool-group.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "tool-group-header");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "nav nav-tabs");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("li");
        dom.setAttribute(el3, "class", "tool-group-icons pull-right");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "tool-group-content");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var element3 = dom.childAt(element2, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element2, 1, 1);
        morphs[1] = dom.createMorphAt(element3, 1, 1);
        morphs[2] = dom.createMorphAt(element3, 2, 2);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "tabs", "group", ["get", "this", ["loc", [null, [3, 43], [3, 47]]]], "tab", ["subexpr", "component", ["tool-tab"], ["group", ["subexpr", "@mut", [["get", "this", ["loc", [null, [3, 80], [3, 84]]]]], [], []]], ["loc", [null, [3, 52], [3, 85]]]], "panel", ["subexpr", "component", ["tool-panel"], ["group", ["subexpr", "@mut", [["get", "this", ["loc", [null, [3, 122], [3, 126]]]]], [], []]], ["loc", [null, [3, 92], [3, 127]]]]], ["loc", [null, [3, 16], [3, 128]]]]], [], ["loc", [null, [3, 8], [3, 130]]]], ["block", "if", [["get", "collapsible", ["loc", [null, [5, 18], [5, 29]]]]], [], 0, null, ["loc", [null, [5, 12], [9, 19]]]], ["block", "if", [["get", "onClose", ["loc", [null, [10, 18], [10, 25]]]]], [], 1, null, ["loc", [null, [10, 12], [14, 19]]]], ["inline", "yield", [["subexpr", "hash", [], ["section", "panels", "group", ["get", "this", ["loc", [null, [19, 41], [19, 45]]]], "tab", ["subexpr", "component", ["tool-tab"], ["group", ["subexpr", "@mut", [["get", "this", ["loc", [null, [19, 78], [19, 82]]]]], [], []]], ["loc", [null, [19, 50], [19, 83]]]], "panel", ["subexpr", "component", ["tool-panel"], ["group", ["subexpr", "@mut", [["get", "this", ["loc", [null, [19, 120], [19, 124]]]]], [], []]], ["loc", [null, [19, 90], [19, 125]]]]], ["loc", [null, [19, 12], [19, 126]]]]], [], ["loc", [null, [19, 4], [19, 128]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/tool-panel", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": false,
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/tool-panel.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "active", ["loc", [null, [2, 12], [2, 18]]]]], [], ["loc", [null, [2, 4], [2, 20]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/tool-tab", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "modifiers",
          "modifiers": ["action"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/tool-tab.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("a");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["selectTab"], [], ["loc", [null, [1, 3], [1, 25]]]], ["inline", "yield", [["get", "active", ["loc", [null, [2, 12], [2, 18]]]]], [], ["loc", [null, [2, 4], [2, 20]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/tooltip-container", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 8
            },
            "end": {
              "line": 7,
              "column": 8
            }
          },
          "moduleName": "portia-ui/templates/components/tooltip-container.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "text", ["loc", [null, [6, 12], [6, 20]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 8
            },
            "end": {
              "line": 9,
              "column": 8
            }
          },
          "moduleName": "portia-ui/templates/components/tooltip-container.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "tooltip"], ["loc", [null, [8, 20], [8, 44]]]]], [], ["loc", [null, [8, 12], [8, 46]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/tooltip-container.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "role", "tooltip");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "tooltip-arrow");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "tooltip-content");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createAttrMorph(element0, 'data-tooltip-id');
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "body"], ["loc", [null, [1, 8], [1, 29]]]]], [], ["loc", [null, [1, 0], [1, 31]]]], ["attribute", "class", ["subexpr", "concat", ["tooltip", ["subexpr", "if", [["get", "tooltipClasses", ["loc", [null, [2, 34], [2, 48]]]], ["subexpr", "concat", [" ", ["get", "tooltipClasses", ["loc", [null, [2, 61], [2, 75]]]]], [], ["loc", [null, [2, 49], [2, 76]]]]], [], ["loc", [null, [2, 30], [2, 77]]]]], [], ["loc", [null, [2, 11], [2, 79]]]]], ["attribute", "data-tooltip-id", ["concat", [["get", "elementId", ["loc", [null, [2, 114], [2, 123]]]]]]], ["block", "if", [["get", "text", ["loc", [null, [5, 14], [5, 18]]]]], [], 0, 1, ["loc", [null, [5, 8], [9, 15]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/tooltip-icon", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/tooltip-icon.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "icon-button", [], ["id", ["subexpr", "@mut", [["get", "elementId", ["loc", [null, [7, 9], [7, 18]]]]], [], []], "icon", ["subexpr", "@mut", [["get", "icon", ["loc", [null, [8, 11], [8, 15]]]]], [], []], "modifyClasses", ["subexpr", "@mut", [["get", "modifyClasses", ["loc", [null, [9, 20], [9, 33]]]]], [], []], "action", ["subexpr", "action", ["onClick"], [], ["loc", [null, [10, 13], [10, 31]]]]], ["loc", [null, [6, 4], [11, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/tooltip-icon.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tooltip-container", [], ["tooltipFor", ["subexpr", "@mut", [["get", "elementId", ["loc", [null, [2, 13], [2, 22]]]]], [], []], "text", ["subexpr", "@mut", [["get", "text", ["loc", [null, [3, 7], [3, 11]]]]], [], []], "tooltipContainer", "body"], 0, null, ["loc", [null, [1, 0], [12, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/components/train-scrapely-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/train-scrapely-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "list-item-spider-train", [], ["action", ["subexpr", "action", ["toggleModal", ["get", "spider", ["loc", [null, [2, 58], [2, 64]]]]], [], ["loc", [null, [2, 36], [2, 65]]]]], ["loc", [null, [2, 4], [2, 67]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/components/train-scrapely-button.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h3");
            dom.setAttribute(el1, "style", "margin:15px;");
            var el2 = dom.createTextNode("Are you sure you want to train this spider?");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "style", "margin: auto; text-align: center;");
            var el2 = dom.createTextNode("Close");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [5]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["inline", "do-train-button", [], ["spider", ["subexpr", "@mut", [["get", "spider", ["loc", [null, [9, 35], [9, 41]]]]], [], []]], ["loc", [null, [9, 10], [9, 43]]]], ["element", "action", ["toggleModal"], [], ["loc", [null, [10, 18], [10, 42]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/components/train-scrapely-button.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "modal-confirm-train", [], ["close", "toggleModal", "translucentOverlay", true], 0, null, ["loc", [null, [7, 4], [11, 28]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/train-scrapely-button.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tooltip-container", [], ["tooltipFor", "train-spider-button", "text", "Train this spider.", "tooltipContainer", "body"], 0, null, ["loc", [null, [1, 0], [3, 22]]]], ["block", "if", [["get", "isShowingModal", ["loc", [null, [6, 6], [6, 20]]]]], [], 1, null, ["loc", [null, [6, 0], [12, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/tree-list-item-row", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/tree-list-item-row.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["tree-list-item-content ", ["subexpr", "if", [["get", "isCentered", ["loc", [null, [1, 40], [1, 50]]]], "flex-center"], [], ["loc", [null, [1, 35], [1, 66]]]]]]], ["content", "yield", ["loc", [null, [2, 4], [2, 13]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/tree-list-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 8,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/tree-list-item.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "item"], ["loc", [null, [7, 16], [7, 37]]]]], [], ["loc", [null, [7, 8], [7, 39]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 8
              },
              "end": {
                "line": 12,
                "column": 8
              }
            },
            "moduleName": "portia-ui/templates/components/tree-list-item.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", [["subexpr", "hash", [], ["section", "subtrees"], ["loc", [null, [11, 20], [11, 45]]]]], [], ["loc", [null, [11, 12], [11, 47]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 13,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/components/tree-list-item.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tree-list", [], [], 0, null, ["loc", [null, [10, 8], [12, 22]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/tree-list-item.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "animation-content");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 2, 2);
        return morphs;
      },
      statements: [["block", "tree-list-item-row", [], ["isCentered", ["subexpr", "@mut", [["get", "isCentered", ["loc", [null, [3, 17], [3, 27]]]]], [], []], "onMouseEnter", ["subexpr", "@mut", [["get", "onMouseEnter", ["loc", [null, [4, 19], [4, 31]]]]], [], []], "onMouseLeave", ["subexpr", "@mut", [["get", "onMouseLeave", ["loc", [null, [5, 19], [5, 31]]]]], [], []]], 0, null, ["loc", [null, [2, 4], [8, 27]]]], ["block", "if", [["get", "hasChildren", ["loc", [null, [9, 10], [9, 21]]]]], [], 1, null, ["loc", [null, [9, 4], [13, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/components/tree-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/tree-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "animation-content");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [2, 4], [2, 13]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/components/url-bar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 16
                },
                "end": {
                  "line": 16,
                  "column": 16
                }
              },
              "moduleName": "portia-ui/templates/components/url-bar.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    Browsing\n                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createTextNode("\n                        You can interact with the web page in this mode.\n                    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 16
                  },
                  "end": {
                    "line": 24,
                    "column": 16
                  }
                },
                "moduleName": "portia-ui/templates/components/url-bar.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    Annotating\n                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                var el2 = dom.createTextNode("\n                        Click on elements in the sample to create data annotations.\n                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                var el2 = dom.createTextNode("\n                        Close the sample to switch back to navigating mode.\n                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 16
                },
                "end": {
                  "line": 24,
                  "column": 16
                }
              },
              "moduleName": "portia-ui/templates/components/url-bar.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "mode", ["loc", [null, [16, 30], [16, 34]]]], "data-annotation"], [], ["loc", [null, [16, 26], [16, 53]]]]], [], 0, null, ["loc", [null, [16, 16], [24, 16]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 12
              },
              "end": {
                "line": 25,
                "column": 12
              }
            },
            "moduleName": "portia-ui/templates/components/url-bar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "mode", ["loc", [null, [11, 26], [11, 30]]]], "navigation"], [], ["loc", [null, [11, 22], [11, 44]]]]], [], 0, 1, ["loc", [null, [11, 16], [24, 23]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 12
              },
              "end": {
                "line": 29,
                "column": 12
              }
            },
            "moduleName": "portia-ui/templates/components/url-bar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "id", "mode-feedback-icon");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["btn btn-mode btn-mode-", ["get", "mode", ["loc", [null, [26, 79], [26, 83]]]]]]], ["inline", "icon-button", [], ["icon", ["subexpr", "@mut", [["get", "mode", ["loc", [null, [27, 39], [27, 43]]]]], [], []]], ["loc", [null, [27, 20], [27, 45]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 8
            },
            "end": {
              "line": 30,
              "column": 8
            }
          },
          "moduleName": "portia-ui/templates/components/url-bar.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [10, 22], [10, 37]]]], "tooltip"], [], ["loc", [null, [10, 18], [10, 48]]]]], [], 0, 1, ["loc", [null, [10, 12], [29, 19]]]]],
        locals: ["options"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/components/url-bar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "url-bar");
        dom.setAttribute(el1, "class", "input-group");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "input-group-btn");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "btn btn-default");
        dom.setAttribute(el3, "type", "button");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "fa fa-arrow-left");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "btn btn-default");
        dom.setAttribute(el3, "type", "button");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "fa fa-arrow-right");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "input-group-btn");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "btn btn-default");
        dom.setAttribute(el3, "type", "button");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var element5 = dom.childAt(element1, [5, 1]);
        var element6 = dom.childAt(element5, [1]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element3, 'disabled');
        morphs[1] = dom.createElementMorph(element3);
        morphs[2] = dom.createAttrMorph(element4, 'disabled');
        morphs[3] = dom.createElementMorph(element4);
        morphs[4] = dom.createMorphAt(element2, 5, 5);
        morphs[5] = dom.createMorphAt(element1, 3, 3);
        morphs[6] = dom.createAttrMorph(element5, 'disabled');
        morphs[7] = dom.createElementMorph(element5);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        return morphs;
      },
      statements: [["attribute", "disabled", ["get", "backDisabled", ["loc", [null, [3, 65], [3, 77]]]]], ["element", "action", ["back"], [], ["loc", [null, [3, 80], [3, 97]]]], ["attribute", "disabled", ["get", "forwardDisabled", ["loc", [null, [6, 65], [6, 80]]]]], ["element", "action", ["forward"], [], ["loc", [null, [6, 83], [6, 103]]]], ["block", "tooltip-container", [], ["tooltipFor", "mode-feedback-icon", "tooltipContainer", "body", "placement", "right"], 0, null, ["loc", [null, [9, 8], [30, 30]]]], ["inline", "buffered-input", [], ["placeholder", "Enter a website address", "value", ["subexpr", "mut", [["get", "url", ["loc", [null, [32, 70], [32, 73]]]]], [], ["loc", [null, [32, 65], [32, 74]]]], "viewValue", ["subexpr", "mut", [["get", "editedUrl", ["loc", [null, [32, 90], [32, 99]]]]], [], ["loc", [null, [32, 85], [32, 100]]]], "autofocus", ["subexpr", "@mut", [["get", "autofocus", ["loc", [null, [32, 111], [32, 120]]]]], [], []], "autoSelect", true, "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [32, 146], [32, 154]]]]], [], []], "spellcheck", false, "onEnterPress", ["subexpr", "action", ["submit"], [], ["loc", [null, [32, 185], [32, 202]]]]], ["loc", [null, [32, 4], [32, 204]]]], ["attribute", "disabled", ["get", "disabled", ["loc", [null, [34, 65], [34, 73]]]]], ["element", "action", ["submit", ["get", "url", ["loc", [null, [34, 94], [34, 97]]]]], [], ["loc", [null, [34, 76], [34, 99]]]], ["attribute", "class", ["concat", ["fa ", ["subexpr", "if", [["get", "loading", ["loc", [null, [35, 33], [35, 40]]]], "fa-spin fa-refresh", ["subexpr", "if", [["subexpr", "not", [["subexpr", "eq", [["subexpr", "or", [["subexpr", "or", [["get", "editedUrl", ["loc", [null, [35, 83], [35, 92]]]], ["get", "url", ["loc", [null, [35, 93], [35, 96]]]]], [], ["loc", [null, [35, 79], [35, 97]]]], null], [], ["loc", [null, [35, 75], [35, 103]]]], ["get", "browser.url", ["loc", [null, [35, 104], [35, 115]]]]], [], ["loc", [null, [35, 71], [35, 116]]]]], [], ["loc", [null, [35, 66], [35, 117]]]], "fa-arrow-right", "fa-repeat"], [], ["loc", [null, [35, 62], [35, 147]]]]], [], ["loc", [null, [35, 28], [35, 149]]]]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/options-panels", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/options-panels.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("nav");
        dom.setAttribute(el1, "id", "options-panels");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "outlet", ["options-panels"], [], ["loc", [null, [2, 4], [2, 31]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/projects.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "project-list", [], ["projects", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 32], [8, 37]]]]], [], []]], ["loc", [null, [8, 8], [8, 39]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "project-list-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("img");
        dom.setAttribute(el2, "src", "/assets/images/portia-logo.svg");
        dom.setAttribute(el2, "alt", "Portia logo");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "style", "width: 20%; display: block;");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3, "src", "/assets/images/yaoota-logo.png");
        dom.setAttribute(el3, "alt", "Yaoota logo");
        dom.setAttribute(el3, "style", "width: 100%; height: 100px;");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        var el3 = dom.createTextNode("Hello! What would you like to work on today?");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 7, 7);
        return morphs;
      },
      statements: [["block", "if", [["get", "model", ["loc", [null, [7, 10], [7, 15]]]]], [], 0, null, ["loc", [null, [7, 4], [9, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "outlet", ["browser-toolbar"], [], ["loc", [null, [3, 8], [3, 36]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/projects/project.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "outlet", ["browser-overlays"], [], ["loc", [null, [5, 8], [5, 37]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [4, 18], [4, 33]]]], "overlays"], [], ["loc", [null, [4, 14], [4, 45]]]]], [], 0, null, ["loc", [null, [4, 4], [6, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/projects/project.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [2, 14], [2, 29]]]], "toolbar"], [], ["loc", [null, [2, 10], [2, 40]]]]], [], 0, 1, ["loc", [null, [2, 4], [6, 11]]]]],
        locals: ["options"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "browser-view-port", [], ["clickHandler", ["subexpr", "action", ["viewPortClick"], [], ["loc", [null, [1, 34], [1, 58]]]]], 0, null, ["loc", [null, [1, 0], [7, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/conflicts/file-selector", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 20
                  },
                  "end": {
                    "line": 8,
                    "column": 20
                  }
                },
                "moduleName": "portia-ui/templates/projects/project/conflicts/file-selector.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                        Conflicted files\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 16
                },
                "end": {
                  "line": 9,
                  "column": 16
                }
              },
              "moduleName": "portia-ui/templates/projects/project/conflicts/file-selector.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "list-item-text", [], [], 0, null, ["loc", [null, [6, 20], [8, 39]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  var child0 = (function () {
                    return {
                      meta: {
                        "fragmentReason": false,
                        "revision": "Ember@2.6.2",
                        "loc": {
                          "source": null,
                          "start": {
                            "line": 13,
                            "column": 32
                          },
                          "end": {
                            "line": 16,
                            "column": 32
                          }
                        },
                        "moduleName": "portia-ui/templates/projects/project/conflicts/file-selector.hbs"
                      },
                      isEmpty: false,
                      arity: 0,
                      cachedFragment: null,
                      hasRendered: false,
                      buildFragment: function buildFragment(dom) {
                        var el0 = dom.createDocumentFragment();
                        var el1 = dom.createTextNode("                                    ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n                                    ");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createComment("");
                        dom.appendChild(el0, el1);
                        var el1 = dom.createTextNode("\n");
                        dom.appendChild(el0, el1);
                        return el0;
                      },
                      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                        var morphs = new Array(2);
                        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                        morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                        return morphs;
                      },
                      statements: [["inline", "list-item-icon", [], ["icon", "file"], ["loc", [null, [14, 36], [14, 66]]]], ["content", "file.name", ["loc", [null, [15, 36], [15, 49]]]]],
                      locals: [],
                      templates: []
                    };
                  })();
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.6.2",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 12,
                          "column": 28
                        },
                        "end": {
                          "line": 17,
                          "column": 28
                        }
                      },
                      "moduleName": "portia-ui/templates/projects/project/conflicts/file-selector.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["block", "link-to", ["projects.project.conflicts.conflict", ["get", "file.encodedName", ["loc", [null, [13, 81], [13, 97]]]]], [], 0, null, ["loc", [null, [13, 32], [16, 44]]]]],
                    locals: [],
                    templates: [child0]
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.6.2",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 11,
                        "column": 24
                      },
                      "end": {
                        "line": 18,
                        "column": 24
                      }
                    },
                    "moduleName": "portia-ui/templates/projects/project/conflicts/file-selector.hbs"
                  },
                  isEmpty: false,
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [12, 38], [12, 53]]]], "item"], [], ["loc", [null, [12, 34], [12, 61]]]]], [], 0, null, ["loc", [null, [12, 28], [17, 35]]]]],
                  locals: ["options"],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 10,
                      "column": 20
                    },
                    "end": {
                      "line": 19,
                      "column": 20
                    }
                  },
                  "moduleName": "portia-ui/templates/projects/project/conflicts/file-selector.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "tree-list-item", [], [], 0, null, ["loc", [null, [11, 24], [18, 43]]]]],
                locals: ["file"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 9,
                    "column": 16
                  },
                  "end": {
                    "line": 20,
                    "column": 16
                  }
                },
                "moduleName": "portia-ui/templates/projects/project/conflicts/file-selector.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "each", [["get", "conflictedFiles", ["loc", [null, [10, 28], [10, 43]]]]], [], 0, null, ["loc", [null, [10, 20], [19, 29]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 16
                },
                "end": {
                  "line": 20,
                  "column": 16
                }
              },
              "moduleName": "portia-ui/templates/projects/project/conflicts/file-selector.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [9, 30], [9, 45]]]], "subtrees"], [], ["loc", [null, [9, 26], [9, 57]]]]], [], 0, null, ["loc", [null, [9, 16], [20, 16]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 12
              },
              "end": {
                "line": 21,
                "column": 12
              }
            },
            "moduleName": "portia-ui/templates/projects/project/conflicts/file-selector.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [5, 26], [5, 41]]]], "item"], [], ["loc", [null, [5, 22], [5, 49]]]]], [], 0, 1, ["loc", [null, [5, 16], [20, 23]]]]],
          locals: ["options"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 8
            },
            "end": {
              "line": 22,
              "column": 8
            }
          },
          "moduleName": "portia-ui/templates/projects/project/conflicts/file-selector.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tree-list-item", [], ["hasChildren", ["subexpr", "@mut", [["get", "conflictedFiles.length", ["loc", [null, [4, 42], [4, 64]]]]], [], []]], 0, null, ["loc", [null, [4, 12], [21, 31]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/conflicts/file-selector.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("nav");
        dom.setAttribute(el1, "id", "side-bar");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["block", "tree-list", [], [], 0, null, ["loc", [null, [3, 8], [22, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/conflicts/help", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 7,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/projects/project/conflicts/help.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h1");
          var el2 = dom.createTextNode("Aw, Snap!");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h3");
          var el2 = dom.createTextNode("Portia couldn't deploy the project because there are conflicts with another user's changes");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("Resolve the conflicts manually by selecting the conflicting files from the left panel to deploy the project.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 12
              },
              "end": {
                "line": 12,
                "column": 81
              }
            },
            "moduleName": "portia-ui/templates/projects/project/conflicts/help.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("project page");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 15,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/projects/project/conflicts/help.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h1");
          var el2 = dom.createTextNode("All done");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createTextNode("\n            All conflicts are resolved, to continue, go back to the\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            and try to deploy again.\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["block", "link-to", ["projects.project", ["get", "projectController.model", ["loc", [null, [12, 56], [12, 79]]]]], [], 0, null, ["loc", [null, [12, 12], [12, 81]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/conflicts/help.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "text-center conflicts-text");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "conflictedFiles", ["loc", [null, [2, 10], [2, 25]]]]], [], 0, 1, ["loc", [null, [2, 4], [15, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("portia-ui/templates/projects/project/conflicts/resolver", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/conflicts/resolver.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "conflicts-resolver-container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "json-file-compare", [], ["json", ["subexpr", "@mut", [["get", "model.contents", ["loc", [null, [2, 29], [2, 43]]]]], [], []], "update", "updateConflict"], ["loc", [null, [2, 4], [2, 69]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/conflicts/topbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 8,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/projects/project/conflicts/topbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "btn btn-default");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "fa fa-icon fa-upload");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            Save File\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["saveFile"], [], ["loc", [null, [4, 54], [4, 75]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/conflicts/topbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "nav-container topbar-conflicts");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("Resolving ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("strong");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(element1, 3, 3);
        return morphs;
      },
      statements: [["content", "model.file", ["loc", [null, [2, 28], [2, 42]]]], ["block", "unless", [["get", "haveConflicts", ["loc", [null, [3, 14], [3, 27]]]]], [], 0, null, ["loc", [null, [3, 4], [8, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/schema", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/schema.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/schema/field", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/schema/field.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/schema/field/options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/projects/project/schema/field/options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Field properties\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/schema/field/options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "group.tab", [], ["toolId", "field-options"], 0, null, ["loc", [null, [3, 8], [5, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 9,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/projects/project/schema/field/options.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "field-options", [], ["field", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 34], [8, 39]]]]], [], []]], ["loc", [null, [8, 12], [8, 41]]]]],
              locals: ["active"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/projects/project/schema/field/options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "group.panel", [], ["class", "extracted-items container-fluid", "toolId", "field-options"], 0, null, ["loc", [null, [7, 8], [9, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/schema/field/options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [6, 18], [6, 31]]]], "panels"], [], ["loc", [null, [6, 14], [6, 41]]]]], [], 0, null, ["loc", [null, [6, 4], [10, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/projects/project/schema/field/options.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [2, 14], [2, 27]]]], "tabs"], [], ["loc", [null, [2, 10], [2, 35]]]]], [], 0, 1, ["loc", [null, [2, 4], [10, 11]]]]],
        locals: ["group"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/schema/field/options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tool-group", [], ["id", "field-options-group", "collapsible", false, "onClose", ["subexpr", "action", ["closeOptions"], [], ["loc", [null, [1, 65], [1, 88]]]]], 0, null, ["loc", [null, [1, 0], [11, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/schema/structure", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/schema/structure.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "schema-structure-listing", [], ["schema", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 34], [1, 39]]]]], [], []]], ["loc", [null, [1, 0], [1, 41]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider/currency-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/currency-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Currency Options\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/currency-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "group.tab", [], ["toolId", "currency-options"], 0, null, ["loc", [null, [3, 8], [5, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 9,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/projects/project/spider/currency-options.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "currency-options", [], ["spider", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 38], [8, 43]]]]], [], []]], ["loc", [null, [8, 12], [8, 45]]]]],
              locals: ["active"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/currency-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "group.panel", [], ["class", "extracted-items container-fluid", "toolId", "currency-options"], 0, null, ["loc", [null, [7, 8], [9, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/currency-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [6, 18], [6, 31]]]], "panels"], [], ["loc", [null, [6, 14], [6, 41]]]]], [], 0, null, ["loc", [null, [6, 4], [10, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/currency-options.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [2, 14], [2, 27]]]], "tabs"], [], ["loc", [null, [2, 10], [2, 35]]]]], [], 0, 1, ["loc", [null, [2, 4], [10, 11]]]]],
        locals: ["group"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/currency-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tool-group", [], ["id", "currency-options-group", "collapsible", false, "onClose", ["subexpr", "action", ["closeOptions"], [], ["loc", [null, [1, 68], [1, 91]]]]], 0, null, ["loc", [null, [1, 0], [11, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/spider/language-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/language-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Language Options\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/language-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "group.tab", [], ["toolId", "language-options"], 0, null, ["loc", [null, [3, 8], [5, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 9,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/projects/project/spider/language-options.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "language-options", [], ["spider", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 38], [8, 43]]]]], [], []]], ["loc", [null, [8, 12], [8, 45]]]]],
              locals: ["active"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/language-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "group.panel", [], ["class", "extracted-items container-fluid", "toolId", "language-options"], 0, null, ["loc", [null, [7, 8], [9, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/language-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [6, 18], [6, 31]]]], "panels"], [], ["loc", [null, [6, 14], [6, 41]]]]], [], 0, null, ["loc", [null, [6, 4], [10, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/language-options.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [2, 14], [2, 27]]]], "tabs"], [], ["loc", [null, [2, 10], [2, 35]]]]], [], 0, 1, ["loc", [null, [2, 4], [10, 11]]]]],
        locals: ["group"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/language-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tool-group", [], ["id", "language-options-group", "collapsible", false, "onClose", ["subexpr", "action", ["closeOptions"], [], ["loc", [null, [1, 68], [1, 91]]]]], 0, null, ["loc", [null, [1, 0], [11, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/spider/link-options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/link-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Link crawling options\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/link-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "group.tab", [], ["toolId", "link-crawling-options"], 0, null, ["loc", [null, [3, 8], [5, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 9,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/projects/project/spider/link-options.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "link-crawling-options", [], ["spider", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 43], [8, 48]]]]], [], []]], ["loc", [null, [8, 12], [8, 50]]]]],
              locals: ["active"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/link-options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "group.panel", [], ["class", "extracted-items container-fluid", "toolId", "link-crawling-options"], 0, null, ["loc", [null, [7, 8], [9, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/link-options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [6, 18], [6, 31]]]], "panels"], [], ["loc", [null, [6, 14], [6, 41]]]]], [], 0, null, ["loc", [null, [6, 4], [10, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/link-options.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [2, 14], [2, 27]]]], "tabs"], [], ["loc", [null, [2, 10], [2, 35]]]]], [], 0, 1, ["loc", [null, [2, 4], [10, 11]]]]],
        locals: ["group"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/link-options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tool-group", [], ["id", "link-crawling-options-group", "collapsible", false, "onClose", ["subexpr", "action", ["closeOptions"], [], ["loc", [null, [1, 73], [1, 96]]]]], 0, null, ["loc", [null, [1, 0], [11, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/spider/options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Spider properties\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "group.tab", [], ["toolId", "spider-options"], 0, null, ["loc", [null, [3, 8], [5, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 9,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/projects/project/spider/options.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "spider-options", [], ["spider", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 36], [8, 41]]]]], [], []]], ["loc", [null, [8, 12], [8, 43]]]]],
              locals: ["active"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "group.panel", [], ["class", "extracted-items container-fluid", "toolId", "spider-options"], 0, null, ["loc", [null, [7, 8], [9, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [6, 18], [6, 31]]]], "panels"], [], ["loc", [null, [6, 14], [6, 41]]]]], [], 0, null, ["loc", [null, [6, 4], [10, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/options.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [2, 14], [2, 27]]]], "tabs"], [], ["loc", [null, [2, 10], [2, 35]]]]], [], 0, 1, ["loc", [null, [2, 4], [10, 11]]]]],
        locals: ["group"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tool-group", [], ["id", "spider-options-group", "collapsible", false, "onClose", ["subexpr", "action", ["closeOptions"], [], ["loc", [null, [1, 66], [1, 89]]]]], 0, null, ["loc", [null, [1, 0], [11, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/spider/overlays", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 8
              },
              "end": {
                "line": 5,
                "column": 8
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/overlays.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "element-overlay", [], ["viewPortElement", ["subexpr", "@mut", [["get", "overlay.element", ["loc", [null, [4, 46], [4, 61]]]]], [], []], "color", ["subexpr", "@mut", [["get", "overlay.color", ["loc", [null, [4, 68], [4, 81]]]]], [], []]], ["loc", [null, [4, 12], [4, 83]]]]],
          locals: ["overlay"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/overlays.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "none-hovered none-selected");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "linkOverlayElements", ["loc", [null, [3, 16], [3, 35]]]]], ["key", "guid"], 0, null, ["loc", [null, [3, 8], [5, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/overlays.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "model.showLinks", ["loc", [null, [1, 6], [1, 21]]]]], [], 0, null, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample/annotation/selection", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample/annotation/selection.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample/data", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample/data.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample/data/annotation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample/data/annotation.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample/data/annotation/options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/sample/data/annotation/options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Annotation properties\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/sample/data/annotation/options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "group.tab", [], ["toolId", "annotation-options"], 0, null, ["loc", [null, [3, 8], [5, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 11,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/projects/project/spider/sample/data/annotation/options.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                return morphs;
              },
              statements: [["inline", "annotation-options", [], ["annotation", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 44], [8, 49]]]]], [], []]], ["loc", [null, [8, 12], [8, 51]]]], ["inline", "field-options", [], ["field", ["subexpr", "@mut", [["get", "model.field.content", ["loc", [null, [9, 34], [9, 53]]]]], [], []]], ["loc", [null, [9, 12], [9, 55]]]], ["inline", "extractor-options", [], ["annotation", ["subexpr", "@mut", [["get", "model", ["loc", [null, [10, 43], [10, 48]]]]], [], []]], ["loc", [null, [10, 12], [10, 50]]]]],
              locals: ["active"],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 12,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/sample/data/annotation/options.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "group.panel", [], ["class", "extracted-items container-fluid", "toolId", "annotation-options"], 0, null, ["loc", [null, [7, 8], [11, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/sample/data/annotation/options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [6, 18], [6, 31]]]], "panels"], [], ["loc", [null, [6, 14], [6, 41]]]]], [], 0, null, ["loc", [null, [6, 4], [12, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/sample/data/annotation/options.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [2, 14], [2, 27]]]], "tabs"], [], ["loc", [null, [2, 10], [2, 35]]]]], [], 0, 1, ["loc", [null, [2, 4], [12, 11]]]]],
        locals: ["group"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample/data/annotation/options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "tool-group", [], ["id", "annotation-options-group", "collapsible", false, "onClose", ["subexpr", "action", ["closeOptions"], [], ["loc", [null, [1, 70], [1, 93]]]]], 0, null, ["loc", [null, [1, 0], [13, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample/data/item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample/data/item.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample/data/overlays", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 12
                },
                "end": {
                  "line": 6,
                  "column": 12
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/sample/data/overlays.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "element-overlay", [], ["class", ["subexpr", "concat", [["subexpr", "if", [["subexpr", "eq", [["get", "element", ["loc", [null, [5, 56], [5, 63]]]], ["get", "hoveredElement", ["loc", [null, [5, 64], [5, 78]]]]], [], ["loc", [null, [5, 52], [5, 79]]]], "hovered"], [], ["loc", [null, [5, 48], [5, 90]]]], ["subexpr", "if", [["subexpr", "includes", [["get", "hoveredModels", ["loc", [null, [5, 105], [5, 118]]]], ["get", "annotation", ["loc", [null, [5, 119], [5, 129]]]]], [], ["loc", [null, [5, 95], [5, 130]]]], " group-hovered"], [], ["loc", [null, [5, 91], [5, 148]]]], ["subexpr", "if", [["subexpr", "and", [["subexpr", "eq", [["get", "element", ["loc", [null, [5, 162], [5, 169]]]], ["get", "selectedElement", ["loc", [null, [5, 170], [5, 185]]]]], [], ["loc", [null, [5, 158], [5, 186]]]], ["subexpr", "eq", [["get", "selectedModel", ["loc", [null, [5, 191], [5, 204]]]], ["get", "annotation", ["loc", [null, [5, 205], [5, 215]]]]], [], ["loc", [null, [5, 187], [5, 216]]]]], [], ["loc", [null, [5, 153], [5, 217]]]], " selected"], [], ["loc", [null, [5, 149], [5, 230]]]], ["subexpr", "if", [["subexpr", "eq", [["get", "selectedModel", ["loc", [null, [5, 239], [5, 252]]]], ["get", "annotation", ["loc", [null, [5, 253], [5, 263]]]]], [], ["loc", [null, [5, 235], [5, 264]]]], " group-selected"], [], ["loc", [null, [5, 231], [5, 283]]]]], [], ["loc", [null, [5, 40], [5, 284]]]], "viewPortElement", ["subexpr", "@mut", [["get", "element", ["loc", [null, [5, 301], [5, 308]]]]], [], []], "icon", ["subexpr", "if", [["subexpr", "eq", [["get", "element", ["loc", [null, [5, 322], [5, 329]]]], ["get", "hoveredElement", ["loc", [null, [5, 330], [5, 344]]]]], [], ["loc", [null, [5, 318], [5, 345]]]], ["subexpr", "get", [["get", "selectionModeIcons", ["loc", [null, [5, 351], [5, 369]]]], ["get", "activeSelectionMode", ["loc", [null, [5, 370], [5, 389]]]]], [], ["loc", [null, [5, 346], [5, 390]]]]], [], ["loc", [null, [5, 314], [5, 391]]]], "color", ["subexpr", "array-get", [["get", "annotationColors", ["loc", [null, [5, 409], [5, 425]]]], ["get", "annotation.orderedIndex", ["loc", [null, [5, 426], [5, 449]]]]], [], ["loc", [null, [5, 398], [5, 450]]]]], ["loc", [null, [5, 16], [5, 452]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 8
              },
              "end": {
                "line": 7,
                "column": 8
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/sample/data/overlays.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "annotation.constructor.modelName", ["loc", [null, [4, 22], [4, 54]]]], "annotation"], [], ["loc", [null, [4, 18], [4, 68]]]]], [], 0, null, ["loc", [null, [4, 12], [6, 19]]]]],
          locals: ["annotation"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 4
            },
            "end": {
              "line": 8,
              "column": 4
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/sample/data/overlays.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["subexpr", "get", [["get", "sample.dataStructure.annotations", ["loc", [null, [3, 21], [3, 53]]]], ["subexpr", "guid", [["get", "element", ["loc", [null, [3, 60], [3, 67]]]]], [], ["loc", [null, [3, 54], [3, 68]]]]], [], ["loc", [null, [3, 16], [3, 69]]]]], [], 0, null, ["loc", [null, [3, 8], [7, 17]]]]],
        locals: ["element"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample/data/overlays.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["subexpr", "unless", [["get", "hoveredElement", ["loc", [null, [1, 21], [1, 35]]]], "none-hovered"], [], ["loc", [null, [1, 12], [1, 52]]]], " ", ["subexpr", "unless", [["get", "selectedElement", ["loc", [null, [1, 62], [1, 77]]]], "none-selected"], [], ["loc", [null, [1, 53], [1, 95]]]], " ", ["subexpr", "if", [["get", "hoveredModels.length", ["loc", [null, [1, 101], [1, 121]]]], "group-hovered"], [], ["loc", [null, [1, 96], [1, 139]]]], " ", ["subexpr", "if", [["get", "selectedModel", ["loc", [null, [1, 145], [1, 158]]]], "group-selected"], [], ["loc", [null, [1, 140], [1, 177]]]]]]], ["block", "each", [["get", "sample.dataStructure.elements.all", ["loc", [null, [2, 12], [2, 45]]]]], [], 0, null, ["loc", [null, [2, 4], [8, 13]]]], ["inline", "element-overlay", [], ["class", ["subexpr", "concat", ["hover-overlay", ["subexpr", "unless", [["get", "showHoverOverlay", ["loc", [null, [9, 60], [9, 76]]]], " hide"], [], ["loc", [null, [9, 52], [9, 85]]]]], [], ["loc", [null, [9, 28], [9, 86]]]], "positionMode", "edges", "viewPortElement", ["subexpr", "@mut", [["get", "hoveredElement", ["loc", [null, [9, 124], [9, 138]]]]], [], []], "icon", ["subexpr", "get", [["get", "selectionModeIcons", ["loc", [null, [9, 149], [9, 167]]]], ["get", "activeSelectionMode", ["loc", [null, [9, 168], [9, 187]]]]], [], ["loc", [null, [9, 144], [9, 188]]]], "color", ["subexpr", "@mut", [["get", "hoverOverlayColor", ["loc", [null, [9, 195], [9, 212]]]]], [], []]], ["loc", [null, [9, 4], [9, 214]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample/data/structure", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample/data/structure.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "data-structure-listing", [], ["sample", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 32], [1, 37]]]]], [], []], "annotationColors", ["subexpr", "@mut", [["get", "annotationColors", ["loc", [null, [1, 55], [1, 71]]]]], [], []]], ["loc", [null, [1, 0], [1, 73]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample/data/toolbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 12
              },
              "end": {
                "line": 18,
                "column": 12
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/sample/data/toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                Toggle page styling\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("\n                    When page styling is enabled you see the web page as the page author intended,\n                    the same way it would appear in a browser. However, sometimes this makes it hard\n                    to select the data that you need, for example if there are overlapping parts of\n                    the page or if some parts are hidden.\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("\n                    You can disable the page styling which will change the look and layout of the\n                    page but will force all content within the page to become visible.\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 12
              },
              "end": {
                "line": 22,
                "column": 12
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/sample/data/toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "id", "css-tool-button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            morphs[1] = dom.createElementMorph(element2);
            morphs[2] = dom.createMorphAt(element2, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["btn btn-default ", ["subexpr", "if", [["get", "cssEnabled", ["loc", [null, [19, 87], [19, 97]]]], "active"], [], ["loc", [null, [19, 82], [19, 108]]]]]]], ["element", "action", ["toggleCSS"], [], ["loc", [null, [19, 110], [19, 132]]]], ["inline", "icon-button", [], ["icon", "tool-css"], ["loc", [null, [20, 20], [20, 51]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 8
            },
            "end": {
              "line": 23,
              "column": 8
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/sample/data/toolbar.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [6, 22], [6, 37]]]], "tooltip"], [], ["loc", [null, [6, 18], [6, 48]]]]], [], 0, 1, ["loc", [null, [6, 12], [22, 19]]]]],
        locals: ["options"],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 12
              },
              "end": {
                "line": 43,
                "column": 12
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/sample/data/toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                Magic tool selector\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("\n                    When the magic tool selector is enabled, it will attempt to choose the most\n                    useful tool for you automatically, based on the element you are pointing at in\n                    the web page.\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("\n                    You can see which tool is being selected for you by looking at enabled tool\n                    selection button, and at the icon visible on the element under the cursor.\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("\n                    If you need, you can manually change the tool for the next click, by switching\n                    to it using the tool selection buttons.\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 12
              },
              "end": {
                "line": 47,
                "column": 12
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/sample/data/toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "id", "magic-tool-button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            morphs[1] = dom.createElementMorph(element1);
            morphs[2] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["btn btn-default ", ["subexpr", "if", [["get", "magicToolActive", ["loc", [null, [44, 89], [44, 104]]]], "active"], [], ["loc", [null, [44, 84], [44, 115]]]]]]], ["element", "action", ["toggleMagicTool"], [], ["loc", [null, [44, 117], [44, 145]]]], ["inline", "icon-button", [], ["icon", "tool-magic"], ["loc", [null, [45, 20], [45, 53]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 27,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 8
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/sample/data/toolbar.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "options.section", ["loc", [null, [28, 22], [28, 37]]]], "tooltip"], [], ["loc", [null, [28, 18], [28, 48]]]]], [], 0, 1, ["loc", [null, [28, 12], [47, 19]]]]],
        locals: ["options"],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 12
              },
              "end": {
                "line": 57,
                "column": 12
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/sample/data/toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'id');
            morphs[1] = dom.createAttrMorph(element0, 'class');
            morphs[2] = dom.createElementMorph(element0);
            morphs[3] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "id", ["subexpr", "get", [["get", "selectionModeIds", ["loc", [null, [54, 33], [54, 49]]]], ["get", "mode", ["loc", [null, [54, 50], [54, 54]]]]], [], ["loc", [null, [54, 27], [54, 56]]]]], ["attribute", "class", ["concat", ["btn btn-default ", ["subexpr", "if", [["subexpr", "eq", [["get", "activeSelectionMode", ["loc", [null, [54, 103], [54, 122]]]], ["get", "mode", ["loc", [null, [54, 123], [54, 127]]]]], [], ["loc", [null, [54, 99], [54, 128]]]], "active"], [], ["loc", [null, [54, 94], [54, 139]]]]]]], ["element", "action", [["subexpr", "action", [["subexpr", "mut", [["get", "selectionMode", ["loc", [null, [54, 163], [54, 176]]]]], [], ["loc", [null, [54, 158], [54, 177]]]], ["get", "mode", ["loc", [null, [54, 178], [54, 182]]]]], [], ["loc", [null, [54, 150], [54, 183]]]]], [], ["loc", [null, [54, 141], [54, 185]]]], ["inline", "icon-button", [], ["icon", ["subexpr", "@mut", [["get", "icon", ["loc", [null, [55, 39], [55, 43]]]]], [], []]], ["loc", [null, [55, 20], [55, 45]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 52,
              "column": 8
            },
            "end": {
              "line": 58,
              "column": 8
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/sample/data/toolbar.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tooltip-container", [], ["tooltipFor", ["subexpr", "get", [["get", "selectionModeIds", ["loc", [null, [53, 49], [53, 65]]]], ["get", "mode", ["loc", [null, [53, 66], [53, 70]]]]], [], ["loc", [null, [53, 44], [53, 71]]]], "tooltipContainer", "body", "text", ["subexpr", "get", [["get", "selectionModeText", ["loc", [null, [53, 106], [53, 123]]]], ["get", "mode", ["loc", [null, [53, 124], [53, 128]]]]], [], ["loc", [null, [53, 101], [53, 129]]]]], 0, null, ["loc", [null, [53, 12], [57, 34]]]]],
        locals: ["mode", "icon"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 61,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample/data/toolbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        var el2 = dom.createTextNode("Tools");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "tool-bar");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "btn-group");
        dom.setAttribute(el2, "role", "group");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "btn-group");
        dom.setAttribute(el2, "role", "group");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "btn-group");
        dom.setAttribute(el2, "role", "group");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [5]), 1, 1);
        return morphs;
      },
      statements: [["block", "tooltip-container", [], ["tooltipFor", "css-tool-button", "placement", "left", "tooltipContainer", "body"], 0, null, ["loc", [null, [5, 8], [23, 30]]]], ["block", "tooltip-container", [], ["tooltipFor", "magic-tool-button", "placement", "left", "tooltipContainer", "body"], 1, null, ["loc", [null, [27, 8], [48, 30]]]], ["block", "each-in", [["get", "selectionModeIcons", ["loc", [null, [52, 19], [52, 37]]]]], [], 2, null, ["loc", [null, [52, 8], [58, 20]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample/data/tools", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 5,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/sample/data/tools.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            Inspector\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/sample/data/tools.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "group.tab", [], ["toolId", "inspector"], 0, null, ["loc", [null, [3, 8], [5, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 9,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/projects/project/spider/sample/data/tools.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "inspector-panel", [], ["sample", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 37], [8, 42]]]]], [], []], "annotationColors", ["subexpr", "@mut", [["get", "annotationColors", ["loc", [null, [8, 60], [8, 76]]]]], [], []]], ["loc", [null, [8, 12], [8, 78]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/sample/data/tools.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "group.panel", [], ["class", "inspector container-fluid", "toolId", "inspector"], 0, null, ["loc", [null, [7, 8], [9, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/sample/data/tools.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [6, 18], [6, 31]]]], "panels"], [], ["loc", [null, [6, 14], [6, 41]]]]], [], 0, null, ["loc", [null, [6, 4], [10, 4]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/sample/data/tools.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [2, 14], [2, 27]]]], "tabs"], [], ["loc", [null, [2, 10], [2, 35]]]]], [], 0, 1, ["loc", [null, [2, 4], [10, 11]]]]],
        locals: ["group"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample/data/tools.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "tool-group", [], ["id", "inspector-group"], 0, null, ["loc", [null, [1, 0], [11, 15]]]], ["content", "extracted-items-group", ["loc", [null, [13, 0], [13, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample/item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample/item.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample/structure", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample/structure.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "outlet", ["sample-structure"], [], ["loc", [null, [1, 0], [1, 29]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider/sample/toolbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/sample/toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" Close sample\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "icon-button", [], ["icon", "close"], ["loc", [null, [4, 8], [4, 36]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/sample/toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["projects.project.spider"], ["class", "btn btn-primary", "activeClass", "", "id", "sample-close-button-browser"], 0, null, ["loc", [null, [3, 4], [5, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/sample/toolbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "outlet", ["browser-toolbar"], [], ["loc", [null, [1, 0], [1, 28]]]], ["block", "tooltip-container", [], ["tooltipFor", "sample-close-button-browser", "text", "Finish editing your sample so you can continue browsing and see how it works on other pages", "tooltipContainer", "body"], 0, null, ["loc", [null, [2, 0], [6, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/spider/start-url/options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/start-url/options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "start-url-options", [], ["spider", ["subexpr", "@mut", [["get", "model.spider", ["loc", [null, [2, 11], [2, 23]]]]], [], []], "startUrlId", ["subexpr", "@mut", [["get", "model.startUrlId", ["loc", [null, [3, 15], [3, 31]]]]], [], []]], ["loc", [null, [1, 0], [4, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider/structure", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/structure.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "spider-structure-listing", [], ["project", ["subexpr", "@mut", [["get", "model.project", ["loc", [null, [2, 10], [2, 23]]]]], [], []], "spider", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 9], [3, 14]]]]], [], []], "closeOptions", ["subexpr", "route-action", ["closeOptions"], [], ["loc", [null, [4, 15], [4, 44]]]], "transitionToFragments", ["subexpr", "route-action", ["transitionToFragments"], [], ["loc", [null, [5, 24], [5, 62]]]]], ["loc", [null, [1, 0], [6, 2]]]], ["inline", "outlet", ["spider-structure"], [], ["loc", [null, [7, 0], [7, 29]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider/toolbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/toolbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "show-links-button", [], ["spider", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 27], [1, 32]]]]], [], []]], ["loc", [null, [1, 0], [1, 34]]]], ["inline", "add-start-url-button", [], ["spider", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 30], [2, 35]]]]], [], []]], ["loc", [null, [2, 0], [2, 37]]]], ["inline", "edit-sample-button", [], ["spider", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 28], [3, 33]]]]], [], []]], ["loc", [null, [3, 0], [3, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/spider/tools", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 12
                  },
                  "end": {
                    "line": 6,
                    "column": 12
                  }
                },
                "moduleName": "portia-ui/templates/projects/project/spider/tools.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                Followed links\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 8
                },
                "end": {
                  "line": 7,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/tools.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "group.tab", [], ["toolId", "show-links-legend"], 0, null, ["loc", [null, [4, 12], [6, 26]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.6.2",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 8,
                      "column": 12
                    },
                    "end": {
                      "line": 10,
                      "column": 12
                    }
                  },
                  "moduleName": "portia-ui/templates/projects/project/spider/tools.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "show-links-legend", [], ["followedLinks", ["subexpr", "@mut", [["get", "followedLinkElements.length", ["loc", [null, [9, 50], [9, 77]]]]], [], []], "jsLinks", ["subexpr", "@mut", [["get", "jsLinkElements.length", ["loc", [null, [9, 86], [9, 107]]]]], [], []], "ignoredLinks", ["subexpr", "@mut", [["get", "ignoredLinkElements.length", ["loc", [null, [9, 121], [9, 147]]]]], [], []]], ["loc", [null, [9, 16], [9, 149]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.6.2",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 11,
                    "column": 8
                  }
                },
                "moduleName": "portia-ui/templates/projects/project/spider/tools.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "group.panel", [], ["id", "show-links-legend", "class", "container-fluid", "toolId", "show-links-legend"], 0, null, ["loc", [null, [8, 12], [10, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.6.2",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 8
                },
                "end": {
                  "line": 11,
                  "column": 8
                }
              },
              "moduleName": "portia-ui/templates/projects/project/spider/tools.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [7, 22], [7, 35]]]], "panels"], [], ["loc", [null, [7, 18], [7, 45]]]]], [], 0, null, ["loc", [null, [7, 8], [11, 8]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.6.2",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "portia-ui/templates/projects/project/spider/tools.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "group.section", ["loc", [null, [3, 18], [3, 31]]]], "tabs"], [], ["loc", [null, [3, 14], [3, 39]]]]], [], 0, 1, ["loc", [null, [3, 8], [11, 15]]]]],
          locals: ["group"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.6.2",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "portia-ui/templates/projects/project/spider/tools.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "tool-group", [], ["id", "show-links-legend-group"], 0, null, ["loc", [null, [2, 4], [12, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/spider/tools.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "model.showLinks", ["loc", [null, [1, 6], [1, 21]]]]], [], 0, null, ["loc", [null, [1, 0], [13, 7]]]], ["content", "extracted-items-group", ["loc", [null, [28, 0], [28, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("portia-ui/templates/projects/project/structure", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/structure.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("nav");
        dom.setAttribute(el1, "id", "side-bar");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        return morphs;
      },
      statements: [["content", "save-status", ["loc", [null, [3, 8], [3, 23]]]], ["inline", "project-listing", [], ["project", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 34], [4, 39]]]]], [], []], "reload", "reload", "conflict", "conflict"], ["loc", [null, [4, 8], [4, 77]]]], ["inline", "project-structure-listing", [], ["project", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 44], [5, 49]]]]], [], []]], ["loc", [null, [5, 8], [5, 51]]]], ["inline", "outlet", ["project-structure"], [], ["loc", [null, [6, 8], [6, 38]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/projects/project/toolbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/projects/project/toolbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "create-spider-button", [], ["project", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 31], [1, 36]]]]], [], []]], ["loc", [null, [1, 0], [1, 38]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("portia-ui/templates/tool-panels", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.6.2",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "portia-ui/templates/tool-panels.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("nav");
        dom.setAttribute(el1, "id", "tool-panels");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "outlet", ["tool-panels"], [], ["loc", [null, [2, 4], [2, 28]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('portia-ui/transforms/array', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Transform.extend({
    deserialize: function deserialize(serialized) {
      if (Array.isArray(serialized)) {
        return serialized;
      }
      return [];
    },

    serialize: function serialize(deserialized) {
      if (Array.isArray(deserialized)) {
        return deserialized;
      }
      return [];
    }
  });
});
define('portia-ui/transforms/json', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Transform.extend({
    deserialize: function deserialize(serialized) {
      return JSON.parse(serialized);
    },

    serialize: function serialize(deserialized) {
      return JSON.stringify(deserialized);
    }
  });
});
define('portia-ui/transforms/start-url', ['exports', 'ember-data', 'portia-ui/models/start-url'], function (exports, _emberData, _portiaUiModelsStartUrl) {
  exports['default'] = _emberData['default'].Transform.extend({
    deserialize: function deserialize(serialized) {
      if (Array.isArray(serialized)) {
        return serialized.map(function (url) {
          return (0, _portiaUiModelsStartUrl['default'])(url);
        });
      }
      return [];
    },

    serialize: function serialize(deserialized) {
      if (Array.isArray(deserialized)) {
        return deserialized.map(function (startUrl) {
          return startUrl.serialize();
        });
      }
      return [];
    }
  });
});
define('portia-ui/util-tests/collection-action', ['exports', 'ember-api-actions/util-tests/collection-action'], function (exports, _emberApiActionsUtilTestsCollectionAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberApiActionsUtilTestsCollectionAction['default'];
    }
  });
});
define('portia-ui/util-tests/member-action', ['exports', 'ember-api-actions/util-tests/member-action'], function (exports, _emberApiActionsUtilTestsMemberAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberApiActionsUtilTestsMemberAction['default'];
    }
  });
});
define('portia-ui/utils/attrs', ['exports', 'ember'], function (exports, _ember) {
    exports.attrValue = attrValue;
    exports.attrChanged = attrChanged;
    exports.attrChangedTo = attrChangedTo;

    function attrValue(attr) {
        return !_ember['default'].isNone(attr) && typeof attr === 'object' && 'value' in attr ? attr.value : attr;
    }

    function attrChanged(oldAttrs, newAttrs, key) {
        return !oldAttrs || attrValue(oldAttrs[key]) !== attrValue(newAttrs[key]);
    }

    function attrChangedTo(oldAttrs, newAttrs, key, value) {
        return attrChanged(oldAttrs, newAttrs, key) && attrValue(newAttrs[key]) === value;
    }

    exports['default'] = {
        attrValue: attrValue,
        attrChanged: attrChanged,
        attrChangedTo: attrChangedTo
    };
});
define("portia-ui/utils/browser-features", ["exports", "ember"], function (exports, _ember) {
    exports["default"] = hasBrowserFeatures;
    var RSVP = _ember["default"].RSVP;

    function hasBrowserFeatures() {
        // generatedcontent: detection issue with zoom in chrome
        var features = ["eventlistener", "json", "postmessage", "queryselector", "requestanimationframe", "svg", "websockets", "cssanimations", "csscalc", "flexbox", "nthchild", "csspointerevents", "opacity", "csstransforms", "csstransitions", "cssvhunit", "classlist", "placeholder", "localstorage", "svgasimg", "datauri", "atobbtoa"];
        var feature_promises = features.map(function (feature) {
            return new RSVP.Promise(function (resolve) {
                Modernizr.on(feature, function (isFeatureActive) {
                    resolve(isFeatureActive);
                });
            });
        });

        return RSVP.all(feature_promises);
    }
});
define('portia-ui/utils/colors', ['exports', 'ember'], function (exports, _ember) {
    exports.interpolate = interpolate;
    exports.getColors = getColors;
    var marked0$0 = [generateInterpolatedColors].map(regeneratorRuntime.mark);

    // material design colours
    var COLORS = [{
        name: 'indigo',
        main: '#3f51b5',
        shadow: '#1a237e'
    }, {
        name: 'blue',
        main: '#2196f3',
        shadow: '#0d47a1'
    }, {
        name: 'light blue',
        main: '#03a9f4',
        shadow: '#01579b'
    }, {
        name: 'cyan',
        main: '#00bcd4',
        shadow: '#006064'
    }, {
        name: 'teal',
        main: '#009688',
        shadow: '#004d40'
    }, {
        name: 'green',
        main: '#4caf50',
        shadow: '#1b5e20'
    }, {
        name: 'light green',
        main: '#8bc34a',
        shadow: '#33691e'
    }, {
        name: 'lime',
        main: '#cddc39',
        shadow: '#827717'
    }, {
        name: 'yellow',
        main: '#ffeb3b',
        shadow: '#f57f17'
    }, {
        name: 'amber',
        main: '#ffc107',
        shadow: '#ff6f00'
    }, {
        name: 'orange',
        main: '#ff9800',
        shadow: '#e65100'
    }, {
        name: 'deep orange',
        main: '#ff5722',
        shadow: '#bf360c'
    }, {
        name: 'red',
        main: '#f44336',
        shadow: '#b71c1c'
    }, {
        name: 'pink',
        main: '#e91e63',
        shadow: '#880e4f'
    }, {
        name: 'purple',
        main: '#9c27b0',
        shadow: '#4a148c'
    }, {
        name: 'deep purple',
        main: '#673ab7',
        shadow: '#311b92'
    }];

    exports.COLORS = COLORS;
    var NAMED_COLORS = {};
    exports.NAMED_COLORS = NAMED_COLORS;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = COLORS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var color = _step.value;

            NAMED_COLORS[color.name] = color;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    function interpolate(start, end, fraction) {
        return {
            main: _ember['default'].$.Color(start.main).transition(_ember['default'].$.Color(end.main), fraction).toHexString(),
            shadow: _ember['default'].$.Color(start.shadow).transition(_ember['default'].$.Color(end.shadow), fraction).toHexString()
        };
    }

    function generateInterpolatedColors(n) {
        var spacePerColor, i, prevIndex, nextIndex;
        return regeneratorRuntime.wrap(function generateInterpolatedColors$(context$1$0) {
            while (1) switch (context$1$0.prev = context$1$0.next) {
                case 0:
                    spacePerColor = COLORS.length / n;
                    i = 0;

                case 2:
                    if (!(i < n)) {
                        context$1$0.next = 13;
                        break;
                    }

                    prevIndex = Math.floor(i * spacePerColor);
                    nextIndex = Math.ceil(i * spacePerColor);

                    if (!(prevIndex === nextIndex)) {
                        context$1$0.next = 8;
                        break;
                    }

                    context$1$0.next = 8;
                    return COLORS[prevIndex];

                case 8:
                    context$1$0.next = 10;
                    return interpolate(COLORS[prevIndex], COLORS[nextIndex] || COLORS[0], i * spacePerColor - prevIndex);

                case 10:
                    i++;
                    context$1$0.next = 2;
                    break;

                case 13:
                case 'end':
                    return context$1$0.stop();
            }
        }, marked0$0[0], this);
    }

    function getColors(n) {
        if (n <= COLORS.length >> 1) {
            // use every second color
            return COLORS.filter(function (color, index) {
                return index % 2 === 0;
            }).slice(0, n);
        } else if (n <= COLORS.length) {
            // use all available colors
            return COLORS.slice(0, n);
        }

        return Array.from(generateInterpolatedColors(n));
    }
});

// use as many colors as required interpolated between the pre-defined colors
define('portia-ui/utils/computed', ['exports', 'ember'], function (exports, _ember) {
    exports.computedPropertiesEqual = computedPropertiesEqual;

    function computedPropertiesEqual(a, b) {
        return _ember['default'].computed(a, b, function () {
            return this.get(a) === this.get(b);
        });
    }
});
define('portia-ui/utils/ensure-promise', ['exports', 'ember'], function (exports, _ember) {
    exports['default'] = ensurePromise;

    // http://stackoverflow.com/questions/28247401/how-can-i-test-if-a-function-is-returning-a-promise-in-ember

    function ensurePromise(x) {
        return new _ember['default'].RSVP.Promise(function (resolve) {
            resolve(x);
        });
    }
});
define("portia-ui/utils/interaction-event", ["exports"], function (exports) {
    var eventCategories = {
        "keyup": "keyboard",
        "keydown": "keyboard",
        "keypress": "keyboard",
        "mousedown": "mouse",
        "mouseup": "mouse",
        "click": "mouse",
        "scroll": "scroll",
        "focus": "focus",
        "blur": "focus",
        "input": "simple",
        "change": "simple"
    };

    function getEventCategory(evt) {
        if (evt.type in eventCategories) {
            return eventCategories[evt.type];
        }
        throw new Error("Can't serialize event of type " + evt.type);
    }

    var interactionEvent = function interactionEvent(evt) {
        var target = evt.target;
        var doc = target.ownerDocument;

        if (target && target.nodeType === Node.DOCUMENT_NODE) {
            doc = target;
            target = doc.documentElement;
        }
        if (!target || !target.nodeid) {
            return null;
        }

        var data = {
            category: getEventCategory(evt.originalEvent || evt),
            type: evt.type,
            target: target.nodeid,
            propsBefore: {},
            propsAfter: {}
        };

        if (data.category === 'mouse') {
            // Send coordinates as a offset of the element instead of the document
            var clientRect = target.getBoundingClientRect();
            data.targetX = evt.clientX - clientRect.left;
            data.targetY = evt.clientY - clientRect.top;
            data.relatedTarget = evt.relatedTarget && evt.relatedTarget.nodeid;
        } else if (data.type === 'scroll') {
            var scrollTarget = target;
            // Scroll events in the body are dispatched in the document, reverse
            if (scrollTarget === doc.documentElement && !(target.scrollTopMax || target.scrollLeftMax)) {
                scrollTarget = doc.body;
            }
            if (scrollTarget) {
                data.scrollTop = scrollTarget.scrollTop;
                data.scrollTopPercent = scrollTarget.scrollTopMax && Math.round(scrollTarget.scrollTop * 100 / scrollTarget.scrollTopMax);
                data.scrollLeft = scrollTarget.scrollLeft;
            } else {
                data.scrollTop = 0;
                data.scrollLeft = 0;
                data.scrollTopPercent = 0;
            }
        }

        ATTRIBUTE_WHITELIST.forEach(function (attr) {
            if (attr in evt) {
                data[attr] = evt[attr];
            }
        });
        function copyProperties(update_props, obj) {
            if (evt.type in update_props) {
                update_props[evt.type].forEach(function (propName) {
                    if (propName in target) {
                        obj[propName] = target[propName];
                    }
                });
            }
        }
        copyProperties(UPDATE_PROPS_BEFORE, data.propsBefore);
        copyProperties(UPDATE_PROPS_AFTER, data.propsAfter);
        return data;
    };

    var ATTRIBUTE_WHITELIST = ['altKey', 'bubbles', 'button', 'buttons', 'cancelable', 'code', 'ctrlKey', 'deltaX', 'deltaY', 'deltaZ', 'deltaMode', 'detail', 'isComposing', 'isTrusted', 'key', 'keyCode', 'location', 'metaKey', 'relatedTargetId', 'shiftKey', 'type'];

    // When this events are fired, update the specified properties in the server
    // to the ones in the client before sending the event
    var UPDATE_PROPS_BEFORE = {
        'change': ['selectedIndex'], // selects
        'input': ['value'], // text input, textareas
        'keyup': ['value'], // text input, textareas
        'click': ['checked'] // input type radio or check
    };
    var UPDATE_PROPS_AFTER = {
        'keydown': ['value'], // text input, textareas
        'keypress': ['value'] // text input, textareas
    };

    exports["default"] = interactionEvent;
});
define('portia-ui/utils/promises', ['exports', 'ember'], function (exports, _ember) {
    exports.ensurePromise = ensurePromise;

    function ensurePromise(valueOrPromise) {
        return new _ember['default'].RSVP.Promise(function (resolve) {
            resolve(valueOrPromise);
        });
    }

    exports['default'] = {
        ensurePromise: ensurePromise
    };
});
define('portia-ui/utils/selectors', ['exports', 'ember'], function (exports, _ember) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.elementPath = elementPath;
    exports.pathSelector = pathSelector;
    exports.uniquePathSelector = uniquePathSelector;
    exports.smartSelector = smartSelector;
    exports.cssToXpath = cssToXpath;
    exports.setIntersection = setIntersection;
    exports.setDifference = setDifference;
    exports.getParents = getParents;
    exports.getPreviousSiblings = getPreviousSiblings;
    exports.closestParentIndex = closestParentIndex;
    exports.findContainers = findContainers;
    exports.findContainer = findContainer;
    exports.findRepeatedContainers = findRepeatedContainers;
    exports.parentWithSiblings = parentWithSiblings;
    exports.groupItems = groupItems;
    exports.makeItemsFromGroups = makeItemsFromGroups;
    exports.createSelectorGenerators = createSelectorGenerators;

    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    var IMPLICIT_TAGS = new Set(['tbody']);
    var escapeCSS = CSS.escape;

    function elementPath(element) {
        var elements = [element];
        while (element.parentElement && !element.parentElement.isEqualNode(document.documentElement)) {
            element = element.parentElement;
            elements.unshift(element);
        }
        return elements;
    }

    function positionInParent(element) {
        return Array.prototype.indexOf.call(element.parentNode.children, element) + 1;
    }

    function pathSelector(element) {
        var path = elementPath(element);
        return path.map(function (pathElement) {
            return pathElement.tagName.toLowerCase();
        }).join(' > ');
    }

    function uniquePathSelector(element) {
        var path = elementPath(element);
        return path.map(function (pathElement, index) {
            var tag = pathElement.tagName.toLowerCase();
            if (index === 0) {
                return tag;
            }
            var parentIndex = positionInParent(pathElement);
            return tag + ':nth-child(' + parentIndex + ')';
        }).join(' > ');
    }

    function smartSelector(element) {
        var generator = BaseSelectorGenerator.create({
            elements: [element]
        });
        var selector = generator.get('selector');
        generator.destroy();
        return selector;
    }

    function cssToXpath(selector) {
        // css-to-xpath on github fails on nth-child(an+b) selectors :(
        // this is mini version that supports only the css generated by BaseSelectorGenerator
        // rules from: https://en.wikibooks.org/wiki/XPath/CSS_Equivalents
        // TODO: support CSS escaped identifiers
        var alternateSelectors = selector.split(', ');
        var alternateXPaths = [];

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = alternateSelectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var alternateSelector = _step.value;

                var selectorParts = alternateSelector.split(' > ');
                var xPathParts = [];

                var _iteratorNormalCompletion2 = true;
                var _didIteratorError2 = false;
                var _iteratorError2 = undefined;

                try {
                    for (var _iterator2 = selectorParts[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var selectorPart = _step2.value;

                        var selectorSiblingParts = selectorPart.split(' + ');
                        var xPathSiblingParts = [];

                        var _iteratorNormalCompletion3 = true;
                        var _didIteratorError3 = false;
                        var _iteratorError3 = undefined;

                        try {
                            for (var _iterator3 = selectorSiblingParts[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                var part = _step3.value;

                                // cases we need to support
                                if (part === '*') {
                                    xPathSiblingParts.push('*[1]');
                                    // id selector
                                } else if (part.startsWith('#')) {
                                        xPathSiblingParts.push('*[@id="' + part.slice(1) + '"]');
                                    } else {
                                        var match = undefined;
                                        match = part.match(/^([a-z]+[0-9]?)?(?:\.((?:.(?!:nth-child))+.))?(?::nth-child\((\d+)\))?(?::nth-child\((\d*)n\+(\d+)\))?(?::nth-child\(-(\d*)n\+(\d+)\))?$/); // jshint ignore:line
                                        if (match) {
                                            var conditions = '';

                                            // simple :nth-child selectors
                                            if (match[3]) {
                                                conditions += '[' + match[3] + ']';
                                            }

                                            // complex :nth-child selectors
                                            if (match[5] || match[7]) {
                                                var delta = match[4] === undefined ? match[6] : match[4];
                                                var start = match[5];
                                                var end = match[7];
                                                var modulus = (start === undefined ? end : start) % delta;
                                                var condition = 'position() mod ' + delta + ' = ' + modulus;
                                                if (start && start > delta) {
                                                    condition += ' and position() >= ' + start;
                                                }
                                                if (end) {
                                                    condition += ' and position() <= ' + end;
                                                }
                                                conditions += '[' + condition + ']';
                                            }

                                            // class selector
                                            if (match[2]) {
                                                conditions += '[contains(concat(" ", @class, " "), " ' + match[2] + ' ")]';
                                            }

                                            xPathSiblingParts.push('' + (match[1] || '*') + conditions);
                                        }
                                    }
                            }
                        } catch (err) {
                            _didIteratorError3 = true;
                            _iteratorError3 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                                    _iterator3['return']();
                                }
                            } finally {
                                if (_didIteratorError3) {
                                    throw _iteratorError3;
                                }
                            }
                        }

                        xPathParts.push(xPathSiblingParts.join('/following-sibling::'));
                    }
                } catch (err) {
                    _didIteratorError2 = true;
                    _iteratorError2 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                            _iterator2['return']();
                        }
                    } finally {
                        if (_didIteratorError2) {
                            throw _iteratorError2;
                        }
                    }
                }

                alternateXPaths.push('//' + xPathParts.join('/'));
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                    _iterator['return']();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        return alternateXPaths.join(' | ');
    }

    var BaseSelectorGenerator = _ember['default'].Object.extend({
        parent: null,
        elements: [],
        siblings: null,

        paths: _ember['default'].computed.map('elements', elementPath),
        groupedPaths: _ember['default'].computed('paths', function () {
            var paths = this.get('paths');
            return this.groupPaths(paths);
        }),
        parentMap: _ember['default'].computed('parent', 'parent.groupedPaths', 'parent.selectors', 'parent.siblings', function () {
            if (!this.get('parent')) {
                return null;
            }

            var parentGroupedPaths = this.get('parent.groupedPaths') || [];
            var parentSelectors = this.get('parent.selectors') || [];
            var parentSiblings = this.get('parent.siblings') || 0;

            var parentMap = new Map();
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = parentGroupedPaths.entries()[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var _step4$value = _slicedToArray(_step4.value, 2);

                    var index = _step4$value[0];
                    var paths = _step4$value[1];

                    var pathSelectors = parentSelectors[index];
                    var siblingSelectors = [pathSelectors];
                    for (var i = 0; i < parentSiblings; i++) {
                        siblingSelectors.push(siblingSelectors[siblingSelectors.length - 1].map(function (selector) {
                            return selector + ' + *';
                        }));
                    }
                    var _iteratorNormalCompletion5 = true;
                    var _didIteratorError5 = false;
                    var _iteratorError5 = undefined;

                    try {
                        for (var _iterator5 = paths[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                            var path = _step5.value;

                            var element = path[path.length - 1];
                            parentMap.set(element, pathSelectors);
                            for (var i = 0; i < parentSiblings; i++) {
                                element = element.nextElementSibling;
                                if (!element) {
                                    break;
                                }
                                parentMap.set(element, siblingSelectors[i + 1]);
                            }
                        }
                    } catch (err) {
                        _didIteratorError5 = true;
                        _iteratorError5 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion5 && _iterator5['return']) {
                                _iterator5['return']();
                            }
                        } finally {
                            if (_didIteratorError5) {
                                throw _iteratorError5;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4['return']) {
                        _iterator4['return']();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }

            return parentMap;
        }),
        selectors: _ember['default'].computed('groupedPaths', 'parentMap', function () {
            var groupedPaths = this.get('groupedPaths');
            var parentMap = this.get('parentMap');
            return this.createSelectors(groupedPaths, parentMap);
        }),
        selector: _ember['default'].computed('selectors', function () {
            var selectors = this.get('selectors');

            // filter out selectors with trailing implicit tags, if a selector
            // without the tag also exists, otherwise the combined selector may
            // match too many elements
            var filteredSelectors = [];
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = selectors[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var selectorGroup = _step6.value;
                    var _iteratorNormalCompletion7 = true;
                    var _didIteratorError7 = false;
                    var _iteratorError7 = undefined;

                    try {
                        for (var _iterator7 = selectorGroup[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                            var selector = _step7.value;

                            var selectorParts = selector.split(' > ');
                            var trailingTag = selectorParts[selectorParts.length - 1];
                            if (!IMPLICIT_TAGS.has(trailingTag) || !selectorGroup.includes(selectorParts.slice(0, -1).join(' > '))) {
                                filteredSelectors.push(selector);
                            }
                        }
                    } catch (err) {
                        _didIteratorError7 = true;
                        _iteratorError7 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion7 && _iterator7['return']) {
                                _iterator7['return']();
                            }
                        } finally {
                            if (_didIteratorError7) {
                                throw _iteratorError7;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6['return']) {
                        _iterator6['return']();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }

            return this.mergeSelectors(filteredSelectors);
        }),
        xpath: _ember['default'].computed('selector', function () {
            var selector = this.get('selector');
            return cssToXpath(selector);
        }),

        groupPaths: function groupPaths(paths) {
            var groupedPaths = new Map();
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = paths[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var path = _step8.value;

                    // group by full path of tags names, and root element
                    var tagPath = [_ember['default'].guidFor(path[0])].concat(path.map(function (element) {
                        return element.tagName;
                    })).join(' ').toLowerCase();
                    var list = groupedPaths.get(tagPath) || [];
                    groupedPaths.set(tagPath, list);
                    list.push(path);
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8['return']) {
                        _iterator8['return']();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            return Array.from(groupedPaths.values());
        },

        createSelectors: function createSelectors(groupedPaths, parentMap) {
            var _this = this;

            return groupedPaths.map(function (group) {
                return _this.createGroupSelectors(group, parentMap);
            });
        },

        createGroupSelectors: function createGroupSelectors(group, parentMap) {
            var generalize = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

            var root = group && group[0] && group[0][0];
            var parentIndex = 0;
            var parentElements = null;
            var selectors = [root.tagName.toLowerCase()];

            var pathLength = group[0].length;
            if (parentMap) {
                for (var i = 1; i < pathLength; i++) {
                    if (parentMap.has(group[0][i])) {
                        parentIndex = i;
                    }
                }
            }

            if (parentIndex) {
                var elements = Array.from(new Set(group.map(function (path) {
                    return path[parentIndex];
                })));
                parentElements = elements;
                selectors = parentMap.get(elements[0]);
            }

            var skippedTag = null;
            indexloop: for (var i = parentIndex + 1; i < pathLength; i++) {
                var elements = this.getGroupElementsAtIndex(group, i);
                var testSelectorLists = [];

                // check id selector
                if (elements.length === 1) {
                    var id = elements[0].id;
                    if (id && !parentElements) {
                        testSelectorLists.push(['#' + escapeCSS(id)]);
                    }
                }

                var tagName = elements[0].tagName.toLowerCase();
                var classSelectors = this.getElementClassSelectors(elements);
                var allClassesSelector = tagName + classSelectors.join('');

                if (!generalize) {
                    // check class selectors
                    var _iteratorNormalCompletion9 = true;
                    var _didIteratorError9 = false;
                    var _iteratorError9 = undefined;

                    try {
                        for (var _iterator9 = classSelectors[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                            var classSelector = _step9.value;

                            testSelectorLists.push([classSelector]);
                        }

                        // check tag selector
                    } catch (err) {
                        _didIteratorError9 = true;
                        _iteratorError9 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion9 && _iterator9['return']) {
                                _iterator9['return']();
                            }
                        } finally {
                            if (_didIteratorError9) {
                                throw _iteratorError9;
                            }
                        }
                    }

                    if (!IMPLICIT_TAGS.has(tagName)) {
                        testSelectorLists.push([tagName]);
                    }

                    // check tag + class selector
                    var _iteratorNormalCompletion10 = true;
                    var _didIteratorError10 = false;
                    var _iteratorError10 = undefined;

                    try {
                        for (var _iterator10 = classSelectors[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                            var classSelector = _step10.value;

                            testSelectorLists.push([tagName + classSelector]);
                        }
                    } catch (err) {
                        _didIteratorError10 = true;
                        _iteratorError10 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion10 && _iterator10['return']) {
                                _iterator10['return']();
                            }
                        } finally {
                            if (_didIteratorError10) {
                                throw _iteratorError10;
                            }
                        }
                    }
                }

                if (!IMPLICIT_TAGS.has(tagName)) {
                    // nth-child
                    var indices = this.getElementIndices(elements);

                    if (indices.length > 1 && !generalize) {
                        // try to create an nth-child formula
                        var delta = indices[1] - indices[0];
                        var regularIndex = true;
                        for (var _i = 2; _i < indices.length; _i++) {
                            if (indices[_i] - indices[_i - 1] !== delta) {
                                regularIndex = false;
                            }
                        }
                        if (regularIndex) {
                            var firstIndex = indices[0];
                            var lastIndex = indices[indices.length - 1];

                            if (delta === 1) {
                                delta = '';
                            }
                            testSelectorLists.push([tagName + ':nth-child(' + delta + 'n+' + firstIndex + ')'], [tagName + ':nth-child(-' + delta + 'n+' + lastIndex + ')'], [tagName + ':nth-child(' + delta + 'n+' + firstIndex + '):nth-child(-' + delta + 'n+' + lastIndex + ')']); // jshint ignore:line
                            var _iteratorNormalCompletion11 = true;
                            var _didIteratorError11 = false;
                            var _iteratorError11 = undefined;

                            try {
                                for (var _iterator11 = classSelectors[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                                    var classSelector = _step11.value;

                                    testSelectorLists.push([classSelector + ':nth-child(' + delta + 'n+' + firstIndex + ')'], [classSelector + ':nth-child(-' + delta + 'n+' + lastIndex + ')'], [classSelector + ':nth-child(' + delta + 'n+' + firstIndex + '):nth-child(-' + delta + 'n+' + lastIndex + ')']); // jshint ignore:line
                                    testSelectorLists.push(['' + tagName + classSelector + ':nth-child(' + delta + 'n+' + firstIndex + ')'], ['' + tagName + classSelector + ':nth-child(-' + delta + 'n+' + lastIndex + ')'], ['' + tagName + classSelector + ':nth-child(' + delta + 'n+' + firstIndex + '):nth-child(-' + delta + 'n+' + lastIndex + ')']); // jshint ignore:line
                                }
                            } catch (err) {
                                _didIteratorError11 = true;
                                _iteratorError11 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion11 && _iterator11['return']) {
                                        _iterator11['return']();
                                    }
                                } finally {
                                    if (_didIteratorError11) {
                                        throw _iteratorError11;
                                    }
                                }
                            }
                        }
                    }

                    if (!generalize) {
                        // fail-safe explicitly listing all indices

                        var indexSelectors = [];
                        var _iteratorNormalCompletion12 = true;
                        var _didIteratorError12 = false;
                        var _iteratorError12 = undefined;

                        try {
                            for (var _iterator12 = indices[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                                var index = _step12.value;

                                indexSelectors.push(tagName + ':nth-child(' + index + ')');
                            }
                        } catch (err) {
                            _didIteratorError12 = true;
                            _iteratorError12 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion12 && _iterator12['return']) {
                                    _iterator12['return']();
                                }
                            } finally {
                                if (_didIteratorError12) {
                                    throw _iteratorError12;
                                }
                            }
                        }

                        testSelectorLists.push(indexSelectors);

                        var _iteratorNormalCompletion13 = true;
                        var _didIteratorError13 = false;
                        var _iteratorError13 = undefined;

                        try {
                            for (var _iterator13 = classSelectors[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                                var classSelector = _step13.value;

                                var classIndexSelectors = [];
                                var tagIndexSelectors = [];
                                var _iteratorNormalCompletion14 = true;
                                var _didIteratorError14 = false;
                                var _iteratorError14 = undefined;

                                try {
                                    for (var _iterator14 = indices[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                                        var index = _step14.value;

                                        var classIndexSelector = classSelector + ':nth-child(' + index + ')';
                                        classIndexSelectors.push(classIndexSelector);
                                        tagIndexSelectors.push('' + tagName + classIndexSelector);
                                    }
                                } catch (err) {
                                    _didIteratorError14 = true;
                                    _iteratorError14 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion14 && _iterator14['return']) {
                                            _iterator14['return']();
                                        }
                                    } finally {
                                        if (_didIteratorError14) {
                                            throw _iteratorError14;
                                        }
                                    }
                                }

                                testSelectorLists.push(classIndexSelectors);
                                testSelectorLists.push(tagIndexSelectors);
                            }
                        } catch (err) {
                            _didIteratorError13 = true;
                            _iteratorError13 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion13 && _iterator13['return']) {
                                    _iterator13['return']();
                                }
                            } finally {
                                if (_didIteratorError13) {
                                    throw _iteratorError13;
                                }
                            }
                        }
                    }

                    if (generalize && indices.length === 1) {
                        testSelectorLists.push([allClassesSelector + ':nth-child(' + indices[0] + ')']);
                    }
                }

                if (generalize) {
                    // fail-safe for generalized case
                    testSelectorLists.push([allClassesSelector]);
                }

                if (!parentElements) {
                    if (!generalize || elements.length === 1) {
                        var _iteratorNormalCompletion15 = true;
                        var _didIteratorError15 = false;
                        var _iteratorError15 = undefined;

                        try {
                            for (var _iterator15 = testSelectorLists[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                                var testSelectorList = _step15.value;

                                var matches = root.querySelectorAll(this.mergeSelectors(testSelectorList));
                                if (matches.length === elements.length) {
                                    selectors = testSelectorList;
                                    continue indexloop;
                                }
                            }
                        } catch (err) {
                            _didIteratorError15 = true;
                            _iteratorError15 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion15 && _iterator15['return']) {
                                    _iterator15['return']();
                                }
                            } finally {
                                if (_didIteratorError15) {
                                    throw _iteratorError15;
                                }
                            }
                        }
                    }
                }

                var _iteratorNormalCompletion16 = true;
                var _didIteratorError16 = false;
                var _iteratorError16 = undefined;

                try {
                    for (var _iterator16 = testSelectorLists[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                        var testSelectorList = _step16.value;

                        var concatSelectorList = [];
                        var _iteratorNormalCompletion17 = true;
                        var _didIteratorError17 = false;
                        var _iteratorError17 = undefined;

                        try {
                            for (var _iterator17 = selectors[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                                var selector = _step17.value;
                                var _iteratorNormalCompletion22 = true;
                                var _didIteratorError22 = false;
                                var _iteratorError22 = undefined;

                                try {
                                    for (var _iterator22 = testSelectorList[Symbol.iterator](), _step22; !(_iteratorNormalCompletion22 = (_step22 = _iterator22.next()).done); _iteratorNormalCompletion22 = true) {
                                        var _testSelector = _step22.value;

                                        concatSelectorList.push(selector + ' > ' + _testSelector);
                                    }
                                } catch (err) {
                                    _didIteratorError22 = true;
                                    _iteratorError22 = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion22 && _iterator22['return']) {
                                            _iterator22['return']();
                                        }
                                    } finally {
                                        if (_didIteratorError22) {
                                            throw _iteratorError22;
                                        }
                                    }
                                }
                            }
                        } catch (err) {
                            _didIteratorError17 = true;
                            _iteratorError17 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion17 && _iterator17['return']) {
                                    _iterator17['return']();
                                }
                            } finally {
                                if (_didIteratorError17) {
                                    throw _iteratorError17;
                                }
                            }
                        }

                        if (skippedTag) {
                            // since we can't know in browser if the skipped tag was present in the source
                            // markup we have at create a selector for both options like:
                            //     prefix > suffix, prefix > skipped > suffix
                            var _iteratorNormalCompletion18 = true;
                            var _didIteratorError18 = false;
                            var _iteratorError18 = undefined;

                            try {
                                for (var _iterator18 = selectors[Symbol.iterator](), _step18; !(_iteratorNormalCompletion18 = (_step18 = _iterator18.next()).done); _iteratorNormalCompletion18 = true) {
                                    var selector = _step18.value;
                                    var _iteratorNormalCompletion19 = true;
                                    var _didIteratorError19 = false;
                                    var _iteratorError19 = undefined;

                                    try {
                                        for (var _iterator19 = testSelectorList[Symbol.iterator](), _step19; !(_iteratorNormalCompletion19 = (_step19 = _iterator19.next()).done); _iteratorNormalCompletion19 = true) {
                                            var _testSelector2 = _step19.value;

                                            concatSelectorList.push(selector + ' > ' + skippedTag + ' > ' + _testSelector2);
                                        }
                                    } catch (err) {
                                        _didIteratorError19 = true;
                                        _iteratorError19 = err;
                                    } finally {
                                        try {
                                            if (!_iteratorNormalCompletion19 && _iterator19['return']) {
                                                _iterator19['return']();
                                            }
                                        } finally {
                                            if (_didIteratorError19) {
                                                throw _iteratorError19;
                                            }
                                        }
                                    }
                                }
                            } catch (err) {
                                _didIteratorError18 = true;
                                _iteratorError18 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion18 && _iterator18['return']) {
                                        _iterator18['return']();
                                    }
                                } finally {
                                    if (_didIteratorError18) {
                                        throw _iteratorError18;
                                    }
                                }
                            }
                        }
                        var testSelector = this.mergeSelectors(concatSelectorList);
                        var matches = undefined;
                        if (parentElements) {
                            matches = new Set();
                            var _iteratorNormalCompletion20 = true;
                            var _didIteratorError20 = false;
                            var _iteratorError20 = undefined;

                            try {
                                for (var _iterator20 = parentElements[Symbol.iterator](), _step20; !(_iteratorNormalCompletion20 = (_step20 = _iterator20.next()).done); _iteratorNormalCompletion20 = true) {
                                    var parentElement = _step20.value;
                                    var _iteratorNormalCompletion21 = true;
                                    var _didIteratorError21 = false;
                                    var _iteratorError21 = undefined;

                                    try {
                                        for (var _iterator21 = parentElement.querySelectorAll(testSelector)[Symbol.iterator](), _step21; !(_iteratorNormalCompletion21 = (_step21 = _iterator21.next()).done); _iteratorNormalCompletion21 = true) {
                                            var element = _step21.value;

                                            matches.add(element);
                                        }
                                    } catch (err) {
                                        _didIteratorError21 = true;
                                        _iteratorError21 = err;
                                    } finally {
                                        try {
                                            if (!_iteratorNormalCompletion21 && _iterator21['return']) {
                                                _iterator21['return']();
                                            }
                                        } finally {
                                            if (_didIteratorError21) {
                                                throw _iteratorError21;
                                            }
                                        }
                                    }
                                }
                            } catch (err) {
                                _didIteratorError20 = true;
                                _iteratorError20 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion20 && _iterator20['return']) {
                                        _iterator20['return']();
                                    }
                                } finally {
                                    if (_didIteratorError20) {
                                        throw _iteratorError20;
                                    }
                                }
                            }

                            matches = Array.from(matches);
                        } else {
                            matches = root.querySelectorAll(testSelector);
                        }
                        if (generalize || matches.length === elements.length) {
                            selectors = concatSelectorList;
                            skippedTag = null;
                            continue indexloop;
                        }
                    }

                    // we're here because we skipped a possibly implicitly added tag
                } catch (err) {
                    _didIteratorError16 = true;
                    _iteratorError16 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion16 && _iterator16['return']) {
                            _iterator16['return']();
                        }
                    } finally {
                        if (_didIteratorError16) {
                            throw _iteratorError16;
                        }
                    }
                }

                skippedTag = tagName;
            }

            // the final tag was skipped, we need to append it now
            if (skippedTag) {
                var _selectors;

                selectors = (_selectors = selectors).concat.apply(_selectors, _toConsumableArray(selectors.map(function (selector) {
                    return selector + ' > ' + skippedTag;
                })));
            }

            return selectors;
        },

        mergeSelectors: function mergeSelectors(selectors) {
            while (Array.isArray(selectors)) {
                selectors = selectors.join(', ');
            }
            return selectors;
        },

        getGroupElementsAtIndex: function getGroupElementsAtIndex(group, index) {
            return Array.from(new Set(group.map(function (path) {
                return path[index];
            })));
        },

        getElementClassSelectors: function getElementClassSelectors(elements) {
            var classNameMap = new Map();
            var classSelectors = [];
            var _iteratorNormalCompletion23 = true;
            var _didIteratorError23 = false;
            var _iteratorError23 = undefined;

            try {
                for (var _iterator23 = elements[Symbol.iterator](), _step23; !(_iteratorNormalCompletion23 = (_step23 = _iterator23.next()).done); _iteratorNormalCompletion23 = true) {
                    var element = _step23.value;

                    if (!element.classList.length) {
                        classNameMap.clear();
                        break;
                    }

                    var _iteratorNormalCompletion25 = true;
                    var _didIteratorError25 = false;
                    var _iteratorError25 = undefined;

                    try {
                        for (var _iterator25 = Array.from(element.classList)[Symbol.iterator](), _step25; !(_iteratorNormalCompletion25 = (_step25 = _iterator25.next()).done); _iteratorNormalCompletion25 = true) {
                            var className = _step25.value;

                            classNameMap.set(className, (classNameMap.get(className) || 0) + 1);
                        }
                    } catch (err) {
                        _didIteratorError25 = true;
                        _iteratorError25 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion25 && _iterator25['return']) {
                                _iterator25['return']();
                            }
                        } finally {
                            if (_didIteratorError25) {
                                throw _iteratorError25;
                            }
                        }
                    }
                }
            } catch (err) {
                _didIteratorError23 = true;
                _iteratorError23 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion23 && _iterator23['return']) {
                        _iterator23['return']();
                    }
                } finally {
                    if (_didIteratorError23) {
                        throw _iteratorError23;
                    }
                }
            }

            var _iteratorNormalCompletion24 = true;
            var _didIteratorError24 = false;
            var _iteratorError24 = undefined;

            try {
                for (var _iterator24 = classNameMap.entries()[Symbol.iterator](), _step24; !(_iteratorNormalCompletion24 = (_step24 = _iterator24.next()).done); _iteratorNormalCompletion24 = true) {
                    var _step24$value = _slicedToArray(_step24.value, 2);

                    var className = _step24$value[0];
                    var count = _step24$value[1];

                    if (count === elements.length) {
                        classSelectors.push('.' + escapeCSS(className));
                    }
                }
            } catch (err) {
                _didIteratorError24 = true;
                _iteratorError24 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion24 && _iterator24['return']) {
                        _iterator24['return']();
                    }
                } finally {
                    if (_didIteratorError24) {
                        throw _iteratorError24;
                    }
                }
            }

            return classSelectors;
        },

        getElementIndices: function getElementIndices(elements) {
            return Array.from(new Set(elements.map(positionInParent))).sort(function (a, b) {
                return a - b;
            });
        },

        generalizationDistance: function generalizationDistance(element) {
            var paths = this.get('paths');
            var groupedPaths = this.get('groupedPaths');
            var newPath = elementPath(element);
            var newGroupedPaths = this.groupPaths([newPath].concat(paths));

            if (newGroupedPaths.length > groupedPaths.length) {
                return Infinity;
            }

            var group = newGroupedPaths.find(function (group) {
                return group[0] === newPath;
            });
            var pathLength = group[0].length;
            var distance = 0;
            var i = 0;
            var rejectElements = function rejectElements(element) {
                return element === newPath[i];
            };
            for (i = 0; i < pathLength; i++) {
                var elements = this.getGroupElementsAtIndex(group, i);
                if (elements.length === 1) {
                    continue;
                }
                var currentElements = elements.reject(rejectElements);
                var newClassSelectors = this.getElementClassSelectors(elements);
                var currentClassSelectors = this.getElementClassSelectors(currentElements);
                if (currentClassSelectors.length > newClassSelectors.length) {
                    if (newClassSelectors.length >= 1 && currentClassSelectors.length - newClassSelectors.length === 1) {
                        distance++;
                    } else {
                        return Infinity;
                    }
                }
                var newIndices = this.getElementIndices(elements);
                var currentIndices = this.getElementIndices(currentElements);
                if (currentIndices.length < newIndices.length) {
                    distance++;
                }
            }
            return distance;
        }
    });

    exports.BaseSelectorGenerator = BaseSelectorGenerator;
    var AnnotationSelectorGenerator = BaseSelectorGenerator.extend({
        selectorMatcher: null,
        annotation: null,

        acceptElements: _ember['default'].computed('annotation.acceptSelectors.[]', function () {
            var acceptSelectors = this.get('annotation.acceptSelectors');
            return this.get('selectorMatcher').query(this.mergeSelectors(acceptSelectors));
        }),
        rejectElements: _ember['default'].computed('annotation.rejectSelectors.[]', function () {
            var rejectSelectors = this.get('annotation.rejectSelectors');
            return this.get('selectorMatcher').query(this.mergeSelectors(rejectSelectors));
        }),
        generalizedSelector: _ember['default'].computed('annotation.selectionMode', 'annotation.acceptSelectors.[]', 'acceptElements.[]', 'rejectElements.[]', function () {
            if (this.get('annotation.selectionMode') === 'css') {
                var acceptSelectors = this.get('annotation.acceptSelectors');
                return this.mergeSelectors([acceptSelectors]);
            }

            var acceptElements = this.get('acceptElements');
            var paths = acceptElements.map(elementPath);
            var groupedPaths = this.groupPaths(paths);
            var selectors = this.createGeneralizedSelectors(groupedPaths);
            return this.mergeSelectors(selectors);
        }),
        elements: _ember['default'].computed('generalizedSelector', function () {
            var selector = this.get('generalizedSelector');
            return this.get('selectorMatcher').query(selector);
        }),
        selector: _ember['default'].computed('selectors', 'annotation.selectionMode', 'annotation.acceptSelectors.[]', 'acceptElements.[]', 'rejectElements.[]', function () {
            if (this.get('annotation.selectionMode') === 'css') {
                var acceptSelectors = this.get('annotation.acceptSelectors');
                if (acceptSelectors.length === 1) {
                    return this.mergeSelectors([acceptSelectors]);
                }

                var acceptElements = this.get('acceptElements');
                var acceptPaths = acceptElements.map(elementPath);
                var acceptGroupedPaths = this.groupPaths(acceptPaths);
                var newAcceptSelectors = this.createSelectors(acceptGroupedPaths);
                return this.mergeSelectors(newAcceptSelectors);
            }

            var selectors = this.get('selectors');
            var filteredSelectors = this.filterRejectedSelectors(selectors);
            return this.mergeSelectors(filteredSelectors);
        }),

        repeatedAnnotation: _ember['default'].computed('selector', 'parent.repeatedContainers', function () {
            var parent = this.get('parent');
            if (!parent) {
                return false;
            }
            var selector = this.get('selector');
            var repeatedContainers = parent.get('repeatedContainers');
            var selectorMatcher = this.get('selectorMatcher');
            var elements = selectorMatcher.query(selector);
            if (!(selector && elements && elements.length > 1)) {
                return false;
            }
            if (repeatedContainers.length > 1) {
                var _iteratorNormalCompletion26 = true;
                var _didIteratorError26 = false;
                var _iteratorError26 = undefined;

                try {
                    for (var _iterator26 = repeatedContainers[Symbol.iterator](), _step26; !(_iteratorNormalCompletion26 = (_step26 = _iterator26.next()).done); _iteratorNormalCompletion26 = true) {
                        var _container = _step26.value;

                        var i = 0;
                        var _iteratorNormalCompletion27 = true;
                        var _didIteratorError27 = false;
                        var _iteratorError27 = undefined;

                        try {
                            for (var _iterator27 = elements[Symbol.iterator](), _step27; !(_iteratorNormalCompletion27 = (_step27 = _iterator27.next()).done); _iteratorNormalCompletion27 = true) {
                                var child = _step27.value;

                                if (_container.contains(child)) {
                                    i += 1;
                                }
                                if (i > 1) {
                                    break;
                                }
                            }
                        } catch (err) {
                            _didIteratorError27 = true;
                            _iteratorError27 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion27 && _iterator27['return']) {
                                    _iterator27['return']();
                                }
                            } finally {
                                if (_didIteratorError27) {
                                    throw _iteratorError27;
                                }
                            }
                        }

                        if (i > 1) {
                            return true;
                        }
                    }
                } catch (err) {
                    _didIteratorError26 = true;
                    _iteratorError26 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion26 && _iterator26['return']) {
                            _iterator26['return']();
                        }
                    } finally {
                        if (_didIteratorError26) {
                            throw _iteratorError26;
                        }
                    }
                }
            }
            var container = findContainers(elements)[0];
            if (container) {
                var otherAnnotations = parent.get('children').filter(function (s) {
                    return s !== parent;
                });
                return !otherAnnotations.any(function (a) {
                    return a.get('parent.container') === container;
                });
            }
            return false;
        }),

        createGeneralizedSelectors: function createGeneralizedSelectors(groupedPaths) {
            var _this2 = this;

            var selectors = groupedPaths.map(function (group) {
                return _this2.createGroupSelectors(group, null, true);
            });
            return this.filterRejectedSelectors(selectors);
        },

        filterRejectedSelectors: function filterRejectedSelectors(selectors) {
            var _this3 = this;

            var selectorMatcher = this.get('selectorMatcher');
            var rejectElements = new Set(this.get('rejectElements'));
            return selectors.map(function (selectors) {
                // if the generalized selector contains a rejected element, create a new selector
                // that matches only the other elements
                var elements = Array.from(selectorMatcher.query(_this3.mergeSelectors(selectors)));
                var allowedElements = elements.filter(function (element) {
                    return !rejectElements.has(element);
                });
                if (elements.length === allowedElements.length) {
                    return selectors;
                }
                var paths = allowedElements.map(elementPath);
                var allowedSelectors = _this3.createSelectors([paths]);
                return allowedSelectors[0];
            });
        }
    });

    exports.AnnotationSelectorGenerator = AnnotationSelectorGenerator;
    var ContainerSelectorGenerator = BaseSelectorGenerator.extend({
        init: function init() {
            this._super.apply(this, arguments);
            this.set('children', []);
        },

        destroy: function destroy() {
            var _iteratorNormalCompletion28 = true;
            var _didIteratorError28 = false;
            var _iteratorError28 = undefined;

            try {
                for (var _iterator28 = this.get('children')[Symbol.iterator](), _step28; !(_iteratorNormalCompletion28 = (_step28 = _iterator28.next()).done); _iteratorNormalCompletion28 = true) {
                    var child = _step28.value;

                    child.set('parent', null);
                }
            } catch (err) {
                _didIteratorError28 = true;
                _iteratorError28 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion28 && _iterator28['return']) {
                        _iterator28['return']();
                    }
                } finally {
                    if (_didIteratorError28) {
                        throw _iteratorError28;
                    }
                }
            }

            this.set('children', null);
            this._super.apply(this, arguments);
        },

        childElements: _ember['default'].computed.mapBy('children', 'elements'),
        container: _ember['default'].computed('childElements', function () {
            var childElements = this.get('childElements');
            return findContainer(childElements);
        }),
        containerSelector: _ember['default'].computed('container', function () {
            var container = this.get('container');
            if (container) {
                var selectors = this.createSelectors([[elementPath(container)]]);
                return this.mergeSelectors(selectors);
            }
            return 'body';
        }),
        repeatedContainersAndSiblings: _ember['default'].computed('childElements', 'container', function () {
            var childElements = this.get('childElements');
            var container = this.get('container');
            // TODO: support separated trees
            return findRepeatedContainers(childElements, container);
        }),
        repeatedContainers: _ember['default'].computed.readOnly('repeatedContainersAndSiblings.firstObject'),
        siblings: _ember['default'].computed.readOnly('repeatedContainersAndSiblings.lastObject'),
        elements: _ember['default'].computed('container', 'repeatedContainers', function () {
            var container = this.get('container');
            var repeatedContainers = this.get('repeatedContainers');
            if (repeatedContainers.length) {
                return repeatedContainers;
            }
            if (container) {
                return [container];
            }
            return [];
        }),

        addChild: function addChild(childGenerator) {
            this.get('children').addObject(childGenerator);
            childGenerator.set('parent', this);
        },

        addChildren: function addChildren(childGenerators) {
            var children = this.get('children');
            children.addObjects(childGenerators);
            var _iteratorNormalCompletion29 = true;
            var _didIteratorError29 = false;
            var _iteratorError29 = undefined;

            try {
                for (var _iterator29 = childGenerators[Symbol.iterator](), _step29; !(_iteratorNormalCompletion29 = (_step29 = _iterator29.next()).done); _iteratorNormalCompletion29 = true) {
                    var childGenerator = _step29.value;

                    childGenerator.set('parent', this);
                }
            } catch (err) {
                _didIteratorError29 = true;
                _iteratorError29 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion29 && _iterator29['return']) {
                        _iterator29['return']();
                    }
                } finally {
                    if (_didIteratorError29) {
                        throw _iteratorError29;
                    }
                }
            }
        }
    });

    exports.ContainerSelectorGenerator = ContainerSelectorGenerator;

    function setIntersection(a, b) {
        return new Set([].concat(_toConsumableArray(a)).filter(function (x) {
            return b.has(x);
        }));
    }

    function setDifference(a, b) {
        return new Set([].concat(_toConsumableArray(a)).filter(function (x) {
            return !b.has(x);
        }));
    }

    function getParents(element, upto) {
        if (!element) {
            return [];
        }
        var parents = [],
            parent = element.parentElement;
        while (parent) {
            parents.push(parent);
            parent = parent.parentElement;
            if (parent === upto) {
                return parents;
            }
        }
        return parents;
    }

    function getPreviousSiblings(element, upto) {
        if (!element) {
            return [];
        }
        var siblings = [],
            sibling = element.previousElementSibling;
        while (sibling && sibling !== upto) {
            siblings.push(sibling);
            sibling = sibling.previousElementSibling;
        }
        return siblings;
    }

    function closestParentIndex(element, parents) {
        if (parents === undefined) {
            parents = getParents(element);
            parents.unshift(element);
        }
        var elementIndex = parents.indexOf(element);
        if (elementIndex < 0) {
            return 0;
        }
        return parents.length - elementIndex;
    }

    function findContainers(extractedElements, upto) {
        var parentArrays = [];
        var _iteratorNormalCompletion30 = true;
        var _didIteratorError30 = false;
        var _iteratorError30 = undefined;

        try {
            for (var _iterator30 = extractedElements[Symbol.iterator](), _step30; !(_iteratorNormalCompletion30 = (_step30 = _iterator30.next()).done); _iteratorNormalCompletion30 = true) {
                var element = _step30.value;

                parentArrays.push(getParents(element, upto));
            }
        } catch (err) {
            _didIteratorError30 = true;
            _iteratorError30 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion30 && _iterator30['return']) {
                    _iterator30['return']();
                }
            } finally {
                if (_didIteratorError30) {
                    throw _iteratorError30;
                }
            }
        }

        var parentSets = parentArrays.map(function (array) {
            return new Set(array);
        }),
            intersection = parentSets[0] || new Set();
        var _iteratorNormalCompletion31 = true;
        var _didIteratorError31 = false;
        var _iteratorError31 = undefined;

        try {
            for (var _iterator31 = parentSets.slice(1, parentSets.length)[Symbol.iterator](), _step31; !(_iteratorNormalCompletion31 = (_step31 = _iterator31.next()).done); _iteratorNormalCompletion31 = true) {
                var set = _step31.value;

                intersection = setIntersection(intersection, set);
            }
        } catch (err) {
            _didIteratorError31 = true;
            _iteratorError31 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion31 && _iterator31['return']) {
                    _iterator31['return']();
                }
            } finally {
                if (_didIteratorError31) {
                    throw _iteratorError31;
                }
            }
        }

        return Array.from(intersection);
    }

    function findContainer(extractedElements) {
        var _ref;

        return findContainers((_ref = []).concat.apply(_ref, _toConsumableArray(extractedElements)))[0];
    }

    function findRepeatedContainers(extracted, container) {
        var groupedItems = groupItems(extracted, container);
        if (groupedItems.length === 1) {
            return [[], 0];
        }
        var repeatedParents = groupedItems.map(function (item) {
            return findContainers(item, container);
        });
        if (repeatedParents.length === 0) {
            return [[], 0];
        }
        var allEqualLength = repeatedParents.isEvery('length', repeatedParents[0].length);
        if (allEqualLength && new Set(repeatedParents.map(function (item) {
            return item[0];
        })).size === repeatedParents.length) {
            return [repeatedParents[0].length ? repeatedParents.map(function (list) {
                return list[0];
            }) : [], 0];
        } else {
            var _ret = (function () {
                var shortest = Math.min.apply(Math, _toConsumableArray(repeatedParents.map(function (e) {
                    return e.length;
                })));
                repeatedParents = repeatedParents.map(function (item) {
                    return item.slice(item.length - shortest, item.length);
                });
                if (new Set(repeatedParents.map(function (item) {
                    return item[0];
                })).size === repeatedParents.length) {
                    return {
                        v: [repeatedParents[0].length ? repeatedParents.map(function (list) {
                            return list[0];
                        }) : [], 0]
                    };
                }
            })();

            if (typeof _ret === 'object') return _ret.v;
        }
        return parentWithSiblings(groupedItems, container);
    }

    function parentWithSiblings(groupedItems, container) {
        // 1. Get bounds
        var itemBounds = getItemBounds(groupedItems, false),
            itemParents = [],
            sharedItemParents = new Set(),
            sharedParents = new Set();
        // 2. Using highest and lowest parents remove any parents shared by other groups
        var _iteratorNormalCompletion32 = true;
        var _didIteratorError32 = false;
        var _iteratorError32 = undefined;

        try {
            for (var _iterator32 = itemBounds[Symbol.iterator](), _step32; !(_iteratorNormalCompletion32 = (_step32 = _iterator32.next()).done); _iteratorNormalCompletion32 = true) {
                var _step32$value = _slicedToArray(_step32.value, 2);

                var highest = _step32$value[0];
                var lowest = _step32$value[1];

                itemParents.push([getParents(highest, container).reverse(), getParents(lowest, container).reverse()]);
            }
        } catch (err) {
            _didIteratorError32 = true;
            _iteratorError32 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion32 && _iterator32['return']) {
                    _iterator32['return']();
                }
            } finally {
                if (_didIteratorError32) {
                    throw _iteratorError32;
                }
            }
        }

        var _iteratorNormalCompletion33 = true;
        var _didIteratorError33 = false;
        var _iteratorError33 = undefined;

        try {
            for (var _iterator33 = itemParents[Symbol.iterator](), _step33; !(_iteratorNormalCompletion33 = (_step33 = _iterator33.next()).done); _iteratorNormalCompletion33 = true) {
                var fields = _step33.value;
                var _iteratorNormalCompletion35 = true;
                var _didIteratorError35 = false;
                var _iteratorError35 = undefined;

                try {
                    for (var _iterator35 = fields[Symbol.iterator](), _step35; !(_iteratorNormalCompletion35 = (_step35 = _iterator35.next()).done); _iteratorNormalCompletion35 = true) {
                        var fieldParents = _step35.value;
                        var _iteratorNormalCompletion36 = true;
                        var _didIteratorError36 = false;
                        var _iteratorError36 = undefined;

                        try {
                            for (var _iterator36 = fieldParents[Symbol.iterator](), _step36; !(_iteratorNormalCompletion36 = (_step36 = _iterator36.next()).done); _iteratorNormalCompletion36 = true) {
                                var _parent = _step36.value;

                                if (sharedItemParents.has(_parent)) {
                                    sharedParents.add(_parent);
                                } else {
                                    sharedItemParents.add(_parent);
                                }
                            }
                        } catch (err) {
                            _didIteratorError36 = true;
                            _iteratorError36 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion36 && _iterator36['return']) {
                                    _iterator36['return']();
                                }
                            } finally {
                                if (_didIteratorError36) {
                                    throw _iteratorError36;
                                }
                            }
                        }
                    }
                } catch (err) {
                    _didIteratorError35 = true;
                    _iteratorError35 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion35 && _iterator35['return']) {
                            _iterator35['return']();
                        }
                    } finally {
                        if (_didIteratorError35) {
                            throw _iteratorError35;
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError33 = true;
            _iteratorError33 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion33 && _iterator33['return']) {
                    _iterator33['return']();
                }
            } finally {
                if (_didIteratorError33) {
                    throw _iteratorError33;
                }
            }
        }

        var i = 0;
        var filterNotShared = function filterNotShared(e) {
            return !sharedParents.has(e);
        };
        var _iteratorNormalCompletion34 = true;
        var _didIteratorError34 = false;
        var _iteratorError34 = undefined;

        try {
            for (var _iterator34 = itemParents[Symbol.iterator](), _step34; !(_iteratorNormalCompletion34 = (_step34 = _iterator34.next()).done); _iteratorNormalCompletion34 = true) {
                var _step34$value = _slicedToArray(_step34.value, 2);

                var highest = _step34$value[0];
                var lowest = _step34$value[1];

                itemParents[i] = [highest.filter(filterNotShared), lowest.filter(filterNotShared)];
                i += 1;
            }
            // TODO: Check if not siblings
            // 3. For each item find sibling distance between highest and lowest if they
            //    don't have a parent that isn't shared with other items. Use minimum
        } catch (err) {
            _didIteratorError34 = true;
            _iteratorError34 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion34 && _iterator34['return']) {
                    _iterator34['return']();
                }
            } finally {
                if (_didIteratorError34) {
                    throw _iteratorError34;
                }
            }
        }

        var siblings = itemParents.map(function (bounds) {
            return getPreviousSiblings(bounds[1][0], bounds[0][0]).length + 1;
        }),
            siblingDistance = Math.min.apply(Math, _toConsumableArray(siblings));
        // 5. Use the highest unshared parent of the highest field of the first item
        //    as the repeating container
        var containers = itemParents.map(function (lists) {
            return lists[0][0];
        })
        // remove undefined
        .filter(function (containers) {
            return !!containers;
        });
        return [containers, siblingDistance];
    }

    function getItemBounds(items) {
        var tagNumber = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

        var elementMap = {};
        return items.map(function (elements) {
            var tagids = [];
            var _iteratorNormalCompletion37 = true;
            var _didIteratorError37 = false;
            var _iteratorError37 = undefined;

            try {
                for (var _iterator37 = elements[Symbol.iterator](), _step37; !(_iteratorNormalCompletion37 = (_step37 = _iterator37.next()).done); _iteratorNormalCompletion37 = true) {
                    var element = _step37.value;

                    // TODO: Find incrementing id from dom nodes rather than
                    //       attribute added by backend
                    var tagid = element.getAttribute('data-tagid');
                    if (tagid) {
                        tagid = parseInt(tagid);
                        tagids.push(tagid);
                        elementMap[tagid] = element;
                    }
                }
            } catch (err) {
                _didIteratorError37 = true;
                _iteratorError37 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion37 && _iterator37['return']) {
                        _iterator37['return']();
                    }
                } finally {
                    if (_didIteratorError37) {
                        throw _iteratorError37;
                    }
                }
            }

            if (tagNumber) {
                return [Math.min.apply(Math, tagids), Math.max.apply(Math, tagids)];
            }
            return [elementMap[Math.min.apply(Math, tagids)], elementMap[Math.max.apply(Math, tagids)]];
        });
    }

    function groupItems(extracted, upto) {
        var groups = {},
            id = 0;
        // Group fields based on their color
        // TODO: Group by schema too
        var _iteratorNormalCompletion38 = true;
        var _didIteratorError38 = false;
        var _iteratorError38 = undefined;

        try {
            for (var _iterator38 = extracted[Symbol.iterator](), _step38; !(_iteratorNormalCompletion38 = (_step38 = _iterator38.next()).done); _iteratorNormalCompletion38 = true) {
                var elements = _step38.value;

                groups[id] = elements;
                id += 1;
            }
            // If all groups are the same length page has a regular structure where
            // all items have the necessary fields and share a common repeating parent
        } catch (err) {
            _didIteratorError38 = true;
            _iteratorError38 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion38 && _iterator38['return']) {
                    _iterator38['return']();
                }
            } finally {
                if (_didIteratorError38) {
                    throw _iteratorError38;
                }
            }
        }

        var groupLengths = new Set(Object.keys(groups).map(function (key) {
            return groups[key].length;
        }));
        if (groupLengths.size === 1) {
            return makeItemsFromGroups(groups);
        }
        var longest = Math.max.apply(Math, _toConsumableArray(groupLengths)),
            longestGroups = {},
            otherGroups = {};
        for (var key in groups) {
            if (groups[key].length === longest) {
                longestGroups[key] = groups[key];
            } else {
                otherGroups[key] = groups[key];
            }
        }
        // Find bounding tagids for each item
        var items = makeItemsFromGroups(longestGroups),
            itemBounds = getItemBounds(items);
        var remainingFields = {};
        var i = 0,
            seenElements = new Set();
        // Place bounded elements into corresponding items and
        // find parents for unbounded fields
        for (var fieldKey in otherGroups) {
            var fieldGroup = otherGroups[fieldKey];
            var _iteratorNormalCompletion39 = true;
            var _didIteratorError39 = false;
            var _iteratorError39 = undefined;

            try {
                for (var _iterator39 = fieldGroup[Symbol.iterator](), _step39; !(_iteratorNormalCompletion39 = (_step39 = _iterator39.next()).done); _iteratorNormalCompletion39 = true) {
                    var element = _step39.value;

                    i = 0;
                    var _iteratorNormalCompletion40 = true;
                    var _didIteratorError40 = false;
                    var _iteratorError40 = undefined;

                    try {
                        for (var _iterator40 = itemBounds[Symbol.iterator](), _step40; !(_iteratorNormalCompletion40 = (_step40 = _iterator40.next()).done); _iteratorNormalCompletion40 = true) {
                            var _step40$value = _slicedToArray(_step40.value, 2);

                            var min = _step40$value[0];
                            var max = _step40$value[1];

                            var tagid = parseInt(element.getAttribute('data-tagid'));
                            if (tagid && tagid > min && tagid < max) {
                                items[i].push(element);
                                seenElements.add(element);
                                break;
                            }
                            i += 1;
                        }
                    } catch (err) {
                        _didIteratorError40 = true;
                        _iteratorError40 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion40 && _iterator40['return']) {
                                _iterator40['return']();
                            }
                        } finally {
                            if (_didIteratorError40) {
                                throw _iteratorError40;
                            }
                        }
                    }

                    if (!seenElements.has(element)) {
                        if (remainingFields[fieldKey]) {
                            remainingFields[fieldKey].push([element, getParents(element, upto)]);
                        } else {
                            remainingFields[fieldKey] = [[element, getParents(element, upto)]];
                        }
                    }
                }
            } catch (err) {
                _didIteratorError39 = true;
                _iteratorError39 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion39 && _iterator39['return']) {
                        _iterator39['return']();
                    }
                } finally {
                    if (_didIteratorError39) {
                        throw _iteratorError39;
                    }
                }
            }
        }
        // Find parents for each field in an item for all items
        var itemsParents = [];
        var _iteratorNormalCompletion41 = true;
        var _didIteratorError41 = false;
        var _iteratorError41 = undefined;

        try {
            for (var _iterator41 = items[Symbol.iterator](), _step41; !(_iteratorNormalCompletion41 = (_step41 = _iterator41.next()).done); _iteratorNormalCompletion41 = true) {
                var item = _step41.value;

                var itemParents = [];
                var _iteratorNormalCompletion44 = true;
                var _didIteratorError44 = false;
                var _iteratorError44 = undefined;

                try {
                    for (var _iterator44 = item[Symbol.iterator](), _step44; !(_iteratorNormalCompletion44 = (_step44 = _iterator44.next()).done); _iteratorNormalCompletion44 = true) {
                        var element = _step44.value;

                        itemParents = itemParents.concat(getParents(element, upto));
                    }
                } catch (err) {
                    _didIteratorError44 = true;
                    _iteratorError44 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion44 && _iterator44['return']) {
                            _iterator44['return']();
                        }
                    } finally {
                        if (_didIteratorError44) {
                            throw _iteratorError44;
                        }
                    }
                }

                var parentCount = [],
                    seenParents = [],
                    orderedParents = [];
                var _iteratorNormalCompletion45 = true;
                var _didIteratorError45 = false;
                var _iteratorError45 = undefined;

                try {
                    for (var _iterator45 = itemParents[Symbol.iterator](), _step45; !(_iteratorNormalCompletion45 = (_step45 = _iterator45.next()).done); _iteratorNormalCompletion45 = true) {
                        var _parent2 = _step45.value;

                        var parentIdx = seenParents.indexOf(_parent2);
                        if (parentIdx > 0) {
                            parentCount[parentIdx] += 1;
                        } else {
                            parentCount.push(1);
                            seenParents.push(_parent2);
                        }
                    }
                    // Order parents by ones with the most descendant fields
                } catch (err) {
                    _didIteratorError45 = true;
                    _iteratorError45 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion45 && _iterator45['return']) {
                            _iterator45['return']();
                        }
                    } finally {
                        if (_didIteratorError45) {
                            throw _iteratorError45;
                        }
                    }
                }

                for (i = 0; i < seenParents.length; i++) {
                    orderedParents.push([parentCount[i], seenParents[i]]);
                }
                itemParents = [];
                var _iteratorNormalCompletion46 = true;
                var _didIteratorError46 = false;
                var _iteratorError46 = undefined;

                try {
                    for (var _iterator46 = orderedParents.sort()[Symbol.iterator](), _step46; !(_iteratorNormalCompletion46 = (_step46 = _iterator46.next()).done); _iteratorNormalCompletion46 = true) {
                        var _parent3 = _step46.value;

                        itemParents.push(_parent3[1]);
                    }
                } catch (err) {
                    _didIteratorError46 = true;
                    _iteratorError46 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion46 && _iterator46['return']) {
                            _iterator46['return']();
                        }
                    } finally {
                        if (_didIteratorError46) {
                            throw _iteratorError46;
                        }
                    }
                }

                itemsParents.push(new Set(itemParents));
            }
            // Remove parents shared by multiple items
        } catch (err) {
            _didIteratorError41 = true;
            _iteratorError41 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion41 && _iterator41['return']) {
                    _iterator41['return']();
                }
            } finally {
                if (_didIteratorError41) {
                    throw _iteratorError41;
                }
            }
        }

        var uniqueParents = [];
        var _iteratorNormalCompletion42 = true;
        var _didIteratorError42 = false;
        var _iteratorError42 = undefined;

        try {
            for (var _iterator42 = itemsParents[Symbol.iterator](), _step42; !(_iteratorNormalCompletion42 = (_step42 = _iterator42.next()).done); _iteratorNormalCompletion42 = true) {
                var parents = _step42.value;
                var _iteratorNormalCompletion47 = true;
                var _didIteratorError47 = false;
                var _iteratorError47 = undefined;

                try {
                    for (var _iterator47 = itemsParents[Symbol.iterator](), _step47; !(_iteratorNormalCompletion47 = (_step47 = _iterator47.next()).done); _iteratorNormalCompletion47 = true) {
                        var otherParents = _step47.value;

                        if (otherParents === parents) {
                            continue;
                        }
                        parents = setDifference(parents, otherParents);
                    }
                } catch (err) {
                    _didIteratorError47 = true;
                    _iteratorError47 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion47 && _iterator47['return']) {
                            _iterator47['return']();
                        }
                    } finally {
                        if (_didIteratorError47) {
                            throw _iteratorError47;
                        }
                    }
                }

                uniqueParents.push(parents);
            }
        } catch (err) {
            _didIteratorError42 = true;
            _iteratorError42 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion42 && _iterator42['return']) {
                    _iterator42['return']();
                }
            } finally {
                if (_didIteratorError42) {
                    throw _iteratorError42;
                }
            }
        }

        i = 0;
        var _iteratorNormalCompletion43 = true;
        var _didIteratorError43 = false;
        var _iteratorError43 = undefined;

        try {
            for (var _iterator43 = uniqueParents[Symbol.iterator](), _step43; !(_iteratorNormalCompletion43 = (_step43 = _iterator43.next()).done); _iteratorNormalCompletion43 = true) {
                var itemParents = _step43.value;

                for (var key in remainingFields) {
                    var _iteratorNormalCompletion48 = true;
                    var _didIteratorError48 = false;
                    var _iteratorError48 = undefined;

                    try {
                        for (var _iterator48 = remainingFields[key][Symbol.iterator](), _step48; !(_iteratorNormalCompletion48 = (_step48 = _iterator48.next()).done); _iteratorNormalCompletion48 = true) {
                            var _step48$value = _slicedToArray(_step48.value, 2);

                            var element = _step48$value[0];
                            var elementParents = _step48$value[1];
                            var _iteratorNormalCompletion49 = true;
                            var _didIteratorError49 = false;
                            var _iteratorError49 = undefined;

                            try {
                                for (var _iterator49 = elementParents[Symbol.iterator](), _step49; !(_iteratorNormalCompletion49 = (_step49 = _iterator49.next()).done); _iteratorNormalCompletion49 = true) {
                                    var _parent4 = _step49.value;

                                    if (itemParents.has(_parent4)) {
                                        items[i].push(element);
                                        break;
                                    }
                                }
                            } catch (err) {
                                _didIteratorError49 = true;
                                _iteratorError49 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion49 && _iterator49['return']) {
                                        _iterator49['return']();
                                    }
                                } finally {
                                    if (_didIteratorError49) {
                                        throw _iteratorError49;
                                    }
                                }
                            }
                        }
                    } catch (err) {
                        _didIteratorError48 = true;
                        _iteratorError48 = err;
                    } finally {
                        try {
                            if (!_iteratorNormalCompletion48 && _iterator48['return']) {
                                _iterator48['return']();
                            }
                        } finally {
                            if (_didIteratorError48) {
                                throw _iteratorError48;
                            }
                        }
                    }
                }
                i += 1;
            }
            // TODO: Fields that are not in all items and are below the item bounds still
            //       need to be matched -> all tests pass without this, need a breaking test
        } catch (err) {
            _didIteratorError43 = true;
            _iteratorError43 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion43 && _iterator43['return']) {
                    _iterator43['return']();
                }
            } finally {
                if (_didIteratorError43) {
                    throw _iteratorError43;
                }
            }
        }

        return items;
    }

    function makeItemsFromGroups(groups) {
        var items = [];
        var _iteratorNormalCompletion50 = true;
        var _didIteratorError50 = false;
        var _iteratorError50 = undefined;

        try {
            for (var _iterator50 = Object.keys(groups)[Symbol.iterator](), _step50; !(_iteratorNormalCompletion50 = (_step50 = _iterator50.next()).done); _iteratorNormalCompletion50 = true) {
                var key = _step50.value;
                var _iteratorNormalCompletion51 = true;
                var _didIteratorError51 = false;
                var _iteratorError51 = undefined;

                try {
                    for (var _iterator51 = groups[key].entries()[Symbol.iterator](), _step51; !(_iteratorNormalCompletion51 = (_step51 = _iterator51.next()).done); _iteratorNormalCompletion51 = true) {
                        var _step51$value = _slicedToArray(_step51.value, 2);

                        var i = _step51$value[0];
                        var item = _step51$value[1];

                        if (!items[i]) {
                            items[i] = [];
                        }
                        items[i].push(item);
                    }
                } catch (err) {
                    _didIteratorError51 = true;
                    _iteratorError51 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion51 && _iterator51['return']) {
                            _iterator51['return']();
                        }
                    } finally {
                        if (_didIteratorError51) {
                            throw _iteratorError51;
                        }
                    }
                }
            }
        } catch (err) {
            _didIteratorError50 = true;
            _iteratorError50 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion50 && _iterator50['return']) {
                    _iterator50['return']();
                }
            } finally {
                if (_didIteratorError50) {
                    throw _iteratorError50;
                }
            }
        }

        return items;
    }

    function createSelectorGenerators(structure, selectorMatcher) {
        var accumulator = [];
        accumulateSelectorGenerators(structure, selectorMatcher, accumulator);
        return accumulator;
    }

    function accumulateSelectorGenerators(structure, selectorMatcher, accumulator) {
        var generators = [];

        var _iteratorNormalCompletion52 = true;
        var _didIteratorError52 = false;
        var _iteratorError52 = undefined;

        try {
            for (var _iterator52 = structure[Symbol.iterator](), _step52; !(_iteratorNormalCompletion52 = (_step52 = _iterator52.next()).done); _iteratorNormalCompletion52 = true) {
                var element = _step52.value;
                var annotation = element.annotation;
                var children = element.children;

                var selectorGenerator = undefined;
                if (children) {
                    selectorGenerator = ContainerSelectorGenerator.create({});
                    selectorGenerator.addChildren(accumulateSelectorGenerators(children, selectorMatcher, accumulator));
                } else {
                    selectorGenerator = AnnotationSelectorGenerator.create({
                        selectorMatcher: selectorMatcher,
                        annotation: annotation
                    });
                }
                generators.push(selectorGenerator);
                accumulator.push([annotation, selectorGenerator]);
            }
        } catch (err) {
            _didIteratorError52 = true;
            _iteratorError52 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion52 && _iterator52['return']) {
                    _iterator52['return']();
                }
            } finally {
                if (_didIteratorError52) {
                    throw _iteratorError52;
                }
            }
        }

        return generators;
    }

    exports['default'] = {
        BaseSelectorGenerator: BaseSelectorGenerator,
        AnnotationSelectorGenerator: AnnotationSelectorGenerator,
        ContainerSelectorGenerator: ContainerSelectorGenerator,
        pathSelector: pathSelector,
        uniquePathSelector: uniquePathSelector,
        smartSelector: smartSelector,
        cssToXpath: cssToXpath,
        findContainer: findContainer,
        findRepeatedContainers: findRepeatedContainers
    };
});
define('portia-ui/utils/start-urls', ['exports'], function (exports) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.allLetters = allLetters;
    exports.allDigits = allDigits;
    exports.fragmentToString = fragmentToString;
    exports.augmentFragmentList = augmentFragmentList;
    exports.includesUrl = includesUrl;
    exports.multiplicityFragment = multiplicityFragment;
    var SAMPLE_SIZE = 20;
    var ALL_DIGITS = /^\d+-\d+$/;
    var ALL_LETTERS = /^[a-zA-Z]+-[a-zA-Z]+$/;

    function nextLetter(letter) {
        return String.fromCharCode(letter.charCodeAt(0) + 1);
    }

    function numberRange(a, b) {
        var numbers = [];
        for (var i = a; i < b + 1; i += 1) {
            numbers.push(i.toString());
        }
        return numbers;
    }

    function letterRange(a, b) {
        var letters = [];
        letters.push(a);

        while (!letters.contains(b)) {
            var lastLetter = letters.get('lastObject');
            letters.pushObject(nextLetter(lastLetter));
        }
        return letters;
    }

    function _processDigitRange(value) {
        var endpoints = value.split('-');

        var _endpoints$map = endpoints.map(function (x) {
            return parseInt(x);
        });

        var _endpoints$map2 = _slicedToArray(_endpoints$map, 2);

        var a = _endpoints$map2[0];
        var b = _endpoints$map2[1];

        b = Math.min(b, a + SAMPLE_SIZE);
        return [a, b];
    }

    function augmentRange(fragment_value) {
        if (allDigits(fragment_value)) {
            var _processDigitRange2 = _processDigitRange(fragment_value);

            var _processDigitRange22 = _slicedToArray(_processDigitRange2, 2);

            var a = _processDigitRange22[0];
            var b = _processDigitRange22[1];

            return numberRange(a, b);
        }

        if (allLetters(fragment_value)) {
            var _fragment_value$split = fragment_value.split('-');

            var _fragment_value$split2 = _slicedToArray(_fragment_value$split, 2);

            var a = _fragment_value$split2[0];
            var b = _fragment_value$split2[1];

            return letterRange(a, b);
        }
    }

    function augmentFragment(fragment) {
        switch (fragment.type) {
            case 'fixed':
                return [fragment.value];
            case 'list':
                return fragment.value.split(' ');
            case 'range':
                var value = fragment.value;

                if (allLetters(value) || allDigits(value)) {
                    return augmentRange(value);
                }

                return [''];
        }
    }

    function allLetters(value) {
        return value.match(ALL_LETTERS);
    }

    function allDigits(value) {
        return value.match(ALL_DIGITS);
    }

    function fragmentToString(fragment) {
        switch (fragment.type) {
            case 'fixed':
                return fragment.value;
            case 'list':
                return '[...]';
            case 'range':
                return '[' + fragment.value + ']';
        }
    }

    function augmentFragmentList(fragmentList, fragment) {
        var result = [];
        var newFragments = augmentFragment(fragment);

        newFragments.forEach(function (newFragment) {
            result.push(fragmentList.concat(newFragment));
        });
        return result;
    }

    function includesUrl(spider, url) {
        return spider.get('startUrls').mapBy('url').includes(url);
    }

    function multiplicityFragment(fragment) {
        switch (fragment.type) {
            case 'fixed':
                return 1;
            case 'list':
                return fragment.value.split(' ').length;
            case 'range':
                var value = fragment.value;

                var _value$split = value.split('-'),
                    _value$split2 = _slicedToArray(_value$split, 2),
                    a = _value$split2[0],
                    b = _value$split2[1];

                if (allLetters(value)) {
                    return letterRange(a, b).length;
                }
                if (allDigits(value)) {
                    return numberRange(parseInt(a), parseInt(b)).length;
                }
                return 1;
        }
    }

    exports['default'] = {
        allDigits: allDigits,
        allLetters: allLetters,
        augmentFragmentList: augmentFragmentList,
        fragmentToString: fragmentToString,
        includesUrl: includesUrl,
        multiplicityFragment: multiplicityFragment
    };
});
define('portia-ui/utils/tree-mirror-delegate', ['exports'], function (exports) {
    exports['default'] = treeMirrorDelegate;

    function paintCanvasMessage(canvas) {
        var ctx = canvas.getContext('2d');

        var pattern = document.createElement('canvas');
        pattern.width = 20;
        pattern.height = 20;
        var pctx = pattern.getContext('2d');
        pctx.fillStyle = "#ccc";
        pctx.fillRect(0, 0, 10, 10);
        pctx.fillRect(10, 10, 10, 10);
        pattern = ctx.createPattern(pattern, "repeat");

        ctx.fillStyle = pattern;
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.font = '16px sans-serif';
        ctx.fillStyle = 'black';
        ctx.fillText('Displaying the content of the canvas is not supported', 10, canvas.height / 2);
    }

    function addEmbedBlockedMessage(node) {
        if (!node || !node.parentNode || /EMBED|OBJECT/.test(node.parentNode.tagName)) {
            return;
        }
        var computedStyle = window.getComputedStyle(node);

        var width = node.hasAttribute("width") ? node.getAttribute("width") + "px" : computedStyle.width;
        var height = node.hasAttribute("height") ? node.getAttribute("height") + "px" : computedStyle.height;

        var errorMsg = $("<div/>").css({
            'background-color': '#269',
            'background-image': 'linear-gradient(rgba(255,255,255,.2) 1px, transparent 1px), ' + 'linear-gradient(90deg, rgba(255,255,255,.2) 1px, transparent 1px)',
            'background-size': '20px 20px, 20px 20px',
            'text-align': "center",
            'overflow': "hidden",
            'font-size': "18px",
            'display': "block",
            'font-family': 'sans-serif',
            'color': 'white',
            'text-shadow': '1px black',
            'width': width,
            'height': height,
            'lineHeight': height
        }).text("Portia doesn't support browser plugins.");
        node.style.display = "none";
        node.parentNode.insertBefore(errorMsg[0], node);
    }

    function treeMirrorDelegate() {
        return {
            cssEnabled: true,
            createElement: function createElement(tagName) {
                var node = null;
                if (tagName === 'SCRIPT' || tagName === 'META' || tagName === 'BASE') {
                    node = document.createElement('NOSCRIPT');
                } else {
                    try {
                        node = document.createElement(tagName);
                    } catch (e) {
                        // Invalid tag name
                        node = document.createElement('NOSCRIPT');
                    }
                }
                if (tagName === 'FORM') {
                    $(node).on('submit', function () {
                        return false;
                    });
                } else if (tagName === 'IFRAME' || tagName === 'FRAME') {
                    node.setAttribute('src', '/static/frames-not-supported.html');
                } else if (tagName === 'CANVAS') {
                    paintCanvasMessage(node);
                } else if (tagName === 'OBJECT' || tagName === 'EMBED') {
                    setTimeout(addEmbedBlockedMessage.bind(null, node), 100);
                }
                return node;
            },
            setAttribute: function setAttribute(node, attrName, value) {
                if (/^on/.test(attrName) || // Disallow JS attributes
                (node.tagName === 'FRAME' || node.tagName === 'IFRAME') && (attrName === 'src' || attrName === 'srcdoc') || // Frames not supported
                (node.tagName === 'OBJECT' || node.tagName === 'EMBED') && (attrName === 'data' || attrName === 'src') // Block embed / object
                ) {
                        return true;
                    }

                // make sure tree mutations take into account disabled CSS
                if (!this.cssEnabled) {
                    if (attrName === 'style') {
                        attrName = 'data-portia-hidden-style';
                    } else if (node.tagName === 'STYLE' && attrName === 'media') {
                        attrName = 'data-portia-hidden-media';
                    } else if (node.tagName === 'LINK') {
                        if (attrName === 'media' && node.getAttribute('rel') === 'stylesheet') {
                            attrName = 'data-portia-hidden-media';
                        } else if (attrName === 'rel' && value === 'stylesheet' && node.hasAttribute('media')) {
                            node.setAttribute('data-portia-hidden-media', node.getAttribute('media'));
                            node.removeAttribute('media');
                        }
                    }
                }

                try {
                    node.setAttribute(attrName, value);
                } catch (e) {
                    console.log(e, attrName, value);
                }

                if (node.tagName === 'CANVAS' && (attrName === 'width' || attrName === 'height')) {
                    paintCanvasMessage(node);
                }

                return true;
            }
        };
    }
});
define('portia-ui/utils/types', ['exports'], function (exports) {
    exports.toType = toType;
    exports.isObject = isObject;
    exports.isArray = isArray;

    function toType(obj) {
        return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    }

    function isObject(obj) {
        return toType(obj) === 'object';
    }

    function isArray(obj) {
        return Array.isArray(obj);
    }
});
define('portia-ui/utils/utils', ['exports', 'ember'], function (exports, _ember) {
    exports.cleanUrl = cleanUrl;
    exports.guid = guid;
    exports.shortGuid = shortGuid;
    exports.toType = toType;
    exports.captureMessage = captureMessage;
    exports.logError = logError;
    exports.renameAttr = renameAttr;
    exports.flatten = flatten;

    /**
     * Cleans, normalizes and validates URLs
     */

    function cleanUrl(url) {
        if (typeof url !== 'string') {
            return null;
        }
        url = url.trim();
        if (!/^https?:\/\//i.test(url)) {
            url = 'http://' + url;
        }
        try {
            url = new URI(url).normalize();
        } catch (e) {
            return null;
        }
        if (!url.host()) {
            return null;
        }
        return url.toString();
    }

    /**
     * Four random hex characters
     */
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    }

    function guid() {
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }

    function shortGuid() {
        var separator = arguments.length <= 0 || arguments[0] === undefined ? '-' : arguments[0];

        return s4() + separator + s4() + separator + s4();
    }

    function toType(obj) {
        return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    }

    function captureMessage(msg, params) {
        _ember['default'].Logger.log(msg);
        if (window.Raven) {
            Raven.captureMessage(msg, params);
        }
    }

    function logError(err, params) {
        _ember['default'].Logger.error(err);
        if (window.Raven) {
            Raven.captureException(err, params);
        }
    }

    function renameAttr($elements, from, to) {
        if (to === from) {
            return $elements;
        }

        return $elements.each(function () {
            if (this.hasAttribute(from)) {
                this.setAttribute(to, this.getAttribute(from));
                this.removeAttribute(from);
            } else if (this.hasAttribute(to)) {
                this.removeAttribute(to);
            }
        });
    }

    function flatten(list) {
        var result = [];
        list.forEach(function (element) {
            element.forEach(function (nested) {
                result.push(nested);
            });
        });
        return result;
    }
});
define('portia-ui/validations/fixed-fragment', ['exports', 'ember-changeset-validations/validators', 'portia-ui/validators/whitespace'], function (exports, _emberChangesetValidationsValidators, _portiaUiValidatorsWhitespace) {
  exports['default'] = {
    value: [(0, _emberChangesetValidationsValidators.validatePresence)({ presence: true, message: 'Should not be empty.' }), (0, _portiaUiValidatorsWhitespace['default'])()]
  };
});
define('portia-ui/validations/list-fragment', ['exports', 'ember-changeset-validations/validators'], function (exports, _emberChangesetValidationsValidators) {
  exports['default'] = {
    value: (0, _emberChangesetValidationsValidators.validatePresence)(true)
  };
});
define('portia-ui/validations/range-fragment', ['exports', 'portia-ui/validators/range'], function (exports, _portiaUiValidatorsRange) {
  exports['default'] = {
    value: (0, _portiaUiValidatorsRange['default'])()
  };
});
define('portia-ui/validators/range', ['exports', 'portia-ui/utils/start-urls'], function (exports, _portiaUiUtilsStartUrls) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = validateRange;

    function hasMixedCase(endpoints) {
        return endpoints.match(/[a-z]/) && endpoints.match(/[A-Z]/);
    }

    function hasSingleLetters(endpoints) {
        return endpoints.split('-').every(function (x) {
            return x.length === 1;
        });
    }

    function isRangeIncomplete(endpoints) {
        return endpoints.split('-').contains('');
    }

    function validateIncreasing(endpoints, isIncreasing) {
        var _endpoints$split = endpoints.split('-');

        var _endpoints$split2 = _slicedToArray(_endpoints$split, 2);

        var a = _endpoints$split2[0];
        var b = _endpoints$split2[1];

        var msg = 'A range must be increasing. Try swapping to ' + b + '-' + a + '.';
        return isIncreasing(a, b) || msg;
    }

    function validateRange() {
        return function (key, newValue /*, oldValue, changes */) {
            if (isRangeIncomplete(newValue)) {
                return 'A range must have both a start and an end.';
            }

            if ((0, _portiaUiUtilsStartUrls.allDigits)(newValue)) {
                return validateIncreasing(newValue, function (a, b) {
                    return parseInt(a) <= parseInt(b);
                });
            }

            if ((0, _portiaUiUtilsStartUrls.allLetters)(newValue)) {
                if (!hasSingleLetters(newValue)) {
                    return 'A range must have only single letters.';
                }
                if (hasMixedCase(newValue)) {
                    return 'A range cannot mix lower and upper case.';
                }
                return validateIncreasing(newValue, function (a, b) {
                    return a <= b;
                });
            }

            return 'A range must not mix numbers and letters.';
        };
    }
});
define('portia-ui/validators/whitespace', ['exports'], function (exports) {
    exports['default'] = validateWhitespace;

    function validateWhitespace() {
        return function (key, newValue /*, oldValue, changes */) {
            return newValue.match(/\s/g) ? 'Should not have whitespace' : true;
        };
    }
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('portia-ui/config/environment', ['ember'], function(Ember) {
  var prefix = 'portia-ui';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("portia-ui/app")["default"].create({"LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_TRANSITIONS_INTERNAL":true,"LOG_VIEW_LOOKUPS":true,"name":"portia-ui","version":"2.0.0-alpha+e476c792"});
}

/* jshint ignore:end */
//# sourceMappingURL=portia-ui.map
